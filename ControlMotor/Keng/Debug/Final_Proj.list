
Final_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d98c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  0800db30  0800db30  0000eb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e738  0800e738  0001025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e738  0800e738  0000f738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e740  0800e740  0001025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e740  0800e740  0000f740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e744  0800e744  0000f744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800e748  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b08  2000025c  0800e9a4  0001025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d64  0800e9a4  00010d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bd4  00000000  00000000  0001028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003474  00000000  00000000  00026e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0002a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c9  00000000  00000000  0002b850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a547  00000000  00000000  0002c919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adec  00000000  00000000  00046e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1137  00000000  00000000  00061c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102d83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fdc  00000000  00000000  00102dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00109da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db14 	.word	0x0800db14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800db14 	.word	0x0800db14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <spi_calc_event_parity>:
uint16_t write(uint16_t reg_addr, uint16_t data);

/* Private Functions ********************************************************/

uint8_t spi_calc_event_parity(uint16_t value)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t cnt = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < 16; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	73bb      	strb	r3, [r7, #14]
 8001006:	e00d      	b.n	8001024 <spi_calc_event_parity+0x30>
  {
    if (value & 0x1)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <spi_calc_event_parity+0x24>
    {
      cnt++;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	3301      	adds	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
    }
    value >>= 1;
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	80fb      	strh	r3, [r7, #6]
  for (uint8_t i = 0; i < 16; i++)
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	3301      	adds	r3, #1
 8001022:	73bb      	strb	r3, [r7, #14]
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d9ee      	bls.n	8001008 <spi_calc_event_parity+0x14>
  }

  return cnt & 0x1;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <read>:

uint16_t read(const uint16_t reg_addr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2];

  uint16_t command = 0b0100000000000000;
 800104a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800104e:	81fb      	strh	r3, [r7, #14]
  command          = command | reg_addr;
 8001050:	89fa      	ldrh	r2, [r7, #14]
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4313      	orrs	r3, r2
 8001056:	81fb      	strh	r3, [r7, #14]

  command |= (uint16_t)spi_calc_event_parity(command) << 15;
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffca 	bl	8000ff4 <spi_calc_event_parity>
 8001060:	4603      	mov	r3, r0
 8001062:	03db      	lsls	r3, r3, #15
 8001064:	b21a      	sxth	r2, r3
 8001066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106a:	4313      	orrs	r3, r2
 800106c:	b21b      	sxth	r3, r3
 800106e:	81fb      	strh	r3, [r7, #14]

  data[1] = command & 0xFF;
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	737b      	strb	r3, [r7, #13]
  data[0] = command >> 8 & 0xFF;
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	733b      	strb	r3, [r7, #12]

  EN_SPI;
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <read+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a25      	ldr	r2, [pc, #148]	@ (800111c <read+0xdc>)
 8001086:	8811      	ldrh	r1, [r2, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f004 f8d2 	bl	8005234 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ss_hspi, (uint8_t *)&data, 2, 0xFFFF);
 8001090:	f107 010c 	add.w	r1, r7, #12
 8001094:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001098:	2202      	movs	r2, #2
 800109a:	4821      	ldr	r0, [pc, #132]	@ (8001120 <read+0xe0>)
 800109c:	f005 fab3 	bl	8006606 <HAL_SPI_Transmit>
  DIS_SPI;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <read+0xd8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <read+0xdc>)
 80010a6:	8811      	ldrh	r1, [r2, #0]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f8c2 	bl	8005234 <HAL_GPIO_WritePin>

  EN_SPI;
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <read+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a19      	ldr	r2, [pc, #100]	@ (800111c <read+0xdc>)
 80010b6:	8811      	ldrh	r1, [r2, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 f8ba 	bl	8005234 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&ss_hspi, (uint8_t *)&data, 2, 0xFFFF);
 80010c0:	f107 010c 	add.w	r1, r7, #12
 80010c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c8:	2202      	movs	r2, #2
 80010ca:	4815      	ldr	r0, [pc, #84]	@ (8001120 <read+0xe0>)
 80010cc:	f005 fbdf 	bl	800688e <HAL_SPI_Receive>
  DIS_SPI;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <read+0xd8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a11      	ldr	r2, [pc, #68]	@ (800111c <read+0xdc>)
 80010d6:	8811      	ldrh	r1, [r2, #0]
 80010d8:	2201      	movs	r2, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 f8aa 	bl	8005234 <HAL_GPIO_WritePin>

  if (data[1] & 0x40)
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <read+0xb2>
  {
    err_flg = 1;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <read+0xe4>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e002      	b.n	80010f8 <read+0xb8>
  }
  else
  {
    err_flg = 0;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <read+0xe4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
  }

  return ((data[1] & 0xFF) << 8 | data[0] & 0xFF) & ~0xC000;
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7b3b      	ldrb	r3, [r7, #12]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800110c:	b29b      	uxth	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000278 	.word	0x20000278
 800111c:	2000027c 	.word	0x2000027c
 8001120:	20000280 	.word	0x20000280
 8001124:	200002d8 	.word	0x200002d8

08001128 <as5048a_init>:
/* Public Functions *********************************************************/

void as5048a_init(const SPI_HandleTypeDef *hspi,
                  GPIO_TypeDef *           spi_cs_port,
                  const uint16_t           spi_cs_pin)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	4613      	mov	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
  ss_hspi = *hspi;
 8001136:	4a09      	ldr	r2, [pc, #36]	@ (800115c <as5048a_init+0x34>)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	2358      	movs	r3, #88	@ 0x58
 8001140:	461a      	mov	r2, r3
 8001142:	f009 f872 	bl	800a22a <memcpy>
  cs_port = spi_cs_port;
 8001146:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <as5048a_init+0x38>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	6013      	str	r3, [r2, #0]
  cs_pin  = spi_cs_pin;
 800114c:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <as5048a_init+0x3c>)
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	8013      	strh	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000280 	.word	0x20000280
 8001160:	20000278 	.word	0x20000278
 8001164:	2000027c 	.word	0x2000027c

08001168 <get_angle>:

float get_angle(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  const float current_angle = (float)read(AS5048A_ANGLE) * ((float)360 /
 800116e:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff64 	bl	8001040 <read>
 8001178:	4603      	mov	r3, r0
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001182:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80011b0 <get_angle+0x48>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	edc7 7a01 	vstr	s15, [r7, #4]
    16383);

  return current_angle * _PI / 180.0f;
 800118e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001192:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80011b4 <get_angle+0x4c>
 8001196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011b8 <get_angle+0x50>
 800119e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a2:	eef0 7a66 	vmov.f32	s15, s13
}
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	3cb402d0 	.word	0x3cb402d0
 80011b4:	40490fdb 	.word	0x40490fdb
 80011b8:	43340000 	.word	0x43340000

080011bc <get_vel_foc>:

float get_vel_foc(const float dt)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	ed87 0a01 	vstr	s0, [r7, #4]
  const float angle = get_angle();
 80011c6:	f7ff ffcf 	bl	8001168 <get_angle>
 80011ca:	ed87 0a02 	vstr	s0, [r7, #8]

  float diff = angle - zero_angle;
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <get_vel_foc+0x94>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (diff > _PI)
 80011e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001254 <get_vel_foc+0x98>
 80011e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	dd08      	ble.n	8001204 <get_vel_foc+0x48>
  {
    diff -= _PI;
 80011f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001254 <get_vel_foc+0x98>
 80011fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
 8001202:	e010      	b.n	8001226 <get_vel_foc+0x6a>
  }
  else if (diff < -_PI)
 8001204:	edd7 7a03 	vldr	s15, [r7, #12]
 8001208:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001258 <get_vel_foc+0x9c>
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d507      	bpl.n	8001226 <get_vel_foc+0x6a>
  {
    diff += _PI;
 8001216:	edd7 7a03 	vldr	s15, [r7, #12]
 800121a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001254 <get_vel_foc+0x98>
 800121e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001222:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  vel = diff / dt;
 8001226:	edd7 6a03 	vldr	s13, [r7, #12]
 800122a:	ed97 7a01 	vldr	s14, [r7, #4]
 800122e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <get_vel_foc+0xa0>)
 8001234:	edc3 7a00 	vstr	s15, [r3]

  zero_angle = angle;
 8001238:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <get_vel_foc+0x94>)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	6013      	str	r3, [r2, #0]

  return vel;
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <get_vel_foc+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	ee07 3a90 	vmov	s15, r3
}
 8001246:	eeb0 0a67 	vmov.f32	s0, s15
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200002dc 	.word	0x200002dc
 8001254:	40490fdb 	.word	0x40490fdb
 8001258:	c0490fdb 	.word	0xc0490fdb
 800125c:	200002e0 	.word	0x200002e0

08001260 <get_vel>:

float get_vel(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return vel;
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <get_vel+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	ee07 3a90 	vmov	s15, r3
}
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	200002e0 	.word	0x200002e0

0800127c <set_pwm>:
uint16_t      foc_en_pin;

/* Public Functions *********************************************************/

void set_pwm(float ua, float ub, float uc)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a03 	vstr	s0, [r7, #12]
 8001286:	edc7 0a02 	vstr	s1, [r7, #8]
 800128a:	ed87 1a01 	vstr	s2, [r7, #4]
  /* Limit the voltage in the driver. */

  ua = _constrain(ua, 0.0f, driver_voltage_limit);
 800128e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d502      	bpl.n	80012a2 <set_pwm+0x26>
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e00d      	b.n	80012be <set_pwm+0x42>
 80012a2:	4bae      	ldr	r3, [pc, #696]	@ (800155c <set_pwm+0x2e0>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	dd02      	ble.n	80012bc <set_pwm+0x40>
 80012b6:	4ba9      	ldr	r3, [pc, #676]	@ (800155c <set_pwm+0x2e0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e000      	b.n	80012be <set_pwm+0x42>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	60fb      	str	r3, [r7, #12]
  ub = _constrain(ub, 0.0f, driver_voltage_limit);
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d502      	bpl.n	80012d4 <set_pwm+0x58>
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	e00d      	b.n	80012f0 <set_pwm+0x74>
 80012d4:	4ba1      	ldr	r3, [pc, #644]	@ (800155c <set_pwm+0x2e0>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ed97 7a02 	vldr	s14, [r7, #8]
 80012de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	dd02      	ble.n	80012ee <set_pwm+0x72>
 80012e8:	4b9c      	ldr	r3, [pc, #624]	@ (800155c <set_pwm+0x2e0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	e000      	b.n	80012f0 <set_pwm+0x74>
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	60bb      	str	r3, [r7, #8]
  uc = _constrain(uc, 0.0f, driver_voltage_limit);
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	d502      	bpl.n	8001306 <set_pwm+0x8a>
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e00d      	b.n	8001322 <set_pwm+0xa6>
 8001306:	4b95      	ldr	r3, [pc, #596]	@ (800155c <set_pwm+0x2e0>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	dd02      	ble.n	8001320 <set_pwm+0xa4>
 800131a:	4b90      	ldr	r3, [pc, #576]	@ (800155c <set_pwm+0x2e0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	e000      	b.n	8001322 <set_pwm+0xa6>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	607b      	str	r3, [r7, #4]

  /* Calculate duty cycle. */

  dc_a = _constrain(ua / voltage_power_supply, 0.0f, 1.0f);
 8001324:	4b8e      	ldr	r3, [pc, #568]	@ (8001560 <set_pwm+0x2e4>)
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	edd7 6a03 	vldr	s13, [r7, #12]
 800132e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	d502      	bpl.n	8001342 <set_pwm+0xc6>
 800133c:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8001564 <set_pwm+0x2e8>
 8001340:	e017      	b.n	8001372 <set_pwm+0xf6>
 8001342:	4b87      	ldr	r3, [pc, #540]	@ (8001560 <set_pwm+0x2e4>)
 8001344:	ed93 7a00 	vldr	s14, [r3]
 8001348:	edd7 6a03 	vldr	s13, [r7, #12]
 800134c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	dd02      	ble.n	8001364 <set_pwm+0xe8>
 800135e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001362:	e006      	b.n	8001372 <set_pwm+0xf6>
 8001364:	4b7e      	ldr	r3, [pc, #504]	@ (8001560 <set_pwm+0x2e4>)
 8001366:	ed93 7a00 	vldr	s14, [r3]
 800136a:	edd7 6a03 	vldr	s13, [r7, #12]
 800136e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001372:	4b7d      	ldr	r3, [pc, #500]	@ (8001568 <set_pwm+0x2ec>)
 8001374:	edc3 7a00 	vstr	s15, [r3]
  dc_b = _constrain(ub / voltage_power_supply, 0.0f, 1.0f);
 8001378:	4b79      	ldr	r3, [pc, #484]	@ (8001560 <set_pwm+0x2e4>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d502      	bpl.n	8001396 <set_pwm+0x11a>
 8001390:	eddf 7a74 	vldr	s15, [pc, #464]	@ 8001564 <set_pwm+0x2e8>
 8001394:	e017      	b.n	80013c6 <set_pwm+0x14a>
 8001396:	4b72      	ldr	r3, [pc, #456]	@ (8001560 <set_pwm+0x2e4>)
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	edd7 6a02 	vldr	s13, [r7, #8]
 80013a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	dd02      	ble.n	80013b8 <set_pwm+0x13c>
 80013b2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80013b6:	e006      	b.n	80013c6 <set_pwm+0x14a>
 80013b8:	4b69      	ldr	r3, [pc, #420]	@ (8001560 <set_pwm+0x2e4>)
 80013ba:	ed93 7a00 	vldr	s14, [r3]
 80013be:	edd7 6a02 	vldr	s13, [r7, #8]
 80013c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c6:	4b69      	ldr	r3, [pc, #420]	@ (800156c <set_pwm+0x2f0>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
  dc_c = _constrain(uc / voltage_power_supply, 0.0f, 1.0f);
 80013cc:	4b64      	ldr	r3, [pc, #400]	@ (8001560 <set_pwm+0x2e4>)
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80013d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	d502      	bpl.n	80013ea <set_pwm+0x16e>
 80013e4:	eddf 7a5f 	vldr	s15, [pc, #380]	@ 8001564 <set_pwm+0x2e8>
 80013e8:	e017      	b.n	800141a <set_pwm+0x19e>
 80013ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001560 <set_pwm+0x2e4>)
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80013f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	dd02      	ble.n	800140c <set_pwm+0x190>
 8001406:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800140a:	e006      	b.n	800141a <set_pwm+0x19e>
 800140c:	4b54      	ldr	r3, [pc, #336]	@ (8001560 <set_pwm+0x2e4>)
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	edd7 6a01 	vldr	s13, [r7, #4]
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <set_pwm+0x2f4>)
 800141c:	edc3 7a00 	vstr	s15, [r3]

  /* PWM_A */

  uint32_t pwm_range = foc_htim1.Instance->ARR;
 8001420:	4b54      	ldr	r3, [pc, #336]	@ (8001574 <set_pwm+0x2f8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001426:	617b      	str	r3, [r7, #20]

  __HAL_TIM_SET_COMPARE(&foc_htim1, ph_a_tim, dc_a * pwm_range);
 8001428:	4b53      	ldr	r3, [pc, #332]	@ (8001578 <set_pwm+0x2fc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <set_pwm+0x1d8>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143a:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <set_pwm+0x2ec>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	4b4b      	ldr	r3, [pc, #300]	@ (8001574 <set_pwm+0x2f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144c:	ee17 2a90 	vmov	r2, s15
 8001450:	635a      	str	r2, [r3, #52]	@ 0x34
 8001452:	e03c      	b.n	80014ce <set_pwm+0x252>
 8001454:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <set_pwm+0x2fc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d111      	bne.n	8001480 <set_pwm+0x204>
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001466:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <set_pwm+0x2ec>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <set_pwm+0x2f8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001478:	ee17 3a90 	vmov	r3, s15
 800147c:	6393      	str	r3, [r2, #56]	@ 0x38
 800147e:	e026      	b.n	80014ce <set_pwm+0x252>
 8001480:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <set_pwm+0x2fc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d111      	bne.n	80014ac <set_pwm+0x230>
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001492:	4b35      	ldr	r3, [pc, #212]	@ (8001568 <set_pwm+0x2ec>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149c:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <set_pwm+0x2f8>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a4:	ee17 3a90 	vmov	r3, s15
 80014a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014aa:	e010      	b.n	80014ce <set_pwm+0x252>
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <set_pwm+0x2ec>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <set_pwm+0x2f8>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c8:	ee17 3a90 	vmov	r3, s15
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40

  /* PWM_B */

  pwm_range = foc_htim2.Instance->ARR;
 80014ce:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <set_pwm+0x300>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d4:	617b      	str	r3, [r7, #20]

  __HAL_TIM_SET_COMPARE(&foc_htim2, ph_b_tim, dc_b * pwm_range);
 80014d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <set_pwm+0x304>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d111      	bne.n	8001502 <set_pwm+0x286>
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e8:	4b20      	ldr	r3, [pc, #128]	@ (800156c <set_pwm+0x2f0>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	4b22      	ldr	r3, [pc, #136]	@ (800157c <set_pwm+0x300>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fa:	ee17 2a90 	vmov	r2, s15
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001500:	e051      	b.n	80015a6 <set_pwm+0x32a>
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <set_pwm+0x304>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d111      	bne.n	800152e <set_pwm+0x2b2>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <set_pwm+0x2f0>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <set_pwm+0x300>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001526:	ee17 3a90 	vmov	r3, s15
 800152a:	6393      	str	r3, [r2, #56]	@ 0x38
 800152c:	e03b      	b.n	80015a6 <set_pwm+0x32a>
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <set_pwm+0x304>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b08      	cmp	r3, #8
 8001534:	d126      	bne.n	8001584 <set_pwm+0x308>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <set_pwm+0x2f0>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <set_pwm+0x300>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001552:	ee17 3a90 	vmov	r3, s15
 8001556:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001558:	e025      	b.n	80015a6 <set_pwm+0x32a>
 800155a:	bf00      	nop
 800155c:	200002e8 	.word	0x200002e8
 8001560:	200002e4 	.word	0x200002e4
 8001564:	00000000 	.word	0x00000000
 8001568:	200002ec 	.word	0x200002ec
 800156c:	200002f0 	.word	0x200002f0
 8001570:	200002f4 	.word	0x200002f4
 8001574:	200002f8 	.word	0x200002f8
 8001578:	200003d0 	.word	0x200003d0
 800157c:	20000340 	.word	0x20000340
 8001580:	200003d4 	.word	0x200003d4
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <set_pwm+0x3e4>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	4b32      	ldr	r3, [pc, #200]	@ (8001664 <set_pwm+0x3e8>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a0:	ee17 3a90 	vmov	r3, s15
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40

  /* PWM_C */

  pwm_range = foc_htim3.Instance->ARR;
 80015a6:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <set_pwm+0x3ec>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ac:	617b      	str	r3, [r7, #20]

  __HAL_TIM_SET_COMPARE(&foc_htim3, ph_c_tim, dc_c * pwm_range);
 80015ae:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <set_pwm+0x3f0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d111      	bne.n	80015da <set_pwm+0x35e>
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001670 <set_pwm+0x3f4>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <set_pwm+0x3ec>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d2:	ee17 2a90 	vmov	r2, s15
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015d8:	e03c      	b.n	8001654 <set_pwm+0x3d8>
  __HAL_TIM_SET_COMPARE(&foc_htim3, ph_c_tim, dc_c * pwm_range);
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <set_pwm+0x3f0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d111      	bne.n	8001606 <set_pwm+0x38a>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <set_pwm+0x3f4>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <set_pwm+0x3ec>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fe:	ee17 3a90 	vmov	r3, s15
 8001602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001604:	e026      	b.n	8001654 <set_pwm+0x3d8>
  __HAL_TIM_SET_COMPARE(&foc_htim3, ph_c_tim, dc_c * pwm_range);
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <set_pwm+0x3f0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d111      	bne.n	8001632 <set_pwm+0x3b6>
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <set_pwm+0x3f4>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <set_pwm+0x3ec>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800162a:	ee17 3a90 	vmov	r3, s15
 800162e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001630:	e010      	b.n	8001654 <set_pwm+0x3d8>
  __HAL_TIM_SET_COMPARE(&foc_htim3, ph_c_tim, dc_c * pwm_range);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <set_pwm+0x3f4>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <set_pwm+0x3ec>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164e:	ee17 3a90 	vmov	r3, s15
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	200002f0 	.word	0x200002f0
 8001664:	20000340 	.word	0x20000340
 8001668:	20000388 	.word	0x20000388
 800166c:	200003d8 	.word	0x200003d8
 8001670:	200002f4 	.word	0x200002f4

08001674 <driver_init>:
                const uint32_t           ph_c_ch,
                GPIO_TypeDef *           en_port,
                const uint16_t           en_pin,
                const float              v_sup,
                const float              drv_v_lim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6178      	str	r0, [r7, #20]
 800167c:	6139      	str	r1, [r7, #16]
 800167e:	60fa      	str	r2, [r7, #12]
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	ed87 0a01 	vstr	s0, [r7, #4]
 8001686:	edc7 0a00 	vstr	s1, [r7]
  foc_htim1            = *_htim1;
 800168a:	4a27      	ldr	r2, [pc, #156]	@ (8001728 <driver_init+0xb4>)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	2348      	movs	r3, #72	@ 0x48
 8001694:	461a      	mov	r2, r3
 8001696:	f008 fdc8 	bl	800a22a <memcpy>
  foc_htim2            = *_htim2;
 800169a:	4a24      	ldr	r2, [pc, #144]	@ (800172c <driver_init+0xb8>)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	2348      	movs	r3, #72	@ 0x48
 80016a4:	461a      	mov	r2, r3
 80016a6:	f008 fdc0 	bl	800a22a <memcpy>
  foc_htim3            = *_htim3;
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <driver_init+0xbc>)
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	2348      	movs	r3, #72	@ 0x48
 80016b4:	461a      	mov	r2, r3
 80016b6:	f008 fdb8 	bl	800a22a <memcpy>
  voltage_power_supply = v_sup;
 80016ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001734 <driver_init+0xc0>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6013      	str	r3, [r2, #0]
  driver_voltage_limit = drv_v_lim > v_sup ? v_sup : drv_v_lim;
 80016c0:	ed97 7a00 	vldr	s14, [r7]
 80016c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	dd01      	ble.n	80016d6 <driver_init+0x62>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	e000      	b.n	80016d8 <driver_init+0x64>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <driver_init+0xc4>)
 80016da:	6013      	str	r3, [r2, #0]

  /* Store configured ports. */

  ph_a_tim = ph_a_ch;
 80016dc:	4a17      	ldr	r2, [pc, #92]	@ (800173c <driver_init+0xc8>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6013      	str	r3, [r2, #0]
  ph_b_tim = ph_b_ch;
 80016e2:	4a17      	ldr	r2, [pc, #92]	@ (8001740 <driver_init+0xcc>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	6013      	str	r3, [r2, #0]
  ph_c_tim = ph_c_ch;
 80016e8:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <driver_init+0xd0>)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	6013      	str	r3, [r2, #0]

  foc_en_port = en_port;
 80016ee:	4a16      	ldr	r2, [pc, #88]	@ (8001748 <driver_init+0xd4>)
 80016f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f2:	6013      	str	r3, [r2, #0]
  foc_en_pin  = en_pin;
 80016f4:	4a15      	ldr	r2, [pc, #84]	@ (800174c <driver_init+0xd8>)
 80016f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016f8:	8013      	strh	r3, [r2, #0]

  HAL_TIM_PWM_Start(&foc_htim1, ph_a_tim);
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <driver_init+0xc8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	4809      	ldr	r0, [pc, #36]	@ (8001728 <driver_init+0xb4>)
 8001702:	f005 fe2f 	bl	8007364 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&foc_htim2, ph_b_tim);
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <driver_init+0xcc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	4807      	ldr	r0, [pc, #28]	@ (800172c <driver_init+0xb8>)
 800170e:	f005 fe29 	bl	8007364 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&foc_htim3, ph_c_tim);
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <driver_init+0xd0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <driver_init+0xbc>)
 800171a:	f005 fe23 	bl	8007364 <HAL_TIM_PWM_Start>

  return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200002f8 	.word	0x200002f8
 800172c:	20000340 	.word	0x20000340
 8001730:	20000388 	.word	0x20000388
 8001734:	200002e4 	.word	0x200002e4
 8001738:	200002e8 	.word	0x200002e8
 800173c:	200003d0 	.word	0x200003d0
 8001740:	200003d4 	.word	0x200003d4
 8001744:	200003d8 	.word	0x200003d8
 8001748:	200003dc 	.word	0x200003dc
 800174c:	200003e0 	.word	0x200003e0

08001750 <driver_enable>:

void driver_enable(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(foc_en_port, foc_en_pin, GPIO_PIN_SET);
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <driver_enable+0x28>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a08      	ldr	r2, [pc, #32]	@ (800177c <driver_enable+0x2c>)
 800175a:	8811      	ldrh	r1, [r2, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fd68 	bl	8005234 <HAL_GPIO_WritePin>

  set_pwm(0, 0, 0);
 8001764:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8001780 <driver_enable+0x30>
 8001768:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8001780 <driver_enable+0x30>
 800176c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001780 <driver_enable+0x30>
 8001770:	f7ff fd84 	bl	800127c <set_pwm>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200003dc 	.word	0x200003dc
 800177c:	200003e0 	.word	0x200003e0
 8001780:	00000000 	.word	0x00000000

08001784 <vel_open_loop>:
int   align_sensor(void);

/* Private Functions ********************************************************/

float vel_open_loop(const float target_vel, float dt)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	ed87 0a01 	vstr	s0, [r7, #4]
 800178e:	edc7 0a00 	vstr	s1, [r7]
  if (dt <= 0 || dt > 0.5f)
 8001792:	edd7 7a00 	vldr	s15, [r7]
 8001796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d908      	bls.n	80017b2 <vel_open_loop+0x2e>
 80017a0:	edd7 7a00 	vldr	s15, [r7]
 80017a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	dd01      	ble.n	80017b6 <vel_open_loop+0x32>
  {
    dt = 1e-3f;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <vel_open_loop+0x98>)
 80017b4:	603b      	str	r3, [r7, #0]
  }

  shaft_angle = _normalize_angle(shaft_angle + target_vel * dt);
 80017b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ba:	edd7 7a00 	vldr	s15, [r7]
 80017be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <vel_open_loop+0x9c>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	f000 fb7e 	bl	8001ed0 <_normalize_angle>
 80017d4:	eef0 7a40 	vmov.f32	s15, s0
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <vel_open_loop+0x9c>)
 80017da:	edc3 7a00 	vstr	s15, [r3]

  //  shaft_velocity = target_vel;

  const float uq = motor_voltage_limit;
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <vel_open_loop+0xa0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]

  set_phrase_voltage(uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 80017e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <vel_open_loop+0x9c>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <vel_open_loop+0xa4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	f000 fc68 	bl	80020c8 <_electricalAngle>
 80017f8:	eef0 7a40 	vmov.f32	s15, s0
 80017fc:	eeb0 1a67 	vmov.f32	s2, s15
 8001800:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800182c <vel_open_loop+0xa8>
 8001804:	ed97 0a03 	vldr	s0, [r7, #12]
 8001808:	f000 f812 	bl	8001830 <set_phrase_voltage>

  return uq;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	ee07 3a90 	vmov	s15, r3
}
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	3a83126f 	.word	0x3a83126f
 8001820:	200003e4 	.word	0x200003e4
 8001824:	200003f0 	.word	0x200003f0
 8001828:	2000045c 	.word	0x2000045c
 800182c:	00000000 	.word	0x00000000

08001830 <set_phrase_voltage>:

void set_phrase_voltage(const float uq, const float ud, const float andel_el)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	@ 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0a03 	vstr	s0, [r7, #12]
 800183a:	edc7 0a02 	vstr	s1, [r7, #8]
 800183e:	ed87 1a01 	vstr	s2, [r7, #4]
  float center;
  //  int   sector;
  float _ca, _sa;

  switch (foc_mod)
 8001842:	4b70      	ldr	r3, [pc, #448]	@ (8001a04 <set_phrase_voltage+0x1d4>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	f200 80c5 	bhi.w	80019d6 <set_phrase_voltage+0x1a6>
  {
    case SINE_PWM:
    case SPACE_VEC_PWM:
      _sincos(andel_el, &_sa, &_ca);
 800184c:	f107 0214 	add.w	r2, r7, #20
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	ed97 0a01 	vldr	s0, [r7, #4]
 800185c:	f000 fb6e 	bl	8001f3c <_sincos>

      u_alpha = _ca * ud - _sa * uq;
 8001860:	ed97 7a05 	vldr	s14, [r7, #20]
 8001864:	edd7 7a02 	vldr	s15, [r7, #8]
 8001868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001870:	edd7 7a03 	vldr	s15, [r7, #12]
 8001874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	4b62      	ldr	r3, [pc, #392]	@ (8001a08 <set_phrase_voltage+0x1d8>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
      u_beta  = _sa * ud + _ca * uq;
 8001882:	ed97 7a04 	vldr	s14, [r7, #16]
 8001886:	edd7 7a02 	vldr	s15, [r7, #8]
 800188a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800188e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001892:	edd7 7a03 	vldr	s15, [r7, #12]
 8001896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	4b5b      	ldr	r3, [pc, #364]	@ (8001a0c <set_phrase_voltage+0x1dc>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]

      ua = u_alpha;
 80018a4:	4b58      	ldr	r3, [pc, #352]	@ (8001a08 <set_phrase_voltage+0x1d8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a59      	ldr	r2, [pc, #356]	@ (8001a10 <set_phrase_voltage+0x1e0>)
 80018aa:	6013      	str	r3, [r2, #0]
      ub = -0.5f * u_alpha + _SQRT3_2 * u_beta;
 80018ac:	4b56      	ldr	r3, [pc, #344]	@ (8001a08 <set_phrase_voltage+0x1d8>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80018b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018ba:	4b54      	ldr	r3, [pc, #336]	@ (8001a0c <set_phrase_voltage+0x1dc>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001a14 <set_phrase_voltage+0x1e4>
 80018c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018cc:	4b52      	ldr	r3, [pc, #328]	@ (8001a18 <set_phrase_voltage+0x1e8>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]
      uc = -0.5f * u_alpha - _SQRT3_2 * u_beta;
 80018d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001a08 <set_phrase_voltage+0x1d8>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80018dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018e0:	4b4a      	ldr	r3, [pc, #296]	@ (8001a0c <set_phrase_voltage+0x1dc>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001a14 <set_phrase_voltage+0x1e4>
 80018ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	4b4a      	ldr	r3, [pc, #296]	@ (8001a1c <set_phrase_voltage+0x1ec>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]

      center = driver_voltage_limit / 2;
 80018f8:	4b49      	ldr	r3, [pc, #292]	@ (8001a20 <set_phrase_voltage+0x1f0>)
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001906:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // TODO: Add Space Vector PWM if clause

      if (!modulation_centered)
 800190a:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <set_phrase_voltage+0x1f4>)
 800190c:	f993 3000 	ldrsb.w	r3, [r3]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d141      	bne.n	8001998 <set_phrase_voltage+0x168>
      {
        const float umin = min(ua, min(ub, uc));
 8001914:	4b3e      	ldr	r3, [pc, #248]	@ (8001a10 <set_phrase_voltage+0x1e0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800191a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a18 <set_phrase_voltage+0x1e8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001920:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <set_phrase_voltage+0x1ec>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800192a:	edd7 7a08 	vldr	s15, [r7, #32]
 800192e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	d501      	bpl.n	800193c <set_phrase_voltage+0x10c>
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	e000      	b.n	800193e <set_phrase_voltage+0x10e>
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001944:	edd7 7a07 	vldr	s15, [r7, #28]
 8001948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	d501      	bpl.n	8001956 <set_phrase_voltage+0x126>
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	e000      	b.n	8001958 <set_phrase_voltage+0x128>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	61bb      	str	r3, [r7, #24]

        ua -= umin;
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <set_phrase_voltage+0x1e0>)
 800195c:	ed93 7a00 	vldr	s14, [r3]
 8001960:	edd7 7a06 	vldr	s15, [r7, #24]
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <set_phrase_voltage+0x1e0>)
 800196a:	edc3 7a00 	vstr	s15, [r3]
        ub -= umin;
 800196e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <set_phrase_voltage+0x1e8>)
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	edd7 7a06 	vldr	s15, [r7, #24]
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <set_phrase_voltage+0x1e8>)
 800197e:	edc3 7a00 	vstr	s15, [r3]
        uc -= umin;
 8001982:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <set_phrase_voltage+0x1ec>)
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	edd7 7a06 	vldr	s15, [r7, #24]
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <set_phrase_voltage+0x1ec>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
      {
        ua += center;
        ub += center;
        uc += center;
      }
      break;
 8001996:	e01f      	b.n	80019d8 <set_phrase_voltage+0x1a8>
        ua += center;
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <set_phrase_voltage+0x1e0>)
 800199a:	ed93 7a00 	vldr	s14, [r3]
 800199e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <set_phrase_voltage+0x1e0>)
 80019a8:	edc3 7a00 	vstr	s15, [r3]
        ub += center;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <set_phrase_voltage+0x1e8>)
 80019ae:	ed93 7a00 	vldr	s14, [r3]
 80019b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <set_phrase_voltage+0x1e8>)
 80019bc:	edc3 7a00 	vstr	s15, [r3]
        uc += center;
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <set_phrase_voltage+0x1ec>)
 80019c2:	ed93 7a00 	vldr	s14, [r3]
 80019c6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ce:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <set_phrase_voltage+0x1ec>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
      break;
 80019d4:	e000      	b.n	80019d8 <set_phrase_voltage+0x1a8>

    default:
      break;
 80019d6:	bf00      	nop
  }

  set_pwm(ua, ub, uc);
 80019d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <set_phrase_voltage+0x1e0>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <set_phrase_voltage+0x1e8>)
 80019e0:	ed93 7a00 	vldr	s14, [r3]
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <set_phrase_voltage+0x1ec>)
 80019e6:	edd3 6a00 	vldr	s13, [r3]
 80019ea:	eeb0 1a66 	vmov.f32	s2, s13
 80019ee:	eef0 0a47 	vmov.f32	s1, s14
 80019f2:	eeb0 0a67 	vmov.f32	s0, s15
 80019f6:	f7ff fc41 	bl	800127c <set_pwm>
}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	@ 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200003f4 	.word	0x200003f4
 8001a08:	200003f8 	.word	0x200003f8
 8001a0c:	200003fc 	.word	0x200003fc
 8001a10:	20000450 	.word	0x20000450
 8001a14:	3f5db3d7 	.word	0x3f5db3d7
 8001a18:	20000454 	.word	0x20000454
 8001a1c:	20000458 	.word	0x20000458
 8001a20:	200002e8 	.word	0x200002e8
 8001a24:	20000000 	.word	0x20000000

08001a28 <align_sensor>:

int align_sensor(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  ss_dir                    = UNKNOWN;
 8001a2e:	4b6b      	ldr	r3, [pc, #428]	@ (8001bdc <align_sensor+0x1b4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
  const float voltage_align = voltage_sensor_align;
 8001a34:	4b6a      	ldr	r3, [pc, #424]	@ (8001be0 <align_sensor+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	617b      	str	r3, [r7, #20]

  /* Find natural direction. */

  for (int i = 0; i <= 500; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e020      	b.n	8001a82 <align_sensor+0x5a>
  {
    const float angle = _3PI_2 + _2PI * (float)i / 500.0f;
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001be4 <align_sensor+0x1bc>
 8001a4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a52:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001be8 <align_sensor+0x1c0>
 8001a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5a:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001bec <align_sensor+0x1c4>
 8001a5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a62:	edc7 7a00 	vstr	s15, [r7]
    set_phrase_voltage(voltage_align, 0, angle);
 8001a66:	ed97 1a00 	vldr	s2, [r7]
 8001a6a:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001bf0 <align_sensor+0x1c8>
 8001a6e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a72:	f7ff fedd 	bl	8001830 <set_phrase_voltage>
    HAL_Delay(2);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f002 f916 	bl	8003ca8 <HAL_Delay>
  for (int i = 0; i <= 500; i++)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a88:	ddda      	ble.n	8001a40 <align_sensor+0x18>
  }

  const float mid_angle = get_angle();
 8001a8a:	f7ff fb6d 	bl	8001168 <get_angle>
 8001a8e:	ed87 0a04 	vstr	s0, [r7, #16]

  for (int i = 500; i >= 0; i--)
 8001a92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	e020      	b.n	8001adc <align_sensor+0xb4>
  {
    const float angle = _3PI_2 + _2PI * (float)i / 500.0f;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001be4 <align_sensor+0x1bc>
 8001aa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001be8 <align_sensor+0x1c0>
 8001ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001bec <align_sensor+0x1c4>
 8001ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001abc:	edc7 7a01 	vstr	s15, [r7, #4]
    set_phrase_voltage(voltage_align, 0, angle);
 8001ac0:	ed97 1a01 	vldr	s2, [r7, #4]
 8001ac4:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8001bf0 <align_sensor+0x1c8>
 8001ac8:	ed97 0a05 	vldr	s0, [r7, #20]
 8001acc:	f7ff feb0 	bl	8001830 <set_phrase_voltage>
    HAL_Delay(2);
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f002 f8e9 	bl	8003ca8 <HAL_Delay>
  for (int i = 500; i >= 0; i--)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dadb      	bge.n	8001a9a <align_sensor+0x72>
  }

  const float end_angle = get_angle();
 8001ae2:	f7ff fb41 	bl	8001168 <get_angle>
 8001ae6:	ed87 0a03 	vstr	s0, [r7, #12]

  HAL_Delay(200);
 8001aea:	20c8      	movs	r0, #200	@ 0xc8
 8001aec:	f002 f8dc 	bl	8003ca8 <HAL_Delay>

  const float moved = fabsf(mid_angle - end_angle);
 8001af0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afc:	eef0 7ae7 	vabs.f32	s15, s15
 8001b00:	edc7 7a02 	vstr	s15, [r7, #8]
  if (moved < MIN_ANGLE_DETECT_MOVEMENT)
 8001b04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b08:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001bf4 <align_sensor+0x1cc>
 8001b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d501      	bpl.n	8001b1a <align_sensor+0xf2>
  {
    return 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e05c      	b.n	8001bd4 <align_sensor+0x1ac>
  }

  if (mid_angle < end_angle)
 8001b1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d503      	bpl.n	8001b34 <align_sensor+0x10c>
  {
    ss_dir = CCW;
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <align_sensor+0x1b4>)
 8001b2e:	22ff      	movs	r2, #255	@ 0xff
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e002      	b.n	8001b3a <align_sensor+0x112>
  }
  else
  {
    ss_dir = CW;
 8001b34:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <align_sensor+0x1b4>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
  }

  pp_check_result = !(fabsf(moved * (float)pole_pairs - _2PI) > 0.5f);
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf8 <align_sensor+0x1d0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001be4 <align_sensor+0x1bc>
 8001b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b56:	eef0 7ae7 	vabs.f32	s15, s15
 8001b5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	bfcc      	ite	gt
 8001b68:	2301      	movgt	r3, #1
 8001b6a:	2300      	movle	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f083 0301 	eor.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <align_sensor+0x1d4>)
 8001b7c:	701a      	strb	r2, [r3, #0]
  if (pp_check_result == false)
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <align_sensor+0x1d4>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <align_sensor+0x168>
  {
    return 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e021      	b.n	8001bd4 <align_sensor+0x1ac>
  }

  /* Set zero electric angle. */

  set_phrase_voltage(voltage_align, 0, _3PI_2);
 8001b90:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8001bec <align_sensor+0x1c4>
 8001b94:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001bf0 <align_sensor+0x1c8>
 8001b98:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b9c:	f7ff fe48 	bl	8001830 <set_phrase_voltage>
  HAL_Delay(700);
 8001ba0:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001ba4:	f002 f880 	bl	8003ca8 <HAL_Delay>

  zero_electric_angle = get_angle();
 8001ba8:	f7ff fade 	bl	8001168 <get_angle>
 8001bac:	eef0 7a40 	vmov.f32	s15, s0
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <align_sensor+0x1d8>)
 8001bb2:	edc3 7a00 	vstr	s15, [r3]

  HAL_Delay(20);
 8001bb6:	2014      	movs	r0, #20
 8001bb8:	f002 f876 	bl	8003ca8 <HAL_Delay>

  set_phrase_voltage(0, 0, 0);
 8001bbc:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8001bf0 <align_sensor+0x1c8>
 8001bc0:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001bf0 <align_sensor+0x1c8>
 8001bc4:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001bf0 <align_sensor+0x1c8>
 8001bc8:	f7ff fe32 	bl	8001830 <set_phrase_voltage>
  HAL_Delay(200);
 8001bcc:	20c8      	movs	r0, #200	@ 0xc8
 8001bce:	f002 f86b 	bl	8003ca8 <HAL_Delay>
  return 1;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000411 	.word	0x20000411
 8001be0:	20000444 	.word	0x20000444
 8001be4:	40c90fdb 	.word	0x40c90fdb
 8001be8:	43fa0000 	.word	0x43fa0000
 8001bec:	4096cbe4 	.word	0x4096cbe4
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	3d7ecfa9 	.word	0x3d7ecfa9
 8001bf8:	2000045c 	.word	0x2000045c
 8001bfc:	20000412 	.word	0x20000412
 8001c00:	20000414 	.word	0x20000414

08001c04 <bldc_vel_ctrl_init>:
                           const float        v_ss_align,
                           const float        vel_idx_s,
                           const struct lpf_s lpf,
                           const struct pid_s pid,
                           const float        mot_v_lim)
{
 8001c04:	b084      	sub	sp, #16
 8001c06:	b5b0      	push	{r4, r5, r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c12:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c16:	eeb0 7a41 	vmov.f32	s14, s2
 8001c1a:	eef0 7a61 	vmov.f32	s15, s3
 8001c1e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001c26:	ed87 2a00 	vstr	s4, [r7]
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	75fb      	strb	r3, [r7, #23]
 8001c2e:	ed87 7a01 	vstr	s14, [r7, #4]
 8001c32:	edc7 7a02 	vstr	s15, [r7, #8]
  motor_voltage_limit = mot_v_lim > driver_voltage_limit
 8001c36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <bldc_vel_ctrl_init+0xe0>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
                          ? driver_voltage_limit
                          : mot_v_lim;
 8001c3c:	ed97 7a00 	vldr	s14, [r7]
 8001c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	dd02      	ble.n	8001c50 <bldc_vel_ctrl_init+0x4c>
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <bldc_vel_ctrl_init+0xe0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e000      	b.n	8001c52 <bldc_vel_ctrl_init+0x4e>
 8001c50:	683b      	ldr	r3, [r7, #0]
  motor_voltage_limit = mot_v_lim > driver_voltage_limit
 8001c52:	4a25      	ldr	r2, [pc, #148]	@ (8001ce8 <bldc_vel_ctrl_init+0xe4>)
 8001c54:	6013      	str	r3, [r2, #0]
  voltage_sensor_align = v_ss_align > motor_voltage_limit
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <bldc_vel_ctrl_init+0xe4>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
                           ? motor_voltage_limit
                           : v_ss_align;
 8001c5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	dd02      	ble.n	8001c70 <bldc_vel_ctrl_init+0x6c>
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <bldc_vel_ctrl_init+0xe4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e000      	b.n	8001c72 <bldc_vel_ctrl_init+0x6e>
 8001c70:	693b      	ldr	r3, [r7, #16]
  voltage_sensor_align = v_ss_align > motor_voltage_limit
 8001c72:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <bldc_vel_ctrl_init+0xe8>)
 8001c74:	6013      	str	r3, [r2, #0]
  velocity_index_search = vel_idx_s;
 8001c76:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf0 <bldc_vel_ctrl_init+0xec>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6013      	str	r3, [r2, #0]

  bldc_pid       = pid;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <bldc_vel_ctrl_init+0xf0>)
 8001c7e:	461d      	mov	r5, r3
 8001c80:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  bldc_lpf       = lpf;
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <bldc_vel_ctrl_init+0xf4>)
 8001c92:	461a      	mov	r2, r3
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c9a:	e882 0003 	stmia.w	r2, {r0, r1}
  bldc_pid.limit = motor_voltage_limit;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <bldc_vel_ctrl_init+0xe4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <bldc_vel_ctrl_init+0xf0>)
 8001ca4:	6113      	str	r3, [r2, #16]

  motor_controller = VELOCITY;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <bldc_vel_ctrl_init+0xf8>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
  pole_pairs       = pp;
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <bldc_vel_ctrl_init+0xfc>)
 8001cb0:	6013      	str	r3, [r2, #0]

  sensor = 1;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <bldc_vel_ctrl_init+0x100>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]

  voltage.q = 0;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <bldc_vel_ctrl_init+0x104>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  voltage.d = 0;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <bldc_vel_ctrl_init+0x104>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

  bldc_enable();
 8001cc8:	f000 f834 	bl	8001d34 <bldc_enable>

  HAL_Delay(500);
 8001ccc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cd0:	f001 ffea 	bl	8003ca8 <HAL_Delay>

  return 1;
 8001cd4:	2301      	movs	r3, #1
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001ce0:	b004      	add	sp, #16
 8001ce2:	4770      	bx	lr
 8001ce4:	200002e8 	.word	0x200002e8
 8001ce8:	200003f0 	.word	0x200003f0
 8001cec:	20000444 	.word	0x20000444
 8001cf0:	20000448 	.word	0x20000448
 8001cf4:	2000041c 	.word	0x2000041c
 8001cf8:	2000043c 	.word	0x2000043c
 8001cfc:	2000044c 	.word	0x2000044c
 8001d00:	2000045c 	.word	0x2000045c
 8001d04:	20000410 	.word	0x20000410
 8001d08:	20000408 	.word	0x20000408

08001d0c <foc_init>:

int foc_init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
  int rslt = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]

  if (sensor)
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <foc_init+0x24>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <foc_init+0x18>
  {
    rslt = align_sensor();
 8001d1e:	f7ff fe83 	bl	8001a28 <align_sensor>
 8001d22:	6078      	str	r0, [r7, #4]
  }

  return rslt;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000410 	.word	0x20000410

08001d34 <bldc_enable>:

void bldc_enable(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  driver_enable();
 8001d38:	f7ff fd0a 	bl	8001750 <driver_enable>

  enabled = 1;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	@ (8001d48 <bldc_enable+0x14>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000400 	.word	0x20000400

08001d4c <bldc_move>:

  enabled = 0;
}

void bldc_move(const float target, const float dt)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d56:	edc7 0a00 	vstr	s1, [r7]
  shaft_velocity = lpf_calc(&bldc_lpf, get_vel_foc(dt), dt);
 8001d5a:	ed97 0a00 	vldr	s0, [r7]
 8001d5e:	f7ff fa2d 	bl	80011bc <get_vel_foc>
 8001d62:	eef0 7a40 	vmov.f32	s15, s0
 8001d66:	edd7 0a00 	vldr	s1, [r7]
 8001d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6e:	4827      	ldr	r0, [pc, #156]	@ (8001e0c <bldc_move+0xc0>)
 8001d70:	f000 f9c0 	bl	80020f4 <lpf_calc>
 8001d74:	eef0 7a40 	vmov.f32	s15, s0
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <bldc_move+0xc4>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]

  if (!enabled)
 8001d7e:	4b25      	ldr	r3, [pc, #148]	@ (8001e14 <bldc_move+0xc8>)
 8001d80:	f993 3000 	ldrsb.w	r3, [r3]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d03c      	beq.n	8001e02 <bldc_move+0xb6>
  {
    return;
  }

  switch (motor_controller)
 8001d88:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <bldc_move+0xcc>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d002      	beq.n	8001d96 <bldc_move+0x4a>
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d020      	beq.n	8001dd6 <bldc_move+0x8a>
      voltage.q = vel_open_loop(shaft_velocity_sp, dt);
      voltage.d = 0;
      break;

    default:
      break;
 8001d94:	e036      	b.n	8001e04 <bldc_move+0xb8>
      shaft_velocity_sp = target;
 8001d96:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <bldc_move+0xd0>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
      current_sp = pid_calculate(&bldc_pid,
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <bldc_move+0xd0>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <bldc_move+0xc4>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dac:	edd7 0a00 	vldr	s1, [r7]
 8001db0:	eeb0 0a67 	vmov.f32	s0, s15
 8001db4:	481a      	ldr	r0, [pc, #104]	@ (8001e20 <bldc_move+0xd4>)
 8001db6:	f000 ffc3 	bl	8002d40 <pid_calculate>
 8001dba:	eef0 7a40 	vmov.f32	s15, s0
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <bldc_move+0xd8>)
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
      voltage.q = current_sp;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <bldc_move+0xd8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <bldc_move+0xdc>)
 8001dca:	6053      	str	r3, [r2, #4]
      voltage.d = 0;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <bldc_move+0xdc>)
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
      break;
 8001dd4:	e016      	b.n	8001e04 <bldc_move+0xb8>
      shaft_velocity_sp = target;
 8001dd6:	4a11      	ldr	r2, [pc, #68]	@ (8001e1c <bldc_move+0xd0>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6013      	str	r3, [r2, #0]
      voltage.q = vel_open_loop(shaft_velocity_sp, dt);
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <bldc_move+0xd0>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	edd7 0a00 	vldr	s1, [r7]
 8001de6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dea:	f7ff fccb 	bl	8001784 <vel_open_loop>
 8001dee:	eef0 7a40 	vmov.f32	s15, s0
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <bldc_move+0xdc>)
 8001df4:	edc3 7a01 	vstr	s15, [r3, #4]
      voltage.d = 0;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <bldc_move+0xdc>)
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
      break;
 8001e00:	e000      	b.n	8001e04 <bldc_move+0xb8>
    return;
 8001e02:	bf00      	nop
  }
}
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000043c 	.word	0x2000043c
 8001e10:	200003ec 	.word	0x200003ec
 8001e14:	20000400 	.word	0x20000400
 8001e18:	2000044c 	.word	0x2000044c
 8001e1c:	20000404 	.word	0x20000404
 8001e20:	2000041c 	.word	0x2000041c
 8001e24:	20000418 	.word	0x20000418
 8001e28:	20000408 	.word	0x20000408

08001e2c <loop_foc>:

void loop_foc(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	ed2d 8b02 	vpush	{d8}
 8001e32:	af00      	add	r7, sp, #0
  if (motor_controller == VELOCITY_OPENLOOP ||
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <loop_foc+0x8c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d035      	beq.n	8001ea8 <loop_foc+0x7c>
    motor_controller == ANGLE_OPENLOOP)
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <loop_foc+0x8c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
  if (motor_controller == VELOCITY_OPENLOOP ||
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d031      	beq.n	8001ea8 <loop_foc+0x7c>
  {
    return;
  }

  if (!enabled)
 8001e44:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <loop_foc+0x90>)
 8001e46:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d02e      	beq.n	8001eac <loop_foc+0x80>
  {
    return;
  }

  electrical_angle = (float)(ss_dir * pole_pairs) *
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <loop_foc+0x94>)
 8001e50:	f993 3000 	ldrsb.w	r3, [r3]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <loop_foc+0x98>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    _normalize_angle(get_angle());
 8001e66:	f7ff f97f 	bl	8001168 <get_angle>
 8001e6a:	eef0 7a40 	vmov.f32	s15, s0
 8001e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e72:	f000 f82d 	bl	8001ed0 <_normalize_angle>
 8001e76:	eef0 7a40 	vmov.f32	s15, s0
  electrical_angle = (float)(ss_dir * pole_pairs) *
 8001e7a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <loop_foc+0x9c>)
 8001e80:	edc3 7a00 	vstr	s15, [r3]

  set_phrase_voltage(voltage.q, voltage.d, electrical_angle);
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <loop_foc+0xa0>)
 8001e86:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <loop_foc+0xa0>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <loop_foc+0x9c>)
 8001e92:	edd3 6a00 	vldr	s13, [r3]
 8001e96:	eeb0 1a66 	vmov.f32	s2, s13
 8001e9a:	eef0 0a47 	vmov.f32	s1, s14
 8001e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea2:	f7ff fcc5 	bl	8001830 <set_phrase_voltage>
 8001ea6:	e002      	b.n	8001eae <loop_foc+0x82>
    return;
 8001ea8:	bf00      	nop
 8001eaa:	e000      	b.n	8001eae <loop_foc+0x82>
    return;
 8001eac:	bf00      	nop
}
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	ecbd 8b02 	vpop	{d8}
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000044c 	.word	0x2000044c
 8001ebc:	20000400 	.word	0x20000400
 8001ec0:	20000411 	.word	0x20000411
 8001ec4:	2000045c 	.word	0x2000045c
 8001ec8:	200003e8 	.word	0x200003e8
 8001ecc:	20000408 	.word	0x20000408

08001ed0 <_normalize_angle>:
#include "foc_utils.h"

/* Public Functions *********************************************************/

float _normalize_angle(const float angle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	ed87 0a01 	vstr	s0, [r7, #4]
  const float a = fmod(angle, _2PI);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fb3c 	bl	8000558 <__aeabi_f2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001f30 <_normalize_angle+0x60>
 8001ee8:	ec43 2b10 	vmov	d0, r2, r3
 8001eec:	f00b fcda 	bl	800d8a4 <fmod>
 8001ef0:	ec53 2b10 	vmov	r2, r3, d0
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fe7e 	bl	8000bf8 <__aeabi_d2f>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]

  return a >= 0 ? a : a + _2PI;
 8001f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	db02      	blt.n	8001f14 <_normalize_angle+0x44>
 8001f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f12:	e005      	b.n	8001f20 <_normalize_angle+0x50>
 8001f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f18:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001f38 <_normalize_angle+0x68>
 8001f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001f20:	eeb0 0a67 	vmov.f32	s0, s15
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w
 8001f30:	60000000 	.word	0x60000000
 8001f34:	401921fb 	.word	0x401921fb
 8001f38:	40c90fdb 	.word	0x40c90fdb

08001f3c <_sincos>:

void _sincos(const float a, float *s, float *c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f46:	60b8      	str	r0, [r7, #8]
 8001f48:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 8001f4a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f4e:	f000 f813 	bl	8001f78 <_sin>
 8001f52:	eef0 7a40 	vmov.f32	s15, s0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 8001f5c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f60:	f000 f882 	bl	8002068 <_cos>
 8001f64:	eef0 7a40 	vmov.f32	s15, s0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edc3 7a00 	vstr	s15, [r3]
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <_sin>:

float _sin(float a)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	ed87 0a01 	vstr	s0, [r7, #4]
    32729,
    32758,
    32768
  };
  int32_t      t1, t2;
  unsigned int i    = (unsigned int)(a * (64 * 4 * 256.0f / _2PI));
 8001f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f86:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800205c <_sin+0xe4>
 8001f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f92:	ee17 3a90 	vmov	r3, s15
 8001f96:	60fb      	str	r3, [r7, #12]
  const int    frac = i & 0xff;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	60bb      	str	r3, [r7, #8]
  i                 = i >> 8 & 0xff;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
  if (i < 64)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001faa:	d80b      	bhi.n	8001fc4 <_sin+0x4c>
  {
    t1 = (int32_t)sine_array[i];
 8001fac:	4a2c      	ldr	r2, [pc, #176]	@ (8002060 <_sin+0xe8>)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fb4:	617b      	str	r3, [r7, #20]
    t2 = (int32_t)sine_array[i + 1];
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4a29      	ldr	r2, [pc, #164]	@ (8002060 <_sin+0xe8>)
 8001fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e033      	b.n	800202c <_sin+0xb4>
  }
  else if (i < 128)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fc8:	d80e      	bhi.n	8001fe8 <_sin+0x70>
  {
    t1 = (int32_t)sine_array[128 - i];
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001fd0:	4a23      	ldr	r2, [pc, #140]	@ (8002060 <_sin+0xe8>)
 8001fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fd6:	617b      	str	r3, [r7, #20]
    t2 = (int32_t)sine_array[127 - i];
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001fde:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <_sin+0xe8>)
 8001fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e021      	b.n	800202c <_sin+0xb4>
  }
  else if (i < 192)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2bbf      	cmp	r3, #191	@ 0xbf
 8001fec:	d80e      	bhi.n	800200c <_sin+0x94>
  {
    t1 = -(int32_t)sine_array[-128 + i];
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3b80      	subs	r3, #128	@ 0x80
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <_sin+0xe8>)
 8001ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff8:	425b      	negs	r3, r3
 8001ffa:	617b      	str	r3, [r7, #20]
    t2 = -(int32_t)sine_array[-127 + i];
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3b7f      	subs	r3, #127	@ 0x7f
 8002000:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <_sin+0xe8>)
 8002002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002006:	425b      	negs	r3, r3
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	e00f      	b.n	800202c <_sin+0xb4>
  }
  else
  {
    t1 = -(int32_t)sine_array[256 - i];
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002012:	4a13      	ldr	r2, [pc, #76]	@ (8002060 <_sin+0xe8>)
 8002014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002018:	425b      	negs	r3, r3
 800201a:	617b      	str	r3, [r7, #20]
    t2 = -(int32_t)sine_array[255 - i];
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8002022:	4a0f      	ldr	r2, [pc, #60]	@ (8002060 <_sin+0xe8>)
 8002024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002028:	425b      	negs	r3, r3
 800202a:	613b      	str	r3, [r7, #16]
  }

  return 1.0f / 32768.0f * (t1 + ((t2 - t1) * frac >> 8));
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	121a      	asrs	r2, r3, #8
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4413      	add	r3, r2
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002046:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002064 <_sin+0xec>
 800204a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	4622f983 	.word	0x4622f983
 8002060:	20000004 	.word	0x20000004
 8002064:	38000000 	.word	0x38000000

08002068 <_cos>:

float _cos(float a)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8002072:	edd7 7a01 	vldr	s15, [r7, #4]
 8002076:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80020c0 <_cos+0x58>
 800207a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800207e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin       = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8002082:	edd7 7a03 	vldr	s15, [r7, #12]
 8002086:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80020c4 <_cos+0x5c>
 800208a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	dd06      	ble.n	80020a2 <_cos+0x3a>
 8002094:	edd7 7a03 	vldr	s15, [r7, #12]
 8002098:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80020c4 <_cos+0x5c>
 800209c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a0:	e001      	b.n	80020a6 <_cos+0x3e>
 80020a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 80020aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80020ae:	f7ff ff63 	bl	8001f78 <_sin>
 80020b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80020b6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	3fc90fdb 	.word	0x3fc90fdb
 80020c4:	40c90fdb 	.word	0x40c90fdb

080020c8 <_electricalAngle>:

float _electricalAngle(float shaft_angle, int pole_pairs)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80020d2:	6038      	str	r0, [r7, #0]
  return shaft_angle * pole_pairs;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020de:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <lpf_calc>:
 */

#include "lpf.h"

float lpf_calc(struct lpf_s *lpf, const float dat, const float dt)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002100:	edc7 0a01 	vstr	s1, [r7, #4]
  const float alpha = lpf->tf / (lpf->tf + dt);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 6a00 	vldr	s13, [r3]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a01 	vldr	s15, [r7, #4]
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211c:	edc7 7a05 	vstr	s15, [r7, #20]
  const float y     = alpha * lpf->prev_x + (1.0f - alpha) * dat;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	ed93 7a01 	vldr	s14, [r3, #4]
 8002126:	edd7 7a05 	vldr	s15, [r7, #20]
 800212a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002132:	edd7 7a05 	vldr	s15, [r7, #20]
 8002136:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800213a:	edd7 7a02 	vldr	s15, [r7, #8]
 800213e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	edc7 7a04 	vstr	s15, [r7, #16]
  lpf->prev_x       = y;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	605a      	str	r2, [r3, #4]
  return y;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	ee07 3a90 	vmov	s15, r3
}
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <MAX485_EnableTransmit>:

    // Send the Modbus query
    HAL_UART_Transmit(&huart1, TxData, 8, HAL_MAX_DELAY);
}

void MAX485_EnableTransmit(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MAX485_GPIO_PORT, MAX485_DE_PIN, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <MAX485_EnableTransmit+0x20>)
 8002170:	f003 f860 	bl	8005234 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAX485_GPIO_PORT, MAX485_RE_PIN, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800217a:	4802      	ldr	r0, [pc, #8]	@ (8002184 <MAX485_EnableTransmit+0x20>)
 800217c:	f003 f85a 	bl	8005234 <HAL_GPIO_WritePin>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020000 	.word	0x40020000

08002188 <MAX485_EnableReceive>:

void MAX485_EnableReceive(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MAX485_GPIO_PORT, MAX485_DE_PIN, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002192:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <MAX485_EnableReceive+0x20>)
 8002194:	f003 f84e 	bl	8005234 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAX485_GPIO_PORT, MAX485_RE_PIN, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800219e:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <MAX485_EnableReceive+0x20>)
 80021a0:	f003 f848 	bl	8005234 <HAL_GPIO_WritePin>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40020000 	.word	0x40020000

080021ac <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
    if (RxData[0] == MODBUS_SLAVE_ID && RxData[1] == 0x06) {
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d131      	bne.n	8002224 <HAL_UARTEx_RxEventCallback+0x78>
 80021c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	2b06      	cmp	r3, #6
 80021c6:	d12d      	bne.n	8002224 <HAL_UARTEx_RxEventCallback+0x78>
        uint16_t addr = (RxData[2] << 8) | RxData[3];
 80021c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021ca:	789b      	ldrb	r3, [r3, #2]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021d2:	78db      	ldrb	r3, [r3, #3]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	81fb      	strh	r3, [r7, #14]
        uint16_t value = (RxData[4] << 8) | RxData[5];
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021de:	791b      	ldrb	r3, [r3, #4]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021e6:	795b      	ldrb	r3, [r3, #5]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	81bb      	strh	r3, [r7, #12]

        if (addr == MODBUS_START_ADDR) {
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <HAL_UARTEx_RxEventCallback+0x62>
            modbus_speed = (float)value / 10.0f;
 80021f6:	89bb      	ldrh	r3, [r7, #12]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002200:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <HAL_UARTEx_RxEventCallback+0x90>)
 800220a:	edc3 7a00 	vstr	s15, [r3]

        }

        MAX485_EnableTransmit();
 800220e:	f7ff ffa9 	bl	8002164 <MAX485_EnableTransmit>
        HAL_UART_Transmit(&huart1, RxData, 8, HAL_MAX_DELAY);
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	2208      	movs	r2, #8
 8002218:	4907      	ldr	r1, [pc, #28]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 800221a:	4809      	ldr	r0, [pc, #36]	@ (8002240 <HAL_UARTEx_RxEventCallback+0x94>)
 800221c:	f005 ff9e 	bl	800815c <HAL_UART_Transmit>
        MAX485_EnableReceive();  // Back to listen mode
 8002220:	f7ff ffb2 	bl	8002188 <MAX485_EnableReceive>
    }

    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 9);
 8002224:	2209      	movs	r2, #9
 8002226:	4904      	ldr	r1, [pc, #16]	@ (8002238 <HAL_UARTEx_RxEventCallback+0x8c>)
 8002228:	4805      	ldr	r0, [pc, #20]	@ (8002240 <HAL_UARTEx_RxEventCallback+0x94>)
 800222a:	f006 f822 	bl	8008272 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200027e8 	.word	0x200027e8
 800223c:	20002800 	.word	0x20002800
 8002240:	200006d8 	.word	0x200006d8

08002244 <update_pot_speed>:

void update_pot_speed()
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
    uint16_t adc_val = dma_buf[0];
 800224a:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <update_pot_speed+0x38>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	80fb      	strh	r3, [r7, #6]
    pot_speed = ((float)adc_val / 4095.0f) * 60.0f;
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002280 <update_pot_speed+0x3c>
 800225e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002262:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002284 <update_pot_speed+0x40>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <update_pot_speed+0x44>)
 800226c:	edc3 7a00 	vstr	s15, [r3]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	200007e8 	.word	0x200007e8
 8002280:	457ff000 	.word	0x457ff000
 8002284:	42700000 	.word	0x42700000
 8002288:	200027fc 	.word	0x200027fc

0800228c <SSD1306_InitDisplay>:

void SSD1306_InitDisplay(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
   ssd1306_Init();
 8002290:	f000 fe7c 	bl	8002f8c <ssd1306_Init>
   ssd1306_Fill(Black);
 8002294:	2000      	movs	r0, #0
 8002296:	f000 fee3 	bl	8003060 <ssd1306_Fill>
   ssd1306_UpdateScreen();
 800229a:	f000 fef9 	bl	8003090 <ssd1306_UpdateScreen>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <Display_Velocity>:

void Display_Velocity(float speed) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b096      	sub	sp, #88	@ 0x58
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	ed87 0a01 	vstr	s0, [r7, #4]

    float vel = get_vel();
 80022ae:	f7fe ffd7 	bl	8001260 <get_vel>
 80022b2:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c

	char vel_str[32];
	char speed_str[32];

    sprintf(vel_str, "Target: %.2f rad/s", speed);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe f94e 	bl	8000558 <__aeabi_f2d>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80022c4:	4916      	ldr	r1, [pc, #88]	@ (8002320 <Display_Velocity+0x7c>)
 80022c6:	f007 feb3 	bl	800a030 <siprintf>
    sprintf(speed_str, "Actual: %.2f rad/s", vel);
 80022ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80022cc:	f7fe f944 	bl	8000558 <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	f107 000c 	add.w	r0, r7, #12
 80022d8:	4912      	ldr	r1, [pc, #72]	@ (8002324 <Display_Velocity+0x80>)
 80022da:	f007 fea9 	bl	800a030 <siprintf>

    ssd1306_Fill(Black);
 80022de:	2000      	movs	r0, #0
 80022e0:	f000 febe 	bl	8003060 <ssd1306_Fill>

    ssd1306_SetCursor(0, 20);
 80022e4:	2114      	movs	r1, #20
 80022e6:	2000      	movs	r0, #0
 80022e8:	f001 f804 	bl	80032f4 <ssd1306_SetCursor>
    ssd1306_WriteString(vel_str, Font_7x10, White);
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <Display_Velocity+0x84>)
 80022ee:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80022f2:	2201      	movs	r2, #1
 80022f4:	9200      	str	r2, [sp, #0]
 80022f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f8:	f000 ffd6 	bl	80032a8 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 40);
 80022fc:	2128      	movs	r1, #40	@ 0x28
 80022fe:	2000      	movs	r0, #0
 8002300:	f000 fff8 	bl	80032f4 <ssd1306_SetCursor>
    ssd1306_WriteString(speed_str, Font_7x10, White);
 8002304:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <Display_Velocity+0x84>)
 8002306:	f107 000c 	add.w	r0, r7, #12
 800230a:	2201      	movs	r2, #1
 800230c:	9200      	str	r2, [sp, #0]
 800230e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002310:	f000 ffca 	bl	80032a8 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8002314:	f000 febc 	bl	8003090 <ssd1306_UpdateScreen>
}
 8002318:	bf00      	nop
 800231a:	3750      	adds	r7, #80	@ 0x50
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	0800db30 	.word	0x0800db30
 8002324:	0800db44 	.word	0x0800db44
 8002328:	0800e2cc 	.word	0x0800e2cc

0800232c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b094      	sub	sp, #80	@ 0x50
 8002330:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002332:	f001 fc47 	bl	8003bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002336:	f000 f8cb 	bl	80024d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800233a:	f000 fbf5 	bl	8002b28 <MX_GPIO_Init>
  MX_DMA_Init();
 800233e:	f000 fbd3 	bl	8002ae8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002342:	f000 fba7 	bl	8002a94 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002346:	f000 fa37 	bl	80027b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800234a:	f000 fab5 	bl	80028b8 <MX_TIM3_Init>
  MX_SPI2_Init();
 800234e:	f000 f9ab 	bl	80026a8 <MX_SPI2_Init>
  MX_TIM4_Init();
 8002352:	f000 fb27 	bl	80029a4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002356:	f000 f9df 	bl	8002718 <MX_TIM1_Init>
  MX_I2C1_Init();
 800235a:	f000 f977 	bl	800264c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800235e:	f000 fb6f 	bl	8002a40 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002362:	f000 f921 	bl	80025a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 9);
 8002366:	2209      	movs	r2, #9
 8002368:	4944      	ldr	r1, [pc, #272]	@ (800247c <main+0x150>)
 800236a:	4845      	ldr	r0, [pc, #276]	@ (8002480 <main+0x154>)
 800236c:	f005 ff81 	bl	8008272 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buf, ADC_DMA_SIZE);
 8002370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002374:	4943      	ldr	r1, [pc, #268]	@ (8002484 <main+0x158>)
 8002376:	4844      	ldr	r0, [pc, #272]	@ (8002488 <main+0x15c>)
 8002378:	f001 fcfe 	bl	8003d78 <HAL_ADC_Start_DMA>
   * - SPI instance.
   * - SPI CS GPIO port.
   * - SPI CS GPIO pin.
   */

  as5048a_init(&hspi2, SPI_CS_GPIO_Port, SPI_CS_Pin);
 800237c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002380:	4942      	ldr	r1, [pc, #264]	@ (800248c <main+0x160>)
 8002382:	4843      	ldr	r0, [pc, #268]	@ (8002490 <main+0x164>)
 8002384:	f7fe fed0 	bl	8001128 <as5048a_init>
   * - Voltage supply for driver.
   * - Voltage limit for driver (Use half of the supply voltage for open-loop
   *   control).
   */

  driver_init(&htim2,
 8002388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800238c:	9303      	str	r3, [sp, #12]
 800238e:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <main+0x168>)
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2304      	movs	r3, #4
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <main+0x16c>)
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800239e:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80023a2:	2304      	movs	r3, #4
 80023a4:	4a3d      	ldr	r2, [pc, #244]	@ (800249c <main+0x170>)
 80023a6:	2100      	movs	r1, #0
 80023a8:	483b      	ldr	r0, [pc, #236]	@ (8002498 <main+0x16c>)
 80023aa:	f7ff f963 	bl	8001674 <driver_init>
   * - Motor voltage limit.
   */
  bldc_vel_ctrl_init(7,
                     5.0f,
                     5.0f,
                     (struct lpf_s){.tf = 0.0001f},
 80023ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <main+0x174>)
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                     (struct pid_s){
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	2220      	movs	r2, #32
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f007 feb0 	bl	800a12a <memset>
 80023ca:	4b36      	ldr	r3, [pc, #216]	@ (80024a4 <main+0x178>)
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b36      	ldr	r3, [pc, #216]	@ (80024a8 <main+0x17c>)
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <main+0x180>)
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	4b36      	ldr	r3, [pc, #216]	@ (80024b0 <main+0x184>)
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <main+0x188>)
 80023dc:	61fb      	str	r3, [r7, #28]
  bldc_vel_ctrl_init(7,
 80023de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80023e2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80023e6:	466d      	mov	r5, sp
 80023e8:	f107 0418 	add.w	r4, r7, #24
 80023ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	602b      	str	r3, [r5, #0]
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fa:	eeb3 2a04 	vmov.f32	s4, #52	@ 0x41a00000  20.0
 80023fe:	eeb0 1a47 	vmov.f32	s2, s14
 8002402:	eef0 1a67 	vmov.f32	s3, s15
 8002406:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800240a:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 800240e:	2007      	movs	r0, #7
 8002410:	f7ff fbf8 	bl	8001c04 <bldc_vel_ctrl_init>

  /* Target speed. */

  /* Initialize FOC. */

  foc_init();
 8002414:	f7ff fc7a 	bl	8001d0c <foc_init>

  /* Start timers. */

  HAL_TIM_Base_Start(&htim1);
 8002418:	4827      	ldr	r0, [pc, #156]	@ (80024b8 <main+0x18c>)
 800241a:	f004 fe8d 	bl	8007138 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800241e:	4827      	ldr	r0, [pc, #156]	@ (80024bc <main+0x190>)
 8002420:	f004 fee4 	bl	80071ec <HAL_TIM_Base_Start_IT>
  SSD1306_InitDisplay();
 8002424:	f7ff ff32 	bl	800228c <SSD1306_InitDisplay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Display_Velocity(speed_f);
 8002428:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <main+0x194>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	eeb0 0a67 	vmov.f32	s0, s15
 8002432:	f7ff ff37 	bl	80022a4 <Display_Velocity>
	  uint8_t vel = (uint8_t)get_vel();
 8002436:	f7fe ff13 	bl	8001260 <get_vel>
 800243a:	eef0 7a40 	vmov.f32	s15, s0
 800243e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002442:	edc7 7a01 	vstr	s15, [r7, #4]
 8002446:	793b      	ldrb	r3, [r7, #4]
 8002448:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  sprintf(uart_buffer, "%d\r\n", vel);
 800244c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002450:	461a      	mov	r2, r3
 8002452:	491c      	ldr	r1, [pc, #112]	@ (80024c4 <main+0x198>)
 8002454:	481c      	ldr	r0, [pc, #112]	@ (80024c8 <main+0x19c>)
 8002456:	f007 fdeb 	bl	800a030 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800245a:	481b      	ldr	r0, [pc, #108]	@ (80024c8 <main+0x19c>)
 800245c:	f7fd ff10 	bl	8000280 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	b29a      	uxth	r2, r3
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	4917      	ldr	r1, [pc, #92]	@ (80024c8 <main+0x19c>)
 800246a:	4818      	ldr	r0, [pc, #96]	@ (80024cc <main+0x1a0>)
 800246c:	f005 fe76 	bl	800815c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8002470:	2064      	movs	r0, #100	@ 0x64
 8002472:	f001 fc19 	bl	8003ca8 <HAL_Delay>
  {
 8002476:	bf00      	nop
 8002478:	e7d6      	b.n	8002428 <main+0xfc>
 800247a:	bf00      	nop
 800247c:	200027e8 	.word	0x200027e8
 8002480:	200006d8 	.word	0x200006d8
 8002484:	200007e8 	.word	0x200007e8
 8002488:	20000464 	.word	0x20000464
 800248c:	40020400 	.word	0x40020400
 8002490:	20000560 	.word	0x20000560
 8002494:	40020000 	.word	0x40020000
 8002498:	20000600 	.word	0x20000600
 800249c:	20000648 	.word	0x20000648
 80024a0:	38d1b717 	.word	0x38d1b717
 80024a4:	41400000 	.word	0x41400000
 80024a8:	420c0000 	.word	0x420c0000
 80024ac:	3d4ccccd 	.word	0x3d4ccccd
 80024b0:	447a0000 	.word	0x447a0000
 80024b4:	41a00000 	.word	0x41a00000
 80024b8:	200005b8 	.word	0x200005b8
 80024bc:	20000690 	.word	0x20000690
 80024c0:	200027f8 	.word	0x200027f8
 80024c4:	0800db58 	.word	0x0800db58
 80024c8:	20000768 	.word	0x20000768
 80024cc:	20000720 	.word	0x20000720

080024d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b094      	sub	sp, #80	@ 0x50
 80024d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d6:	f107 0320 	add.w	r3, r7, #32
 80024da:	2230      	movs	r2, #48	@ 0x30
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f007 fe23 	bl	800a12a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <SystemClock_Config+0xd0>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	4a28      	ldr	r2, [pc, #160]	@ (80025a0 <SystemClock_Config+0xd0>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002502:	6413      	str	r3, [r2, #64]	@ 0x40
 8002504:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <SystemClock_Config+0xd0>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002510:	2300      	movs	r3, #0
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <SystemClock_Config+0xd4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800251c:	4a21      	ldr	r2, [pc, #132]	@ (80025a4 <SystemClock_Config+0xd4>)
 800251e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <SystemClock_Config+0xd4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002534:	2301      	movs	r3, #1
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002538:	2310      	movs	r3, #16
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800253c:	2302      	movs	r3, #2
 800253e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002540:	2300      	movs	r3, #0
 8002542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002544:	2310      	movs	r3, #16
 8002546:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002548:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800254c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800254e:	2304      	movs	r3, #4
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002552:	2307      	movs	r3, #7
 8002554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fb32 	bl	8005bc4 <HAL_RCC_OscConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002566:	f000 fbe5 	bl	8002d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800256a:	230f      	movs	r3, #15
 800256c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800256e:	2302      	movs	r3, #2
 8002570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800257a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	2102      	movs	r1, #2
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fd94 	bl	80060b4 <HAL_RCC_ClockConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002592:	f000 fbcf 	bl	8002d34 <Error_Handler>
  }
}
 8002596:	bf00      	nop
 8002598:	3750      	adds	r7, #80	@ 0x50
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40007000 	.word	0x40007000

080025a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025ae:	463b      	mov	r3, r7
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80025ba:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025bc:	4a21      	ldr	r2, [pc, #132]	@ (8002644 <MX_ADC1_Init+0x9c>)
 80025be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025e2:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025ea:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <MX_ADC1_Init+0xa0>)
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80025f4:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <MX_ADC1_Init+0x98>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002602:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <MX_ADC1_Init+0x98>)
 8002604:	2201      	movs	r2, #1
 8002606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002608:	480d      	ldr	r0, [pc, #52]	@ (8002640 <MX_ADC1_Init+0x98>)
 800260a:	f001 fb71 	bl	8003cf0 <HAL_ADC_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002614:	f000 fb8e 	bl	8002d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800261c:	2301      	movs	r3, #1
 800261e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002624:	463b      	mov	r3, r7
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	@ (8002640 <MX_ADC1_Init+0x98>)
 800262a:	f001 fcb3 	bl	8003f94 <HAL_ADC_ConfigChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002634:	f000 fb7e 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000464 	.word	0x20000464
 8002644:	40012000 	.word	0x40012000
 8002648:	0f000001 	.word	0x0f000001

0800264c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <MX_I2C1_Init+0x50>)
 8002652:	4a13      	ldr	r2, [pc, #76]	@ (80026a0 <MX_I2C1_Init+0x54>)
 8002654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_I2C1_Init+0x50>)
 8002658:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <MX_I2C1_Init+0x58>)
 800265a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_I2C1_Init+0x50>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_I2C1_Init+0x50>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_I2C1_Init+0x50>)
 800266a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800266e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <MX_I2C1_Init+0x50>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_I2C1_Init+0x50>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	@ (800269c <MX_I2C1_Init+0x50>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_I2C1_Init+0x50>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	@ (800269c <MX_I2C1_Init+0x50>)
 800268a:	f002 fded 	bl	8005268 <HAL_I2C_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002694:	f000 fb4e 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000050c 	.word	0x2000050c
 80026a0:	40005400 	.word	0x40005400
 80026a4:	000186a0 	.word	0x000186a0

080026a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026ac:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026ae:	4a19      	ldr	r2, [pc, #100]	@ (8002714 <MX_SPI2_Init+0x6c>)
 80026b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026b2:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80026c0:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c8:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e8:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026f6:	220a      	movs	r2, #10
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026fa:	4805      	ldr	r0, [pc, #20]	@ (8002710 <MX_SPI2_Init+0x68>)
 80026fc:	f003 fefa 	bl	80064f4 <HAL_SPI_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002706:	f000 fb15 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000560 	.word	0x20000560
 8002714:	40003800 	.word	0x40003800

08002718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	463b      	mov	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002734:	4b1e      	ldr	r3, [pc, #120]	@ (80027b0 <MX_TIM1_Init+0x98>)
 8002736:	4a1f      	ldr	r2, [pc, #124]	@ (80027b4 <MX_TIM1_Init+0x9c>)
 8002738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800273a:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <MX_TIM1_Init+0x98>)
 800273c:	2253      	movs	r2, #83	@ 0x53
 800273e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <MX_TIM1_Init+0x98>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002746:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <MX_TIM1_Init+0x98>)
 8002748:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800274c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274e:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <MX_TIM1_Init+0x98>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002754:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <MX_TIM1_Init+0x98>)
 8002756:	2200      	movs	r2, #0
 8002758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <MX_TIM1_Init+0x98>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002760:	4813      	ldr	r0, [pc, #76]	@ (80027b0 <MX_TIM1_Init+0x98>)
 8002762:	f004 fc99 	bl	8007098 <HAL_TIM_Base_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800276c:	f000 fae2 	bl	8002d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4619      	mov	r1, r3
 800277c:	480c      	ldr	r0, [pc, #48]	@ (80027b0 <MX_TIM1_Init+0x98>)
 800277e:	f005 f853 	bl	8007828 <HAL_TIM_ConfigClockSource>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002788:	f000 fad4 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002794:	463b      	mov	r3, r7
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <MX_TIM1_Init+0x98>)
 800279a:	f005 fc0d 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027a4:	f000 fac6 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200005b8 	.word	0x200005b8
 80027b4:	40010000 	.word	0x40010000

080027b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08e      	sub	sp, #56	@ 0x38
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
 80027e4:	615a      	str	r2, [r3, #20]
 80027e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e8:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 80027ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 80027f2:	2253      	movs	r2, #83	@ 0x53
 80027f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 80027fc:	4b2d      	ldr	r3, [pc, #180]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 80027fe:	2227      	movs	r2, #39	@ 0x27
 8002800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800280e:	4829      	ldr	r0, [pc, #164]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 8002810:	f004 fc42 	bl	8007098 <HAL_TIM_Base_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800281a:	f000 fa8b 	bl	8002d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800281e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002824:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002828:	4619      	mov	r1, r3
 800282a:	4822      	ldr	r0, [pc, #136]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 800282c:	f004 fffc 	bl	8007828 <HAL_TIM_ConfigClockSource>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002836:	f000 fa7d 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800283a:	481e      	ldr	r0, [pc, #120]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 800283c:	f004 fd38 	bl	80072b0 <HAL_TIM_PWM_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002846:	f000 fa75 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002852:	f107 0320 	add.w	r3, r7, #32
 8002856:	4619      	mov	r1, r3
 8002858:	4816      	ldr	r0, [pc, #88]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 800285a:	f005 fbad 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002864:	f000 fa66 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002868:	2360      	movs	r3, #96	@ 0x60
 800286a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	4619      	mov	r1, r3
 800287e:	480d      	ldr	r0, [pc, #52]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 8002880:	f004 ff10 	bl	80076a4 <HAL_TIM_PWM_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800288a:	f000 fa53 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2204      	movs	r2, #4
 8002892:	4619      	mov	r1, r3
 8002894:	4807      	ldr	r0, [pc, #28]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 8002896:	f004 ff05 	bl	80076a4 <HAL_TIM_PWM_ConfigChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80028a0:	f000 fa48 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028a4:	4803      	ldr	r0, [pc, #12]	@ (80028b4 <MX_TIM2_Init+0xfc>)
 80028a6:	f000 ff27 	bl	80036f8 <HAL_TIM_MspPostInit>

}
 80028aa:	bf00      	nop
 80028ac:	3738      	adds	r7, #56	@ 0x38
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000600 	.word	0x20000600

080028b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	@ 0x38
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	f107 0320 	add.w	r3, r7, #32
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028e8:	4b2c      	ldr	r3, [pc, #176]	@ (800299c <MX_TIM3_Init+0xe4>)
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <MX_TIM3_Init+0xe8>)
 80028ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80028ee:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <MX_TIM3_Init+0xe4>)
 80028f0:	2253      	movs	r2, #83	@ 0x53
 80028f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f4:	4b29      	ldr	r3, [pc, #164]	@ (800299c <MX_TIM3_Init+0xe4>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80028fa:	4b28      	ldr	r3, [pc, #160]	@ (800299c <MX_TIM3_Init+0xe4>)
 80028fc:	2227      	movs	r2, #39	@ 0x27
 80028fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002900:	4b26      	ldr	r3, [pc, #152]	@ (800299c <MX_TIM3_Init+0xe4>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002906:	4b25      	ldr	r3, [pc, #148]	@ (800299c <MX_TIM3_Init+0xe4>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800290c:	4823      	ldr	r0, [pc, #140]	@ (800299c <MX_TIM3_Init+0xe4>)
 800290e:	f004 fbc3 	bl	8007098 <HAL_TIM_Base_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002918:	f000 fa0c 	bl	8002d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002926:	4619      	mov	r1, r3
 8002928:	481c      	ldr	r0, [pc, #112]	@ (800299c <MX_TIM3_Init+0xe4>)
 800292a:	f004 ff7d 	bl	8007828 <HAL_TIM_ConfigClockSource>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002934:	f000 f9fe 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002938:	4818      	ldr	r0, [pc, #96]	@ (800299c <MX_TIM3_Init+0xe4>)
 800293a:	f004 fcb9 	bl	80072b0 <HAL_TIM_PWM_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002944:	f000 f9f6 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002950:	f107 0320 	add.w	r3, r7, #32
 8002954:	4619      	mov	r1, r3
 8002956:	4811      	ldr	r0, [pc, #68]	@ (800299c <MX_TIM3_Init+0xe4>)
 8002958:	f005 fb2e 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002962:	f000 f9e7 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002966:	2360      	movs	r3, #96	@ 0x60
 8002968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2204      	movs	r2, #4
 800297a:	4619      	mov	r1, r3
 800297c:	4807      	ldr	r0, [pc, #28]	@ (800299c <MX_TIM3_Init+0xe4>)
 800297e:	f004 fe91 	bl	80076a4 <HAL_TIM_PWM_ConfigChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002988:	f000 f9d4 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800298c:	4803      	ldr	r0, [pc, #12]	@ (800299c <MX_TIM3_Init+0xe4>)
 800298e:	f000 feb3 	bl	80036f8 <HAL_TIM_MspPostInit>

}
 8002992:	bf00      	nop
 8002994:	3738      	adds	r7, #56	@ 0x38
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000648 	.word	0x20000648
 80029a0:	40000400 	.word	0x40000400

080029a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	463b      	mov	r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <MX_TIM4_Init+0x94>)
 80029c2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <MX_TIM4_Init+0x98>)
 80029c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <MX_TIM4_Init+0x94>)
 80029c8:	2253      	movs	r2, #83	@ 0x53
 80029ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <MX_TIM4_Init+0x94>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400-1;
 80029d2:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <MX_TIM4_Init+0x94>)
 80029d4:	f240 128f 	movw	r2, #399	@ 0x18f
 80029d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029da:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <MX_TIM4_Init+0x94>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e0:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <MX_TIM4_Init+0x94>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029e6:	4814      	ldr	r0, [pc, #80]	@ (8002a38 <MX_TIM4_Init+0x94>)
 80029e8:	f004 fb56 	bl	8007098 <HAL_TIM_Base_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80029f2:	f000 f99f 	bl	8002d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80029fc:	f107 0308 	add.w	r3, r7, #8
 8002a00:	4619      	mov	r1, r3
 8002a02:	480d      	ldr	r0, [pc, #52]	@ (8002a38 <MX_TIM4_Init+0x94>)
 8002a04:	f004 ff10 	bl	8007828 <HAL_TIM_ConfigClockSource>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002a0e:	f000 f991 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <MX_TIM4_Init+0x94>)
 8002a20:	f005 faca 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002a2a:	f000 f983 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000690 	.word	0x20000690
 8002a3c:	40000800 	.word	0x40000800

08002a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a44:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <MX_USART1_UART_Init+0x50>)
 8002a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a66:	220c      	movs	r2, #12
 8002a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a76:	4805      	ldr	r0, [pc, #20]	@ (8002a8c <MX_USART1_UART_Init+0x4c>)
 8002a78:	f005 fb20 	bl	80080bc <HAL_UART_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a82:	f000 f957 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200006d8 	.word	0x200006d8
 8002a90:	40011000 	.word	0x40011000

08002a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <MX_USART2_UART_Init+0x50>)
 8002a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002aba:	220c      	movs	r2, #12
 8002abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abe:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aca:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <MX_USART2_UART_Init+0x4c>)
 8002acc:	f005 faf6 	bl	80080bc <HAL_UART_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ad6:	f000 f92d 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000720 	.word	0x20000720
 8002ae4:	40004400 	.word	0x40004400

08002ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <MX_DMA_Init+0x3c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a0b      	ldr	r2, [pc, #44]	@ (8002b24 <MX_DMA_Init+0x3c>)
 8002af8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <MX_DMA_Init+0x3c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2038      	movs	r0, #56	@ 0x38
 8002b10:	f001 fdbb 	bl	800468a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b14:	2038      	movs	r0, #56	@ 0x38
 8002b16:	f001 fdd4 	bl	80046c2 <HAL_NVIC_EnableIRQ>

}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800

08002b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a37      	ldr	r2, [pc, #220]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a30      	ldr	r2, [pc, #192]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	4a29      	ldr	r2, [pc, #164]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <MX_GPIO_Init+0xfc>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bb4:	481c      	ldr	r0, [pc, #112]	@ (8002c28 <MX_GPIO_Init+0x100>)
 8002bb6:	f002 fb3d 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FOC_EN_Pin|MX485_RE_PIN_Pin|MX485_DE_PIN_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8002bc0:	481a      	ldr	r0, [pc, #104]	@ (8002c2c <MX_GPIO_Init+0x104>)
 8002bc2:	f002 fb37 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4815      	ldr	r0, [pc, #84]	@ (8002c30 <MX_GPIO_Init+0x108>)
 8002bdc:	f002 f98e 	bl	8004efc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	480b      	ldr	r0, [pc, #44]	@ (8002c28 <MX_GPIO_Init+0x100>)
 8002bfa:	f002 f97f 	bl	8004efc <HAL_GPIO_Init>

  /*Configure GPIO pins : FOC_EN_Pin MX485_RE_PIN_Pin MX485_DE_PIN_Pin PA15 */
  GPIO_InitStruct.Pin = FOC_EN_Pin|MX485_RE_PIN_Pin|MX485_DE_PIN_Pin|GPIO_PIN_15;
 8002bfe:	f44f 4319 	mov.w	r3, #39168	@ 0x9900
 8002c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c04:	2301      	movs	r3, #1
 8002c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4619      	mov	r1, r3
 8002c16:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <MX_GPIO_Init+0x104>)
 8002c18:	f002 f970 	bl	8004efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	@ 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40020800 	.word	0x40020800

08002c34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a31      	ldr	r2, [pc, #196]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d15c      	bne.n	8002d00 <HAL_TIM_PeriodElapsedCallback+0xcc>
  {
    timer_counter = __HAL_TIM_GET_COUNTER(&htim1);
 8002c46:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	4a30      	ldr	r2, [pc, #192]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002c4e:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8002c50:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2200      	movs	r2, #0
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24

    const float dt_while = (float)timer_counter * 1e-6f;
 8002c58:	4b2d      	ldr	r3, [pc, #180]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002d14 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8002c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6c:	edc7 7a05 	vstr	s15, [r7, #20]
     * Parameters:
     * - Target speed.
     * - Delta time.
     */
    // Update potentiometer speed from ADC
    update_pot_speed();
 8002c70:	f7ff fae8 	bl	8002244 <update_pot_speed>

    // Read toggle switch on PC13
    GPIO_PinState current_btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8002c74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c78:	4827      	ldr	r0, [pc, #156]	@ (8002d18 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002c7a:	f002 fac3 	bl	8005204 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	74fb      	strb	r3, [r7, #19]

            // Toggle on falling edge (button press)
	if (prev_btn_state == GPIO_PIN_SET && current_btn_state == GPIO_PIN_RESET)
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_TIM_PeriodElapsedCallback+0x74>
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		use_modbus = !use_modbus;  // Toggle the mode
 8002c92:	4b23      	ldr	r3, [pc, #140]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002ca6:	701a      	strb	r2, [r3, #0]
	}

	prev_btn_state = current_btn_state;
 8002ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	7013      	strb	r3, [r2, #0]

	if (use_modbus)
 8002cae:	4b1c      	ldr	r3, [pc, #112]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_TIM_PeriodElapsedCallback+0x9a>
	{
		speed_f = modbus_speed;
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002cbe:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);  // Modbus mode indicator
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cc6:	4819      	ldr	r0, [pc, #100]	@ (8002d2c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002cc8:	f002 fab4 	bl	8005234 <HAL_GPIO_WritePin>
 8002ccc:	e009      	b.n	8002ce2 <HAL_TIM_PeriodElapsedCallback+0xae>
	}
	else
	{
		speed_f = pot_speed;
 8002cce:	4b18      	ldr	r3, [pc, #96]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002cd4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pot mode indicator
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cdc:	4813      	ldr	r0, [pc, #76]	@ (8002d2c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002cde:	f002 faa9 	bl	8005234 <HAL_GPIO_WritePin>
	}
	float actual_velocity = get_vel();
 8002ce2:	f7fe fabd 	bl	8001260 <get_vel>
 8002ce6:	ed87 0a03 	vstr	s0, [r7, #12]

    loop_foc();
 8002cea:	f7ff f89f 	bl	8001e2c <loop_foc>
    bldc_move(speed_f, dt_while);
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	edd7 0a05 	vldr	s1, [r7, #20]
 8002cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfc:	f7ff f826 	bl	8001d4c <bldc_move>
  }

  /* USER CODE END Callback 1 */
}
 8002d00:	bf00      	nop
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	200005b8 	.word	0x200005b8
 8002d10:	20000460 	.word	0x20000460
 8002d14:	358637bd 	.word	0x358637bd
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	20000086 	.word	0x20000086
 8002d20:	20002804 	.word	0x20002804
 8002d24:	20002800 	.word	0x20002800
 8002d28:	200027f8 	.word	0x200027f8
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	200027fc 	.word	0x200027fc

08002d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d38:	b672      	cpsid	i
}
 8002d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) { }
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <Error_Handler+0x8>

08002d40 <pid_calculate>:
#include "pid.h"

#include "foc_utils.h"

float pid_calculate(struct pid_s *pid, const float err, const float dt)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b08b      	sub	sp, #44	@ 0x2c
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d4c:	edc7 0a01 	vstr	s1, [r7, #4]
  const float proportional = pid->p * err;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5e:	edc7 7a08 	vstr	s15, [r7, #32]

  float integral = pid->int_old + pid->i * dt * 0.5f * (err - pid->err_old);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d76:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002d7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d94:	edc7 7a07 	vstr	s15, [r7, #28]

  integral = _constrain(integral, -pid->limit, pid->limit);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d9e:	eef1 7a67 	vneg.f32	s15, s15
 8002da2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	d505      	bpl.n	8002dbc <pid_calculate+0x7c>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db6:	eef1 7a67 	vneg.f32	s15, s15
 8002dba:	e00f      	b.n	8002ddc <pid_calculate+0x9c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dce:	dd03      	ble.n	8002dd8 <pid_calculate+0x98>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dd6:	e001      	b.n	8002ddc <pid_calculate+0x9c>
 8002dd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ddc:	edc7 7a07 	vstr	s15, [r7, #28]

  const float derivative = pid->d * (err - pid->err_old) / dt;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dec:	edd7 6a02 	vldr	s13, [r7, #8]
 8002df0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002df4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e00:	edc7 7a06 	vstr	s15, [r7, #24]

  float output = proportional + integral + derivative;
 8002e04:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e08:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  output       = _constrain(output, -pid->limit, pid->limit);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e22:	eef1 7a67 	vneg.f32	s15, s15
 8002e26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e32:	d505      	bpl.n	8002e40 <pid_calculate+0x100>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e3a:	eef1 7a67 	vneg.f32	s15, s15
 8002e3e:	e00f      	b.n	8002e60 <pid_calculate+0x120>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e52:	dd03      	ble.n	8002e5c <pid_calculate+0x11c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e5a:	e001      	b.n	8002e60 <pid_calculate+0x120>
 8002e5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

  if (pid->ramp > 0)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	dd3f      	ble.n	8002ef4 <pid_calculate+0x1b4>
  {
    const float output_rate = (output - pid->out_old) / dt;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e7a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e82:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e8a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (output_rate > pid->ramp)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e94:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	dd0e      	ble.n	8002ec0 <pid_calculate+0x180>
    {
      output = pid->out_old + pid->ramp * dt;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	edd3 6a03 	vldr	s13, [r3, #12]
 8002eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002ebe:	e019      	b.n	8002ef4 <pid_calculate+0x1b4>
    }
    else if (output_rate < -pid->ramp)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ec6:	eef1 7a67 	vneg.f32	s15, s15
 8002eca:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	d50d      	bpl.n	8002ef4 <pid_calculate+0x1b4>
    {
      output = pid->out_old - pid->ramp * dt;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ee4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
  }

  pid->int_old = integral;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	61da      	str	r2, [r3, #28]
  pid->out_old = output;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efe:	619a      	str	r2, [r3, #24]
  pid->err_old = err;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	615a      	str	r2, [r3, #20]
  return output;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	ee07 3a90 	vmov	s15, r3
}
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	372c      	adds	r7, #44	@ 0x2c
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	9302      	str	r3, [sp, #8]
 8002f38:	2301      	movs	r3, #1
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	1dfb      	adds	r3, r7, #7
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2301      	movs	r3, #1
 8002f42:	2200      	movs	r2, #0
 8002f44:	2178      	movs	r1, #120	@ 0x78
 8002f46:	4803      	ldr	r0, [pc, #12]	@ (8002f54 <ssd1306_WriteCommand+0x2c>)
 8002f48:	f002 fad2 	bl	80054f0 <HAL_I2C_Mem_Write>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	2000050c 	.word	0x2000050c

08002f58 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af04      	add	r7, sp, #16
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6a:	9202      	str	r2, [sp, #8]
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2301      	movs	r3, #1
 8002f74:	2240      	movs	r2, #64	@ 0x40
 8002f76:	2178      	movs	r1, #120	@ 0x78
 8002f78:	4803      	ldr	r0, [pc, #12]	@ (8002f88 <ssd1306_WriteData+0x30>)
 8002f7a:	f002 fab9 	bl	80054f0 <HAL_I2C_Mem_Write>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2000050c 	.word	0x2000050c

08002f8c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002f90:	f7ff ffc3 	bl	8002f1a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002f94:	2064      	movs	r0, #100	@ 0x64
 8002f96:	f000 fe87 	bl	8003ca8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f000 f9d6 	bl	800334c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002fa0:	2020      	movs	r0, #32
 8002fa2:	f7ff ffc1 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7ff ffbe 	bl	8002f28 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002fac:	20b0      	movs	r0, #176	@ 0xb0
 8002fae:	f7ff ffbb 	bl	8002f28 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002fb2:	20c8      	movs	r0, #200	@ 0xc8
 8002fb4:	f7ff ffb8 	bl	8002f28 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7ff ffb5 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002fbe:	2010      	movs	r0, #16
 8002fc0:	f7ff ffb2 	bl	8002f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002fc4:	2040      	movs	r0, #64	@ 0x40
 8002fc6:	f7ff ffaf 	bl	8002f28 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002fca:	20ff      	movs	r0, #255	@ 0xff
 8002fcc:	f000 f9aa 	bl	8003324 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002fd0:	20a1      	movs	r0, #161	@ 0xa1
 8002fd2:	f7ff ffa9 	bl	8002f28 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002fd6:	20a6      	movs	r0, #166	@ 0xa6
 8002fd8:	f7ff ffa6 	bl	8002f28 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002fdc:	20a8      	movs	r0, #168	@ 0xa8
 8002fde:	f7ff ffa3 	bl	8002f28 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002fe2:	203f      	movs	r0, #63	@ 0x3f
 8002fe4:	f7ff ffa0 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002fe8:	20a4      	movs	r0, #164	@ 0xa4
 8002fea:	f7ff ff9d 	bl	8002f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002fee:	20d3      	movs	r0, #211	@ 0xd3
 8002ff0:	f7ff ff9a 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7ff ff97 	bl	8002f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002ffa:	20d5      	movs	r0, #213	@ 0xd5
 8002ffc:	f7ff ff94 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003000:	20f0      	movs	r0, #240	@ 0xf0
 8003002:	f7ff ff91 	bl	8002f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003006:	20d9      	movs	r0, #217	@ 0xd9
 8003008:	f7ff ff8e 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800300c:	2022      	movs	r0, #34	@ 0x22
 800300e:	f7ff ff8b 	bl	8002f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003012:	20da      	movs	r0, #218	@ 0xda
 8003014:	f7ff ff88 	bl	8002f28 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003018:	2012      	movs	r0, #18
 800301a:	f7ff ff85 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800301e:	20db      	movs	r0, #219	@ 0xdb
 8003020:	f7ff ff82 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003024:	2020      	movs	r0, #32
 8003026:	f7ff ff7f 	bl	8002f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800302a:	208d      	movs	r0, #141	@ 0x8d
 800302c:	f7ff ff7c 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003030:	2014      	movs	r0, #20
 8003032:	f7ff ff79 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003036:	2001      	movs	r0, #1
 8003038:	f000 f988 	bl	800334c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800303c:	2000      	movs	r0, #0
 800303e:	f000 f80f 	bl	8003060 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003042:	f000 f825 	bl	8003090 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <ssd1306_Init+0xd0>)
 8003048:	2200      	movs	r2, #0
 800304a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <ssd1306_Init+0xd0>)
 800304e:	2200      	movs	r2, #0
 8003050:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003052:	4b02      	ldr	r3, [pc, #8]	@ (800305c <ssd1306_Init+0xd0>)
 8003054:	2201      	movs	r2, #1
 8003056:	711a      	strb	r2, [r3, #4]
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20002c08 	.word	0x20002c08

08003060 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <ssd1306_Fill+0x14>
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <ssd1306_Fill+0x16>
 8003074:	23ff      	movs	r3, #255	@ 0xff
 8003076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800307a:	4619      	mov	r1, r3
 800307c:	4803      	ldr	r0, [pc, #12]	@ (800308c <ssd1306_Fill+0x2c>)
 800307e:	f007 f854 	bl	800a12a <memset>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20002808 	.word	0x20002808

08003090 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003096:	2300      	movs	r3, #0
 8003098:	71fb      	strb	r3, [r7, #7]
 800309a:	e016      	b.n	80030ca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	3b50      	subs	r3, #80	@ 0x50
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ff40 	bl	8002f28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7ff ff3d 	bl	8002f28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80030ae:	2010      	movs	r0, #16
 80030b0:	f7ff ff3a 	bl	8002f28 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	01db      	lsls	r3, r3, #7
 80030b8:	4a08      	ldr	r2, [pc, #32]	@ (80030dc <ssd1306_UpdateScreen+0x4c>)
 80030ba:	4413      	add	r3, r2
 80030bc:	2180      	movs	r1, #128	@ 0x80
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff4a 	bl	8002f58 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	3301      	adds	r3, #1
 80030c8:	71fb      	strb	r3, [r7, #7]
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	d9e5      	bls.n	800309c <ssd1306_UpdateScreen+0xc>
    }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20002808 	.word	0x20002808

080030e0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
 80030ea:	460b      	mov	r3, r1
 80030ec:	71bb      	strb	r3, [r7, #6]
 80030ee:	4613      	mov	r3, r2
 80030f0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db3d      	blt.n	8003176 <ssd1306_DrawPixel+0x96>
 80030fa:	79bb      	ldrb	r3, [r7, #6]
 80030fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80030fe:	d83a      	bhi.n	8003176 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003100:	797b      	ldrb	r3, [r7, #5]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d11a      	bne.n	800313c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	79bb      	ldrb	r3, [r7, #6]
 800310a:	08db      	lsrs	r3, r3, #3
 800310c:	b2d8      	uxtb	r0, r3
 800310e:	4603      	mov	r3, r0
 8003110:	01db      	lsls	r3, r3, #7
 8003112:	4413      	add	r3, r2
 8003114:	4a1b      	ldr	r2, [pc, #108]	@ (8003184 <ssd1306_DrawPixel+0xa4>)
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	b25a      	sxtb	r2, r3
 800311a:	79bb      	ldrb	r3, [r7, #6]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	b25b      	sxtb	r3, r3
 8003128:	4313      	orrs	r3, r2
 800312a:	b259      	sxtb	r1, r3
 800312c:	79fa      	ldrb	r2, [r7, #7]
 800312e:	4603      	mov	r3, r0
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	4413      	add	r3, r2
 8003134:	b2c9      	uxtb	r1, r1
 8003136:	4a13      	ldr	r2, [pc, #76]	@ (8003184 <ssd1306_DrawPixel+0xa4>)
 8003138:	54d1      	strb	r1, [r2, r3]
 800313a:	e01d      	b.n	8003178 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800313c:	79fa      	ldrb	r2, [r7, #7]
 800313e:	79bb      	ldrb	r3, [r7, #6]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	b2d8      	uxtb	r0, r3
 8003144:	4603      	mov	r3, r0
 8003146:	01db      	lsls	r3, r3, #7
 8003148:	4413      	add	r3, r2
 800314a:	4a0e      	ldr	r2, [pc, #56]	@ (8003184 <ssd1306_DrawPixel+0xa4>)
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	b25a      	sxtb	r2, r3
 8003150:	79bb      	ldrb	r3, [r7, #6]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	b25b      	sxtb	r3, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	b25b      	sxtb	r3, r3
 8003162:	4013      	ands	r3, r2
 8003164:	b259      	sxtb	r1, r3
 8003166:	79fa      	ldrb	r2, [r7, #7]
 8003168:	4603      	mov	r3, r0
 800316a:	01db      	lsls	r3, r3, #7
 800316c:	4413      	add	r3, r2
 800316e:	b2c9      	uxtb	r1, r1
 8003170:	4a04      	ldr	r2, [pc, #16]	@ (8003184 <ssd1306_DrawPixel+0xa4>)
 8003172:	54d1      	strb	r1, [r2, r3]
 8003174:	e000      	b.n	8003178 <ssd1306_DrawPixel+0x98>
        return;
 8003176:	bf00      	nop
    }
}
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20002808 	.word	0x20002808

08003188 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	4604      	mov	r4, r0
 8003190:	4638      	mov	r0, r7
 8003192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003196:	4623      	mov	r3, r4
 8003198:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b1f      	cmp	r3, #31
 800319e:	d902      	bls.n	80031a6 <ssd1306_WriteChar+0x1e>
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80031a4:	d901      	bls.n	80031aa <ssd1306_WriteChar+0x22>
        return 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e077      	b.n	800329a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80031aa:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	783b      	ldrb	r3, [r7, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	2b80      	cmp	r3, #128	@ 0x80
 80031b6:	dc06      	bgt.n	80031c6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80031b8:	4b3a      	ldr	r3, [pc, #232]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 80031ba:	885b      	ldrh	r3, [r3, #2]
 80031bc:	461a      	mov	r2, r3
 80031be:	787b      	ldrb	r3, [r7, #1]
 80031c0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	dd01      	ble.n	80031ca <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e067      	b.n	800329a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e04e      	b.n	800326e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	3b20      	subs	r3, #32
 80031d6:	7879      	ldrb	r1, [r7, #1]
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	440b      	add	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e036      	b.n	800325e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003200:	4b28      	ldr	r3, [pc, #160]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4413      	add	r3, r2
 800320c:	b2d8      	uxtb	r0, r3
 800320e:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 8003210:	885b      	ldrh	r3, [r3, #2]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4413      	add	r3, r2
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003220:	4619      	mov	r1, r3
 8003222:	f7ff ff5d 	bl	80030e0 <ssd1306_DrawPixel>
 8003226:	e017      	b.n	8003258 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003228:	4b1e      	ldr	r3, [pc, #120]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	4413      	add	r3, r2
 8003234:	b2d8      	uxtb	r0, r3
 8003236:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 8003238:	885b      	ldrh	r3, [r3, #2]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	4413      	add	r3, r2
 8003242:	b2d9      	uxtb	r1, r3
 8003244:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	f7ff ff44 	bl	80030e0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	3301      	adds	r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	783b      	ldrb	r3, [r7, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4293      	cmp	r3, r2
 8003266:	d3c3      	bcc.n	80031f0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3301      	adds	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	787b      	ldrb	r3, [r7, #1]
 8003270:	461a      	mov	r2, r3
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	4293      	cmp	r3, r2
 8003276:	d3ab      	bcc.n	80031d0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003278:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	2a00      	cmp	r2, #0
 8003280:	d005      	beq.n	800328e <ssd1306_WriteChar+0x106>
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	3a20      	subs	r2, #32
 8003288:	440a      	add	r2, r1
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	e000      	b.n	8003290 <ssd1306_WriteChar+0x108>
 800328e:	783a      	ldrb	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <ssd1306_WriteChar+0x11c>)
 8003296:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	@ 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20002c08 	.word	0x20002c08

080032a8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	4638      	mov	r0, r7
 80032b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80032b6:	e013      	b.n	80032e0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	7818      	ldrb	r0, [r3, #0]
 80032bc:	7e3b      	ldrb	r3, [r7, #24]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	463b      	mov	r3, r7
 80032c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c4:	f7ff ff60 	bl	8003188 <ssd1306_WriteChar>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d002      	beq.n	80032da <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	e008      	b.n	80032ec <ssd1306_WriteString+0x44>
        }
        str++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3301      	adds	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e7      	bne.n	80032b8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	781b      	ldrb	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	460a      	mov	r2, r1
 80032fe:	71fb      	strb	r3, [r7, #7]
 8003300:	4613      	mov	r3, r2
 8003302:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	b29a      	uxth	r2, r3
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <ssd1306_SetCursor+0x2c>)
 800330a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800330c:	79bb      	ldrb	r3, [r7, #6]
 800330e:	b29a      	uxth	r2, r3
 8003310:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <ssd1306_SetCursor+0x2c>)
 8003312:	805a      	strh	r2, [r3, #2]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	20002c08 	.word	0x20002c08

08003324 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800332e:	2381      	movs	r3, #129	@ 0x81
 8003330:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fdf7 	bl	8002f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fdf3 	bl	8002f28 <ssd1306_WriteCommand>
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800335c:	23af      	movs	r3, #175	@ 0xaf
 800335e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003360:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <ssd1306_SetDisplayOn+0x38>)
 8003362:	2201      	movs	r2, #1
 8003364:	715a      	strb	r2, [r3, #5]
 8003366:	e004      	b.n	8003372 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003368:	23ae      	movs	r3, #174	@ 0xae
 800336a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <ssd1306_SetDisplayOn+0x38>)
 800336e:	2200      	movs	r2, #0
 8003370:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fdd7 	bl	8002f28 <ssd1306_WriteCommand>
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20002c08 	.word	0x20002c08

08003388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <HAL_MspInit+0x4c>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	4a0f      	ldr	r2, [pc, #60]	@ (80033d4 <HAL_MspInit+0x4c>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800339c:	6453      	str	r3, [r2, #68]	@ 0x44
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <HAL_MspInit+0x4c>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_MspInit+0x4c>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	4a08      	ldr	r2, [pc, #32]	@ (80033d4 <HAL_MspInit+0x4c>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <HAL_MspInit+0x4c>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800

080033d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	@ 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2f      	ldr	r2, [pc, #188]	@ (80034b4 <HAL_ADC_MspInit+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d157      	bne.n	80034aa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_ADC_MspInit+0xe0>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	4a2d      	ldr	r2, [pc, #180]	@ (80034b8 <HAL_ADC_MspInit+0xe0>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003408:	6453      	str	r3, [r2, #68]	@ 0x44
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_ADC_MspInit+0xe0>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	4b27      	ldr	r3, [pc, #156]	@ (80034b8 <HAL_ADC_MspInit+0xe0>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_ADC_MspInit+0xe0>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6313      	str	r3, [r2, #48]	@ 0x30
 8003426:	4b24      	ldr	r3, [pc, #144]	@ (80034b8 <HAL_ADC_MspInit+0xe0>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003432:	2301      	movs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003436:	2303      	movs	r3, #3
 8003438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	4619      	mov	r1, r3
 8003444:	481d      	ldr	r0, [pc, #116]	@ (80034bc <HAL_ADC_MspInit+0xe4>)
 8003446:	f001 fd59 	bl	8004efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800344a:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 800344c:	4a1d      	ldr	r2, [pc, #116]	@ (80034c4 <HAL_ADC_MspInit+0xec>)
 800344e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003456:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800345c:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003462:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 8003464:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003468:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800346a:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 800346c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003470:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 8003474:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003478:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800347a:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 800347c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003480:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003482:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003488:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 800348a:	2200      	movs	r2, #0
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800348e:	480c      	ldr	r0, [pc, #48]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 8003490:	f001 f932 	bl	80046f8 <HAL_DMA_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800349a:	f7ff fc4b 	bl	8002d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a07      	ldr	r2, [pc, #28]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80034a4:	4a06      	ldr	r2, [pc, #24]	@ (80034c0 <HAL_ADC_MspInit+0xe8>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80034aa:	bf00      	nop
 80034ac:	3728      	adds	r7, #40	@ 0x28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40012000 	.word	0x40012000
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	200004ac 	.word	0x200004ac
 80034c4:	40026410 	.word	0x40026410

080034c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	@ 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a19      	ldr	r2, [pc, #100]	@ (800354c <HAL_I2C_MspInit+0x84>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d12c      	bne.n	8003544 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <HAL_I2C_MspInit+0x88>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <HAL_I2C_MspInit+0x88>)
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fa:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <HAL_I2C_MspInit+0x88>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003506:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800350a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800350c:	2312      	movs	r3, #18
 800350e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003518:	2304      	movs	r3, #4
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	4619      	mov	r1, r3
 8003522:	480c      	ldr	r0, [pc, #48]	@ (8003554 <HAL_I2C_MspInit+0x8c>)
 8003524:	f001 fcea 	bl	8004efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <HAL_I2C_MspInit+0x88>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	4a07      	ldr	r2, [pc, #28]	@ (8003550 <HAL_I2C_MspInit+0x88>)
 8003532:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003536:	6413      	str	r3, [r2, #64]	@ 0x40
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_I2C_MspInit+0x88>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003544:	bf00      	nop
 8003546:	3728      	adds	r7, #40	@ 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40005400 	.word	0x40005400
 8003550:	40023800 	.word	0x40023800
 8003554:	40020400 	.word	0x40020400

08003558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	@ 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a28      	ldr	r2, [pc, #160]	@ (8003618 <HAL_SPI_MspInit+0xc0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d14a      	bne.n	8003610 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	4a26      	ldr	r2, [pc, #152]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003588:	6413      	str	r3, [r2, #64]	@ 0x40
 800358a:	4b24      	ldr	r3, [pc, #144]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	4a1f      	ldr	r2, [pc, #124]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a6:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	4b19      	ldr	r3, [pc, #100]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	4a18      	ldr	r2, [pc, #96]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c2:	4b16      	ldr	r3, [pc, #88]	@ (800361c <HAL_SPI_MspInit+0xc4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035ce:	230c      	movs	r3, #12
 80035d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035de:	2305      	movs	r3, #5
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e2:	f107 0314 	add.w	r3, r7, #20
 80035e6:	4619      	mov	r1, r3
 80035e8:	480d      	ldr	r0, [pc, #52]	@ (8003620 <HAL_SPI_MspInit+0xc8>)
 80035ea:	f001 fc87 	bl	8004efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fc:	2303      	movs	r3, #3
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003600:	2305      	movs	r3, #5
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4806      	ldr	r0, [pc, #24]	@ (8003624 <HAL_SPI_MspInit+0xcc>)
 800360c:	f001 fc76 	bl	8004efc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	@ 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40003800 	.word	0x40003800
 800361c:	40023800 	.word	0x40023800
 8003620:	40020800 	.word	0x40020800
 8003624:	40020400 	.word	0x40020400

08003628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2c      	ldr	r2, [pc, #176]	@ (80036e8 <HAL_TIM_Base_MspInit+0xc0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	4b2b      	ldr	r3, [pc, #172]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	4a2a      	ldr	r2, [pc, #168]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6453      	str	r3, [r2, #68]	@ 0x44
 800364a:	4b28      	ldr	r3, [pc, #160]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003656:	e042      	b.n	80036de <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003660:	d10e      	bne.n	8003680 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	4b21      	ldr	r3, [pc, #132]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	4a20      	ldr	r2, [pc, #128]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6413      	str	r3, [r2, #64]	@ 0x40
 8003672:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
}
 800367e:	e02e      	b.n	80036de <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <HAL_TIM_Base_MspInit+0xc8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10e      	bne.n	80036a8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
}
 80036a6:	e01a      	b.n	80036de <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <HAL_TIM_Base_MspInit+0xcc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d115      	bne.n	80036de <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	4a0c      	ldr	r2, [pc, #48]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c2:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <HAL_TIM_Base_MspInit+0xc4>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	201e      	movs	r0, #30
 80036d4:	f000 ffd9 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036d8:	201e      	movs	r0, #30
 80036da:	f000 fff2 	bl	80046c2 <HAL_NVIC_EnableIRQ>
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800

080036f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	@ 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003718:	d13c      	bne.n	8003794 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	4b31      	ldr	r3, [pc, #196]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	4a30      	ldr	r2, [pc, #192]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6313      	str	r3, [r2, #48]	@ 0x30
 800372a:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b2a      	ldr	r3, [pc, #168]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	4a29      	ldr	r2, [pc, #164]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6313      	str	r3, [r2, #48]	@ 0x30
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_A_Pin;
 8003752:	2320      	movs	r3, #32
 8003754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003762:	2301      	movs	r3, #1
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_A_GPIO_Port, &GPIO_InitStruct);
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	4619      	mov	r1, r3
 800376c:	481e      	ldr	r0, [pc, #120]	@ (80037e8 <HAL_TIM_MspPostInit+0xf0>)
 800376e:	f001 fbc5 	bl	8004efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_C_Pin;
 8003772:	2308      	movs	r3, #8
 8003774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003776:	2302      	movs	r3, #2
 8003778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003782:	2301      	movs	r3, #1
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_C_GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	4619      	mov	r1, r3
 800378c:	4817      	ldr	r0, [pc, #92]	@ (80037ec <HAL_TIM_MspPostInit+0xf4>)
 800378e:	f001 fbb5 	bl	8004efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003792:	e022      	b.n	80037da <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a15      	ldr	r2, [pc, #84]	@ (80037f0 <HAL_TIM_MspPostInit+0xf8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d11d      	bne.n	80037da <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	4a0f      	ldr	r2, [pc, #60]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ae:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <HAL_TIM_MspPostInit+0xec>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_B_Pin;
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ca:	2302      	movs	r3, #2
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_B_GPIO_Port, &GPIO_InitStruct);
 80037ce:	f107 0314 	add.w	r3, r7, #20
 80037d2:	4619      	mov	r1, r3
 80037d4:	4807      	ldr	r0, [pc, #28]	@ (80037f4 <HAL_TIM_MspPostInit+0xfc>)
 80037d6:	f001 fb91 	bl	8004efc <HAL_GPIO_Init>
}
 80037da:	bf00      	nop
 80037dc:	3728      	adds	r7, #40	@ 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40020800 	.word	0x40020800

080037f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	@ 0x30
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3a      	ldr	r2, [pc, #232]	@ (8003900 <HAL_UART_MspInit+0x108>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d135      	bne.n	8003886 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	4b39      	ldr	r3, [pc, #228]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	4a38      	ldr	r2, [pc, #224]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 8003824:	f043 0310 	orr.w	r3, r3, #16
 8003828:	6453      	str	r3, [r2, #68]	@ 0x44
 800382a:	4b36      	ldr	r3, [pc, #216]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	4b32      	ldr	r3, [pc, #200]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	4a31      	ldr	r2, [pc, #196]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6313      	str	r3, [r2, #48]	@ 0x30
 8003846:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003852:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003860:	2303      	movs	r3, #3
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003864:	2307      	movs	r3, #7
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	4619      	mov	r1, r3
 800386e:	4826      	ldr	r0, [pc, #152]	@ (8003908 <HAL_UART_MspInit+0x110>)
 8003870:	f001 fb44 	bl	8004efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003874:	2200      	movs	r2, #0
 8003876:	2100      	movs	r1, #0
 8003878:	2025      	movs	r0, #37	@ 0x25
 800387a:	f000 ff06 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800387e:	2025      	movs	r0, #37	@ 0x25
 8003880:	f000 ff1f 	bl	80046c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003884:	e038      	b.n	80038f8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a20      	ldr	r2, [pc, #128]	@ (800390c <HAL_UART_MspInit+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d133      	bne.n	80038f8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	4a1a      	ldr	r2, [pc, #104]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389e:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a0:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	4b14      	ldr	r3, [pc, #80]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	4a13      	ldr	r2, [pc, #76]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_UART_MspInit+0x10c>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038c8:	230c      	movs	r3, #12
 80038ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038d8:	2307      	movs	r3, #7
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4619      	mov	r1, r3
 80038e2:	4809      	ldr	r0, [pc, #36]	@ (8003908 <HAL_UART_MspInit+0x110>)
 80038e4:	f001 fb0a 	bl	8004efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038e8:	2200      	movs	r2, #0
 80038ea:	2100      	movs	r1, #0
 80038ec:	2026      	movs	r0, #38	@ 0x26
 80038ee:	f000 fecc 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038f2:	2026      	movs	r0, #38	@ 0x26
 80038f4:	f000 fee5 	bl	80046c2 <HAL_NVIC_EnableIRQ>
}
 80038f8:	bf00      	nop
 80038fa:	3730      	adds	r7, #48	@ 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40011000 	.word	0x40011000
 8003904:	40023800 	.word	0x40023800
 8003908:	40020000 	.word	0x40020000
 800390c:	40004400 	.word	0x40004400

08003910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <NMI_Handler+0x4>

08003918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800391c:	bf00      	nop
 800391e:	e7fd      	b.n	800391c <HardFault_Handler+0x4>

08003920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <MemManage_Handler+0x4>

08003928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <BusFault_Handler+0x4>

08003930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <UsageFault_Handler+0x4>

08003938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003966:	f000 f97f 	bl	8003c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003974:	4802      	ldr	r0, [pc, #8]	@ (8003980 <TIM4_IRQHandler+0x10>)
 8003976:	f003 fda5 	bl	80074c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000690 	.word	0x20000690

08003984 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003988:	4802      	ldr	r0, [pc, #8]	@ (8003994 <USART1_IRQHandler+0x10>)
 800398a:	f004 fccf 	bl	800832c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200006d8 	.word	0x200006d8

08003998 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800399c:	4802      	ldr	r0, [pc, #8]	@ (80039a8 <USART2_IRQHandler+0x10>)
 800399e:	f004 fcc5 	bl	800832c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000720 	.word	0x20000720

080039ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039b0:	4802      	ldr	r0, [pc, #8]	@ (80039bc <DMA2_Stream0_IRQHandler+0x10>)
 80039b2:	f001 f839 	bl	8004a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200004ac 	.word	0x200004ac

080039c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return 1;
 80039c4:	2301      	movs	r3, #1
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_kill>:

int _kill(int pid, int sig)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039da:	f006 fbf9 	bl	800a1d0 <__errno>
 80039de:	4603      	mov	r3, r0
 80039e0:	2216      	movs	r2, #22
 80039e2:	601a      	str	r2, [r3, #0]
  return -1;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_exit>:

void _exit (int status)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ffe7 	bl	80039d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <_exit+0x12>

08003a06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e00a      	b.n	8003a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a18:	f3af 8000 	nop.w
 8003a1c:	4601      	mov	r1, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	60ba      	str	r2, [r7, #8]
 8003a24:	b2ca      	uxtb	r2, r1
 8003a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	dbf0      	blt.n	8003a18 <_read+0x12>
  }

  return len;
 8003a36:	687b      	ldr	r3, [r7, #4]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e009      	b.n	8003a66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	dbf1      	blt.n	8003a52 <_write+0x12>
  }
  return len;
 8003a6e:	687b      	ldr	r3, [r7, #4]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_close>:

int _close(int file)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_isatty>:

int _isatty(int file)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ab8:	2301      	movs	r3, #1
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae8:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <_sbrk+0x5c>)
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <_sbrk+0x60>)
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af4:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <_sbrk+0x64>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <_sbrk+0x64>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	@ (8003b48 <_sbrk+0x68>)
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <_sbrk+0x64>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d207      	bcs.n	8003b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b10:	f006 fb5e 	bl	800a1d0 <__errno>
 8003b14:	4603      	mov	r3, r0
 8003b16:	220c      	movs	r2, #12
 8003b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e009      	b.n	8003b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b20:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <_sbrk+0x64>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <_sbrk+0x64>)
 8003b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20018000 	.word	0x20018000
 8003b40:	00000400 	.word	0x00000400
 8003b44:	20002c10 	.word	0x20002c10
 8003b48:	20002d68 	.word	0x20002d68

08003b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <SystemInit+0x20>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b56:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <SystemInit+0x20>)
 8003b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ba8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b74:	f7ff ffea 	bl	8003b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b78:	480c      	ldr	r0, [pc, #48]	@ (8003bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b7a:	490d      	ldr	r1, [pc, #52]	@ (8003bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b80:	e002      	b.n	8003b88 <LoopCopyDataInit>

08003b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b86:	3304      	adds	r3, #4

08003b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b8c:	d3f9      	bcc.n	8003b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b90:	4c0a      	ldr	r4, [pc, #40]	@ (8003bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b94:	e001      	b.n	8003b9a <LoopFillZerobss>

08003b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b98:	3204      	adds	r2, #4

08003b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b9c:	d3fb      	bcc.n	8003b96 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b9e:	f006 fb1d 	bl	800a1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ba2:	f7fe fbc3 	bl	800232c <main>
  bx  lr    
 8003ba6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ba8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb0:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003bb4:	0800e748 	.word	0x0800e748
  ldr r2, =_sbss
 8003bb8:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8003bbc:	20002d64 	.word	0x20002d64

08003bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bc0:	e7fe      	b.n	8003bc0 <ADC_IRQHandler>
	...

08003bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <HAL_Init+0x40>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c04 <HAL_Init+0x40>)
 8003bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_Init+0x40>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <HAL_Init+0x40>)
 8003bda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be0:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <HAL_Init+0x40>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a07      	ldr	r2, [pc, #28]	@ (8003c04 <HAL_Init+0x40>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bec:	2003      	movs	r0, #3
 8003bee:	f000 fd41 	bl	8004674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f000 f808 	bl	8003c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bf8:	f7ff fbc6 	bl	8003388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00

08003c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c10:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_InitTick+0x54>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b12      	ldr	r3, [pc, #72]	@ (8003c60 <HAL_InitTick+0x58>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fd59 	bl	80046de <HAL_SYSTICK_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00e      	b.n	8003c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b0f      	cmp	r3, #15
 8003c3a:	d80a      	bhi.n	8003c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	f000 fd21 	bl	800468a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c48:	4a06      	ldr	r2, [pc, #24]	@ (8003c64 <HAL_InitTick+0x5c>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000088 	.word	0x20000088
 8003c60:	20000090 	.word	0x20000090
 8003c64:	2000008c 	.word	0x2000008c

08003c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_IncTick+0x20>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_IncTick+0x24>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <HAL_IncTick+0x24>)
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000090 	.word	0x20000090
 8003c8c:	20002c14 	.word	0x20002c14

08003c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return uwTick;
 8003c94:	4b03      	ldr	r3, [pc, #12]	@ (8003ca4 <HAL_GetTick+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20002c14 	.word	0x20002c14

08003ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff ffee 	bl	8003c90 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d005      	beq.n	8003cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <HAL_Delay+0x44>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cce:	bf00      	nop
 8003cd0:	f7ff ffde 	bl	8003c90 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d8f7      	bhi.n	8003cd0 <HAL_Delay+0x28>
  {
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000090 	.word	0x20000090

08003cf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e033      	b.n	8003d6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fb62 	bl	80033d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d36:	f023 0302 	bic.w	r3, r3, #2
 8003d3a:	f043 0202 	orr.w	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa48 	bl	80041d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d5e:	e001      	b.n	8003d64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_Start_DMA+0x1e>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e0ce      	b.n	8003f34 <HAL_ADC_Start_DMA+0x1bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d018      	beq.n	8003dde <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8003f3c <HAL_ADC_Start_DMA+0x1c4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5f      	ldr	r2, [pc, #380]	@ (8003f40 <HAL_ADC_Start_DMA+0x1c8>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9a      	lsrs	r2, r3, #18
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003dd0:	e002      	b.n	8003dd8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f9      	bne.n	8003dd2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dec:	d107      	bne.n	8003dfe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dfc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 8086 	bne.w	8003f1a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4c:	d106      	bne.n	8003e5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f023 0206 	bic.w	r2, r3, #6
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e5a:	e002      	b.n	8003e62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e6a:	4b36      	ldr	r3, [pc, #216]	@ (8003f44 <HAL_ADC_Start_DMA+0x1cc>)
 8003e6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	4a35      	ldr	r2, [pc, #212]	@ (8003f48 <HAL_ADC_Start_DMA+0x1d0>)
 8003e74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	4a34      	ldr	r2, [pc, #208]	@ (8003f4c <HAL_ADC_Start_DMA+0x1d4>)
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e82:	4a33      	ldr	r2, [pc, #204]	@ (8003f50 <HAL_ADC_Start_DMA+0x1d8>)
 8003e84:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003e9e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	334c      	adds	r3, #76	@ 0x4c
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f000 fcc8 	bl	8004854 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d129      	bne.n	8003f32 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	e020      	b.n	8003f32 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a17      	ldr	r2, [pc, #92]	@ (8003f54 <HAL_ADC_Start_DMA+0x1dc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d11b      	bne.n	8003f32 <HAL_ADC_Start_DMA+0x1ba>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d114      	bne.n	8003f32 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	e00b      	b.n	8003f32 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000088 	.word	0x20000088
 8003f40:	431bde83 	.word	0x431bde83
 8003f44:	40012300 	.word	0x40012300
 8003f48:	080043d1 	.word	0x080043d1
 8003f4c:	0800448b 	.word	0x0800448b
 8003f50:	080044a7 	.word	0x080044a7
 8003f54:	40012000 	.word	0x40012000

08003f58 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x1c>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e105      	b.n	80041bc <HAL_ADC_ConfigChannel+0x228>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d925      	bls.n	800400c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3b1e      	subs	r3, #30
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68d9      	ldr	r1, [r3, #12]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4403      	add	r3, r0
 8003ffe:	3b1e      	subs	r3, #30
 8004000:	409a      	lsls	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	e022      	b.n	8004052 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6919      	ldr	r1, [r3, #16]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	4613      	mov	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	2207      	movs	r2, #7
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43da      	mvns	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	400a      	ands	r2, r1
 800402e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6919      	ldr	r1, [r3, #16]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	4618      	mov	r0, r3
 8004042:	4603      	mov	r3, r0
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4403      	add	r3, r0
 8004048:	409a      	lsls	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d824      	bhi.n	80040a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	3b05      	subs	r3, #5
 800406c:	221f      	movs	r2, #31
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	400a      	ands	r2, r1
 800407a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	4618      	mov	r0, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	3b05      	subs	r3, #5
 8004096:	fa00 f203 	lsl.w	r2, r0, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040a2:	e04c      	b.n	800413e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d824      	bhi.n	80040f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	3b23      	subs	r3, #35	@ 0x23
 80040be:	221f      	movs	r2, #31
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43da      	mvns	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	400a      	ands	r2, r1
 80040cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4618      	mov	r0, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	3b23      	subs	r3, #35	@ 0x23
 80040e8:	fa00 f203 	lsl.w	r2, r0, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80040f4:	e023      	b.n	800413e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	3b41      	subs	r3, #65	@ 0x41
 8004108:	221f      	movs	r2, #31
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43da      	mvns	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	400a      	ands	r2, r1
 8004116:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4618      	mov	r0, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b41      	subs	r3, #65	@ 0x41
 8004132:	fa00 f203 	lsl.w	r2, r0, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800413e:	4b22      	ldr	r3, [pc, #136]	@ (80041c8 <HAL_ADC_ConfigChannel+0x234>)
 8004140:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a21      	ldr	r2, [pc, #132]	@ (80041cc <HAL_ADC_ConfigChannel+0x238>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d109      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1cc>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b12      	cmp	r3, #18
 8004152:	d105      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	@ (80041cc <HAL_ADC_ConfigChannel+0x238>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d123      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x21e>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b10      	cmp	r3, #16
 8004170:	d003      	beq.n	800417a <HAL_ADC_ConfigChannel+0x1e6>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b11      	cmp	r3, #17
 8004178:	d11b      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b10      	cmp	r3, #16
 800418c:	d111      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <HAL_ADC_ConfigChannel+0x23c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a10      	ldr	r2, [pc, #64]	@ (80041d4 <HAL_ADC_ConfigChannel+0x240>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	0c9a      	lsrs	r2, r3, #18
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80041a4:	e002      	b.n	80041ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f9      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40012300 	.word	0x40012300
 80041cc:	40012000 	.word	0x40012000
 80041d0:	20000088 	.word	0x20000088
 80041d4:	431bde83 	.word	0x431bde83

080041d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e0:	4b79      	ldr	r3, [pc, #484]	@ (80043c8 <ADC_Init+0x1f0>)
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800420c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6899      	ldr	r1, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	4a58      	ldr	r2, [pc, #352]	@ (80043cc <ADC_Init+0x1f4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800427e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6899      	ldr	r1, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80042a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6899      	ldr	r1, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	e00f      	b.n	80042d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80042d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0202 	bic.w	r2, r2, #2
 80042e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6899      	ldr	r1, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7e1b      	ldrb	r3, [r3, #24]
 80042f0:	005a      	lsls	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004312:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	3b01      	subs	r3, #1
 8004330:	035a      	lsls	r2, r3, #13
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	e007      	b.n	800434c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800434a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	3b01      	subs	r3, #1
 8004368:	051a      	lsls	r2, r3, #20
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6899      	ldr	r1, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800438e:	025a      	lsls	r2, r3, #9
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	029a      	lsls	r2, r3, #10
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40012300 	.word	0x40012300
 80043cc:	0f000001 	.word	0x0f000001

080043d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d13c      	bne.n	8004464 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d12b      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004408:	2b00      	cmp	r3, #0
 800440a:	d127      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004424:	2b00      	cmp	r3, #0
 8004426:	d119      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0220 	bic.w	r2, r2, #32
 8004436:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fd7b 	bl	8003f58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004462:	e00e      	b.n	8004482 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff fd85 	bl	8003f80 <HAL_ADC_ErrorCallback>
}
 8004476:	e004      	b.n	8004482 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fd67 	bl	8003f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2240      	movs	r2, #64	@ 0x40
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff fd5a 	bl	8003f80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044f0:	4013      	ands	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004506:	4a04      	ldr	r2, [pc, #16]	@ (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	60d3      	str	r3, [r2, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <__NVIC_GetPriorityGrouping+0x18>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	f003 0307 	and.w	r3, r3, #7
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db0b      	blt.n	8004562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	f003 021f 	and.w	r2, r3, #31
 8004550:	4907      	ldr	r1, [pc, #28]	@ (8004570 <__NVIC_EnableIRQ+0x38>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2001      	movs	r0, #1
 800455a:	fa00 f202 	lsl.w	r2, r0, r2
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000e100 	.word	0xe000e100

08004574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004584:	2b00      	cmp	r3, #0
 8004586:	db0a      	blt.n	800459e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	490c      	ldr	r1, [pc, #48]	@ (80045c0 <__NVIC_SetPriority+0x4c>)
 800458e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	440b      	add	r3, r1
 8004598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800459c:	e00a      	b.n	80045b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4908      	ldr	r1, [pc, #32]	@ (80045c4 <__NVIC_SetPriority+0x50>)
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	3b04      	subs	r3, #4
 80045ac:	0112      	lsls	r2, r2, #4
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	440b      	add	r3, r1
 80045b2:	761a      	strb	r2, [r3, #24]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	e000e100 	.word	0xe000e100
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b089      	sub	sp, #36	@ 0x24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f1c3 0307 	rsb	r3, r3, #7
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	bf28      	it	cs
 80045e6:	2304      	movcs	r3, #4
 80045e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d902      	bls.n	80045f8 <NVIC_EncodePriority+0x30>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3b03      	subs	r3, #3
 80045f6:	e000      	b.n	80045fa <NVIC_EncodePriority+0x32>
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43da      	mvns	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	401a      	ands	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004610:	f04f 31ff 	mov.w	r1, #4294967295
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	43d9      	mvns	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004620:	4313      	orrs	r3, r2
         );
}
 8004622:	4618      	mov	r0, r3
 8004624:	3724      	adds	r7, #36	@ 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3b01      	subs	r3, #1
 800463c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004640:	d301      	bcc.n	8004646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004642:	2301      	movs	r3, #1
 8004644:	e00f      	b.n	8004666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004646:	4a0a      	ldr	r2, [pc, #40]	@ (8004670 <SysTick_Config+0x40>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3b01      	subs	r3, #1
 800464c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800464e:	210f      	movs	r1, #15
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	f7ff ff8e 	bl	8004574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <SysTick_Config+0x40>)
 800465a:	2200      	movs	r2, #0
 800465c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800465e:	4b04      	ldr	r3, [pc, #16]	@ (8004670 <SysTick_Config+0x40>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	e000e010 	.word	0xe000e010

08004674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff29 	bl	80044d4 <__NVIC_SetPriorityGrouping>
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	4603      	mov	r3, r0
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800469c:	f7ff ff3e 	bl	800451c <__NVIC_GetPriorityGrouping>
 80046a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f7ff ff8e 	bl	80045c8 <NVIC_EncodePriority>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff5d 	bl	8004574 <__NVIC_SetPriority>
}
 80046ba:	bf00      	nop
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff31 	bl	8004538 <__NVIC_EnableIRQ>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff ffa2 	bl	8004630 <SysTick_Config>
 80046ec:	4603      	mov	r3, r0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff fac4 	bl	8003c90 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e099      	b.n	8004848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004734:	e00f      	b.n	8004756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004736:	f7ff faab 	bl	8003c90 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b05      	cmp	r3, #5
 8004742:	d908      	bls.n	8004756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2203      	movs	r2, #3
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e078      	b.n	8004848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e8      	bne.n	8004736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4b38      	ldr	r3, [pc, #224]	@ (8004850 <HAL_DMA_Init+0x158>)
 8004770:	4013      	ands	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800479a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d107      	bne.n	80047c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	4313      	orrs	r3, r2
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0307 	bic.w	r3, r3, #7
 80047d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d117      	bne.n	800481a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb01 	bl	8004e04 <DMA_CheckFifoParam>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2240      	movs	r2, #64	@ 0x40
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004816:	2301      	movs	r3, #1
 8004818:	e016      	b.n	8004848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fab8 	bl	8004d98 <DMA_CalcBaseAndBitshift>
 8004828:	4603      	mov	r3, r0
 800482a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	223f      	movs	r2, #63	@ 0x3f
 8004832:	409a      	lsls	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	f010803f 	.word	0xf010803f

08004854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_DMA_Start_IT+0x26>
 8004876:	2302      	movs	r3, #2
 8004878:	e040      	b.n	80048fc <HAL_DMA_Start_IT+0xa8>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d12f      	bne.n	80048ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa4a 	bl	8004d3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ac:	223f      	movs	r2, #63	@ 0x3f
 80048ae:	409a      	lsls	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0216 	orr.w	r2, r2, #22
 80048c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0208 	orr.w	r2, r2, #8
 80048da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e005      	b.n	80048fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
 80048f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004910:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004912:	f7ff f9bd 	bl	8003c90 <HAL_GetTick>
 8004916:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d008      	beq.n	8004936 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2280      	movs	r2, #128	@ 0x80
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e052      	b.n	80049dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0216 	bic.w	r2, r2, #22
 8004944:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004954:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_DMA_Abort+0x62>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0208 	bic.w	r2, r2, #8
 8004974:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004986:	e013      	b.n	80049b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004988:	f7ff f982 	bl	8003c90 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b05      	cmp	r3, #5
 8004994:	d90c      	bls.n	80049b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2203      	movs	r2, #3
 80049a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e015      	b.n	80049dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e4      	bne.n	8004988 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c2:	223f      	movs	r2, #63	@ 0x3f
 80049c4:	409a      	lsls	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d004      	beq.n	8004a02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2280      	movs	r2, #128	@ 0x80
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e00c      	b.n	8004a1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2205      	movs	r2, #5
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a34:	4b8e      	ldr	r3, [pc, #568]	@ (8004c70 <HAL_DMA_IRQHandler+0x248>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a8e      	ldr	r2, [pc, #568]	@ (8004c74 <HAL_DMA_IRQHandler+0x24c>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0a9b      	lsrs	r3, r3, #10
 8004a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	2208      	movs	r2, #8
 8004a54:	409a      	lsls	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01a      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0204 	bic.w	r2, r2, #4
 8004a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a80:	2208      	movs	r2, #8
 8004a82:	409a      	lsls	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a98:	2201      	movs	r2, #1
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d012      	beq.n	8004aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac2:	f043 0202 	orr.w	r2, r3, #2
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	2204      	movs	r2, #4
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d012      	beq.n	8004b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aec:	2204      	movs	r2, #4
 8004aee:	409a      	lsls	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af8:	f043 0204 	orr.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	2210      	movs	r2, #16
 8004b06:	409a      	lsls	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d043      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d03c      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b22:	2210      	movs	r2, #16
 8004b24:	409a      	lsls	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d018      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d024      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
 8004b56:	e01f      	b.n	8004b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
 8004b68:	e016      	b.n	8004b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d107      	bne.n	8004b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0208 	bic.w	r2, r2, #8
 8004b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 808f 	beq.w	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8087 	beq.w	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d136      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0216 	bic.w	r2, r2, #22
 8004be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <HAL_DMA_IRQHandler+0x1da>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0208 	bic.w	r2, r2, #8
 8004c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c16:	223f      	movs	r2, #63	@ 0x3f
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d07e      	beq.n	8004d34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
        }
        return;
 8004c3e:	e079      	b.n	8004d34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01d      	beq.n	8004c8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10d      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d031      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
 8004c6c:	e02c      	b.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
 8004c6e:	bf00      	nop
 8004c70:	20000088 	.word	0x20000088
 8004c74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d023      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
 8004c88:	e01e      	b.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10f      	bne.n	8004cb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0210 	bic.w	r2, r2, #16
 8004ca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d032      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d022      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2205      	movs	r2, #5
 8004ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d307      	bcc.n	8004d10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f2      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0x2cc>
 8004d0e:	e000      	b.n	8004d12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
 8004d32:	e000      	b.n	8004d36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d34:	bf00      	nop
    }
  }
}
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d108      	bne.n	8004d7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d7a:	e007      	b.n	8004d8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	3b10      	subs	r3, #16
 8004da8:	4a14      	ldr	r2, [pc, #80]	@ (8004dfc <DMA_CalcBaseAndBitshift+0x64>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004db2:	4a13      	ldr	r2, [pc, #76]	@ (8004e00 <DMA_CalcBaseAndBitshift+0x68>)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d909      	bls.n	8004dda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004dd8:	e007      	b.n	8004dea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	aaaaaaab 	.word	0xaaaaaaab
 8004e00:	0800e2f0 	.word	0x0800e2f0

08004e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d11f      	bne.n	8004e5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d856      	bhi.n	8004ed2 <DMA_CheckFifoParam+0xce>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <DMA_CheckFifoParam+0x28>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e4f 	.word	0x08004e4f
 8004e34:	08004e3d 	.word	0x08004e3d
 8004e38:	08004ed3 	.word	0x08004ed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d046      	beq.n	8004ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4c:	e043      	b.n	8004ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e56:	d140      	bne.n	8004eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e03d      	b.n	8004eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e66:	d121      	bne.n	8004eac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d837      	bhi.n	8004ede <DMA_CheckFifoParam+0xda>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <DMA_CheckFifoParam+0x70>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e8b 	.word	0x08004e8b
 8004e7c:	08004e85 	.word	0x08004e85
 8004e80:	08004e9d 	.word	0x08004e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
      break;
 8004e88:	e030      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d025      	beq.n	8004ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9a:	e022      	b.n	8004ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ea4:	d11f      	bne.n	8004ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eaa:	e01c      	b.n	8004ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d903      	bls.n	8004eba <DMA_CheckFifoParam+0xb6>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d003      	beq.n	8004ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004eb8:	e018      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ebe:	e015      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e00b      	b.n	8004eea <DMA_CheckFifoParam+0xe6>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e00a      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e008      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004eda:	bf00      	nop
 8004edc:	e006      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e004      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e002      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;   
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
    }
  } 
  
  return status; 
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop

08004efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b089      	sub	sp, #36	@ 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e159      	b.n	80051cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f18:	2201      	movs	r2, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	f040 8148 	bne.w	80051c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d005      	beq.n	8004f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d130      	bne.n	8004fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	2203      	movs	r2, #3
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4013      	ands	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f84:	2201      	movs	r2, #1
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 0201 	and.w	r2, r3, #1
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d017      	beq.n	8004fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d123      	bne.n	8005040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	08da      	lsrs	r2, r3, #3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3208      	adds	r2, #8
 8005000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	220f      	movs	r2, #15
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	08da      	lsrs	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3208      	adds	r2, #8
 800503a:	69b9      	ldr	r1, [r7, #24]
 800503c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	2203      	movs	r2, #3
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 0203 	and.w	r2, r3, #3
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a2 	beq.w	80051c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	4b57      	ldr	r3, [pc, #348]	@ (80051e4 <HAL_GPIO_Init+0x2e8>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	4a56      	ldr	r2, [pc, #344]	@ (80051e4 <HAL_GPIO_Init+0x2e8>)
 800508c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005090:	6453      	str	r3, [r2, #68]	@ 0x44
 8005092:	4b54      	ldr	r3, [pc, #336]	@ (80051e4 <HAL_GPIO_Init+0x2e8>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800509e:	4a52      	ldr	r2, [pc, #328]	@ (80051e8 <HAL_GPIO_Init+0x2ec>)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	3302      	adds	r3, #2
 80050a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	220f      	movs	r2, #15
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a49      	ldr	r2, [pc, #292]	@ (80051ec <HAL_GPIO_Init+0x2f0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d019      	beq.n	80050fe <HAL_GPIO_Init+0x202>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a48      	ldr	r2, [pc, #288]	@ (80051f0 <HAL_GPIO_Init+0x2f4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_GPIO_Init+0x1fe>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a47      	ldr	r2, [pc, #284]	@ (80051f4 <HAL_GPIO_Init+0x2f8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00d      	beq.n	80050f6 <HAL_GPIO_Init+0x1fa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a46      	ldr	r2, [pc, #280]	@ (80051f8 <HAL_GPIO_Init+0x2fc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <HAL_GPIO_Init+0x1f6>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a45      	ldr	r2, [pc, #276]	@ (80051fc <HAL_GPIO_Init+0x300>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <HAL_GPIO_Init+0x1f2>
 80050ea:	2304      	movs	r3, #4
 80050ec:	e008      	b.n	8005100 <HAL_GPIO_Init+0x204>
 80050ee:	2307      	movs	r3, #7
 80050f0:	e006      	b.n	8005100 <HAL_GPIO_Init+0x204>
 80050f2:	2303      	movs	r3, #3
 80050f4:	e004      	b.n	8005100 <HAL_GPIO_Init+0x204>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e002      	b.n	8005100 <HAL_GPIO_Init+0x204>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_GPIO_Init+0x204>
 80050fe:	2300      	movs	r3, #0
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	f002 0203 	and.w	r2, r2, #3
 8005106:	0092      	lsls	r2, r2, #2
 8005108:	4093      	lsls	r3, r2
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005110:	4935      	ldr	r1, [pc, #212]	@ (80051e8 <HAL_GPIO_Init+0x2ec>)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	3302      	adds	r3, #2
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800511e:	4b38      	ldr	r3, [pc, #224]	@ (8005200 <HAL_GPIO_Init+0x304>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005142:	4a2f      	ldr	r2, [pc, #188]	@ (8005200 <HAL_GPIO_Init+0x304>)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005148:	4b2d      	ldr	r3, [pc, #180]	@ (8005200 <HAL_GPIO_Init+0x304>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	43db      	mvns	r3, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800516c:	4a24      	ldr	r2, [pc, #144]	@ (8005200 <HAL_GPIO_Init+0x304>)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005172:	4b23      	ldr	r3, [pc, #140]	@ (8005200 <HAL_GPIO_Init+0x304>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005196:	4a1a      	ldr	r2, [pc, #104]	@ (8005200 <HAL_GPIO_Init+0x304>)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800519c:	4b18      	ldr	r3, [pc, #96]	@ (8005200 <HAL_GPIO_Init+0x304>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051c0:	4a0f      	ldr	r2, [pc, #60]	@ (8005200 <HAL_GPIO_Init+0x304>)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	f67f aea2 	bls.w	8004f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3724      	adds	r7, #36	@ 0x24
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40013800 	.word	0x40013800
 80051ec:	40020000 	.word	0x40020000
 80051f0:	40020400 	.word	0x40020400
 80051f4:	40020800 	.word	0x40020800
 80051f8:	40020c00 	.word	0x40020c00
 80051fc:	40021000 	.word	0x40021000
 8005200:	40013c00 	.word	0x40013c00

08005204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	887b      	ldrh	r3, [r7, #2]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
 8005220:	e001      	b.n	8005226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
 8005240:	4613      	mov	r3, r2
 8005242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005244:	787b      	ldrb	r3, [r7, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005250:	e003      	b.n	800525a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005252:	887b      	ldrh	r3, [r7, #2]
 8005254:	041a      	lsls	r2, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	619a      	str	r2, [r3, #24]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e12b      	b.n	80054d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fe f91a 	bl	80034c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2224      	movs	r2, #36	@ 0x24
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052cc:	f001 f8ea 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 80052d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4a81      	ldr	r2, [pc, #516]	@ (80054dc <HAL_I2C_Init+0x274>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d807      	bhi.n	80052ec <HAL_I2C_Init+0x84>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a80      	ldr	r2, [pc, #512]	@ (80054e0 <HAL_I2C_Init+0x278>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	bf94      	ite	ls
 80052e4:	2301      	movls	r3, #1
 80052e6:	2300      	movhi	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	e006      	b.n	80052fa <HAL_I2C_Init+0x92>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4a7d      	ldr	r2, [pc, #500]	@ (80054e4 <HAL_I2C_Init+0x27c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bf94      	ite	ls
 80052f4:	2301      	movls	r3, #1
 80052f6:	2300      	movhi	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e0e7      	b.n	80054d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a78      	ldr	r2, [pc, #480]	@ (80054e8 <HAL_I2C_Init+0x280>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	0c9b      	lsrs	r3, r3, #18
 800530c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a6a      	ldr	r2, [pc, #424]	@ (80054dc <HAL_I2C_Init+0x274>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d802      	bhi.n	800533c <HAL_I2C_Init+0xd4>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	3301      	adds	r3, #1
 800533a:	e009      	b.n	8005350 <HAL_I2C_Init+0xe8>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	4a69      	ldr	r2, [pc, #420]	@ (80054ec <HAL_I2C_Init+0x284>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	099b      	lsrs	r3, r3, #6
 800534e:	3301      	adds	r3, #1
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	430b      	orrs	r3, r1
 8005356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005362:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	495c      	ldr	r1, [pc, #368]	@ (80054dc <HAL_I2C_Init+0x274>)
 800536c:	428b      	cmp	r3, r1
 800536e:	d819      	bhi.n	80053a4 <HAL_I2C_Init+0x13c>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1e59      	subs	r1, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	fbb1 f3f3 	udiv	r3, r1, r3
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005384:	400b      	ands	r3, r1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <HAL_I2C_Init+0x138>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1e59      	subs	r1, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	fbb1 f3f3 	udiv	r3, r1, r3
 8005398:	3301      	adds	r3, #1
 800539a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539e:	e051      	b.n	8005444 <HAL_I2C_Init+0x1dc>
 80053a0:	2304      	movs	r3, #4
 80053a2:	e04f      	b.n	8005444 <HAL_I2C_Init+0x1dc>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d111      	bne.n	80053d0 <HAL_I2C_Init+0x168>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1e58      	subs	r0, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	440b      	add	r3, r1
 80053ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80053be:	3301      	adds	r3, #1
 80053c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	e012      	b.n	80053f6 <HAL_I2C_Init+0x18e>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1e58      	subs	r0, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6859      	ldr	r1, [r3, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	0099      	lsls	r1, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e6:	3301      	adds	r3, #1
 80053e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_I2C_Init+0x196>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e022      	b.n	8005444 <HAL_I2C_Init+0x1dc>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10e      	bne.n	8005424 <HAL_I2C_Init+0x1bc>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1e58      	subs	r0, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	440b      	add	r3, r1
 8005414:	fbb0 f3f3 	udiv	r3, r0, r3
 8005418:	3301      	adds	r3, #1
 800541a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005422:	e00f      	b.n	8005444 <HAL_I2C_Init+0x1dc>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1e58      	subs	r0, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	0099      	lsls	r1, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	fbb0 f3f3 	udiv	r3, r0, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	6809      	ldr	r1, [r1, #0]
 8005448:	4313      	orrs	r3, r2
 800544a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005472:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6911      	ldr	r1, [r2, #16]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68d2      	ldr	r2, [r2, #12]
 800547e:	4311      	orrs	r1, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	430b      	orrs	r3, r1
 8005486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	000186a0 	.word	0x000186a0
 80054e0:	001e847f 	.word	0x001e847f
 80054e4:	003d08ff 	.word	0x003d08ff
 80054e8:	431bde83 	.word	0x431bde83
 80054ec:	10624dd3 	.word	0x10624dd3

080054f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	4608      	mov	r0, r1
 80054fa:	4611      	mov	r1, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	817b      	strh	r3, [r7, #10]
 8005502:	460b      	mov	r3, r1
 8005504:	813b      	strh	r3, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800550a:	f7fe fbc1 	bl	8003c90 <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b20      	cmp	r3, #32
 800551a:	f040 80d9 	bne.w	80056d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2319      	movs	r3, #25
 8005524:	2201      	movs	r2, #1
 8005526:	496d      	ldr	r1, [pc, #436]	@ (80056dc <HAL_I2C_Mem_Write+0x1ec>)
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f971 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
 8005536:	e0cc      	b.n	80056d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_I2C_Mem_Write+0x56>
 8005542:	2302      	movs	r3, #2
 8005544:	e0c5      	b.n	80056d2 <HAL_I2C_Mem_Write+0x1e2>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d007      	beq.n	800556c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800557a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2221      	movs	r2, #33	@ 0x21
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2240      	movs	r2, #64	@ 0x40
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800559c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a4d      	ldr	r2, [pc, #308]	@ (80056e0 <HAL_I2C_Mem_Write+0x1f0>)
 80055ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055ae:	88f8      	ldrh	r0, [r7, #6]
 80055b0:	893a      	ldrh	r2, [r7, #8]
 80055b2:	8979      	ldrh	r1, [r7, #10]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	4603      	mov	r3, r0
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f890 	bl	80056e4 <I2C_RequestMemoryWrite>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d052      	beq.n	8005670 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e081      	b.n	80056d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fa36 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d107      	bne.n	80055f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e06b      	b.n	80056d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	781a      	ldrb	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b04      	cmp	r3, #4
 8005636:	d11b      	bne.n	8005670 <HAL_I2C_Mem_Write+0x180>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563c:	2b00      	cmp	r3, #0
 800563e:	d017      	beq.n	8005670 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1aa      	bne.n	80055ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fa29 	bl	8005ad4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	2b04      	cmp	r3, #4
 800568e:	d107      	bne.n	80056a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800569e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e016      	b.n	80056d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	00100002 	.word	0x00100002
 80056e0:	ffff0000 	.word	0xffff0000

080056e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	817b      	strh	r3, [r7, #10]
 80056f6:	460b      	mov	r3, r1
 80056f8:	813b      	strh	r3, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800570c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	2200      	movs	r2, #0
 8005716:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f878 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005734:	d103      	bne.n	800573e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800573c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e05f      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005742:	897b      	ldrh	r3, [r7, #10]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005750:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	492d      	ldr	r1, [pc, #180]	@ (800580c <I2C_RequestMemoryWrite+0x128>)
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f8d3 	bl	8005904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04c      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800577e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005780:	6a39      	ldr	r1, [r7, #32]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f95e 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b04      	cmp	r3, #4
 8005794:	d107      	bne.n	80057a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e02b      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d105      	bne.n	80057bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b0:	893b      	ldrh	r3, [r7, #8]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	611a      	str	r2, [r3, #16]
 80057ba:	e021      	b.n	8005800 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057bc:	893b      	ldrh	r3, [r7, #8]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057cc:	6a39      	ldr	r1, [r7, #32]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f938 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d107      	bne.n	80057f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e005      	b.n	8005802 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057f6:	893b      	ldrh	r3, [r7, #8]
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	00010002 	.word	0x00010002

08005810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005820:	e048      	b.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d044      	beq.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fe fa31 	bl	8003c90 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d139      	bne.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	0c1b      	lsrs	r3, r3, #16
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d10d      	bne.n	8005866 <I2C_WaitOnFlagUntilTimeout+0x56>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	43da      	mvns	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4013      	ands	r3, r2
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	e00c      	b.n	8005880 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	43da      	mvns	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	429a      	cmp	r2, r3
 8005884:	d116      	bne.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e023      	b.n	80058fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10d      	bne.n	80058da <I2C_WaitOnFlagUntilTimeout+0xca>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf0c      	ite	eq
 80058d0:	2301      	moveq	r3, #1
 80058d2:	2300      	movne	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	e00c      	b.n	80058f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	43da      	mvns	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d093      	beq.n	8005822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005912:	e071      	b.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005922:	d123      	bne.n	800596c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005932:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800593c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	f043 0204 	orr.w	r2, r3, #4
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e067      	b.n	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d041      	beq.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fe f98c 	bl	8003c90 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d136      	bne.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	0c1b      	lsrs	r3, r3, #16
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10c      	bne.n	80059ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	43da      	mvns	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4013      	ands	r3, r2
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bf14      	ite	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	2300      	moveq	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	e00b      	b.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	43da      	mvns	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4013      	ands	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e021      	b.n	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10c      	bne.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	43da      	mvns	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e00b      	b.n	8005a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf14      	ite	ne
 8005a2e:	2301      	movne	r3, #1
 8005a30:	2300      	moveq	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f af6d 	bne.w	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a50:	e034      	b.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f886 	bl	8005b64 <I2C_IsAcknowledgeFailed>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e034      	b.n	8005acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d028      	beq.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fe f911 	bl	8003c90 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11d      	bne.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8a:	2b80      	cmp	r3, #128	@ 0x80
 8005a8c:	d016      	beq.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	f043 0220 	orr.w	r2, r3, #32
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e007      	b.n	8005acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac6:	2b80      	cmp	r3, #128	@ 0x80
 8005ac8:	d1c3      	bne.n	8005a52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ae0:	e034      	b.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f83e 	bl	8005b64 <I2C_IsAcknowledgeFailed>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e034      	b.n	8005b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d028      	beq.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fe f8c9 	bl	8003c90 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11d      	bne.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d016      	beq.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e007      	b.n	8005b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d1c3      	bne.n	8005ae2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7a:	d11b      	bne.n	8005bb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	f043 0204 	orr.w	r2, r3, #4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e267      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d075      	beq.n	8005cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005be2:	4b88      	ldr	r3, [pc, #544]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d00c      	beq.n	8005c08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bee:	4b85      	ldr	r3, [pc, #532]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d112      	bne.n	8005c20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfa:	4b82      	ldr	r3, [pc, #520]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c06:	d10b      	bne.n	8005c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c08:	4b7e      	ldr	r3, [pc, #504]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d05b      	beq.n	8005ccc <HAL_RCC_OscConfig+0x108>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d157      	bne.n	8005ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e242      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c28:	d106      	bne.n	8005c38 <HAL_RCC_OscConfig+0x74>
 8005c2a:	4b76      	ldr	r3, [pc, #472]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a75      	ldr	r2, [pc, #468]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e01d      	b.n	8005c74 <HAL_RCC_OscConfig+0xb0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x98>
 8005c42:	4b70      	ldr	r3, [pc, #448]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a6f      	ldr	r2, [pc, #444]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a6c      	ldr	r2, [pc, #432]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e00b      	b.n	8005c74 <HAL_RCC_OscConfig+0xb0>
 8005c5c:	4b69      	ldr	r3, [pc, #420]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a68      	ldr	r2, [pc, #416]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4b66      	ldr	r3, [pc, #408]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a65      	ldr	r2, [pc, #404]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d013      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fe f808 	bl	8003c90 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c84:	f7fe f804 	bl	8003c90 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	@ 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e207      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	4b5b      	ldr	r3, [pc, #364]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0xc0>
 8005ca2:	e014      	b.n	8005cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca4:	f7fd fff4 	bl	8003c90 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cac:	f7fd fff0 	bl	8003c90 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	@ 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e1f3      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cbe:	4b51      	ldr	r3, [pc, #324]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f0      	bne.n	8005cac <HAL_RCC_OscConfig+0xe8>
 8005cca:	e000      	b.n	8005cce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d063      	beq.n	8005da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cda:	4b4a      	ldr	r3, [pc, #296]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce6:	4b47      	ldr	r3, [pc, #284]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d11c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf2:	4b44      	ldr	r3, [pc, #272]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d116      	bne.n	8005d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfe:	4b41      	ldr	r3, [pc, #260]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_RCC_OscConfig+0x152>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d001      	beq.n	8005d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e1c7      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d16:	4b3b      	ldr	r3, [pc, #236]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4937      	ldr	r1, [pc, #220]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2a:	e03a      	b.n	8005da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d020      	beq.n	8005d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d34:	4b34      	ldr	r3, [pc, #208]	@ (8005e08 <HAL_RCC_OscConfig+0x244>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3a:	f7fd ffa9 	bl	8003c90 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d42:	f7fd ffa5 	bl	8003c90 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e1a8      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d54:	4b2b      	ldr	r3, [pc, #172]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f0      	beq.n	8005d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d60:	4b28      	ldr	r3, [pc, #160]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4925      	ldr	r1, [pc, #148]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	600b      	str	r3, [r1, #0]
 8005d74:	e015      	b.n	8005da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d76:	4b24      	ldr	r3, [pc, #144]	@ (8005e08 <HAL_RCC_OscConfig+0x244>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fd ff88 	bl	8003c90 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d84:	f7fd ff84 	bl	8003c90 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e187      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d96:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d036      	beq.n	8005e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db6:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <HAL_RCC_OscConfig+0x248>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbc:	f7fd ff68 	bl	8003c90 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc4:	f7fd ff64 	bl	8003c90 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e167      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x200>
 8005de2:	e01b      	b.n	8005e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de4:	4b09      	ldr	r3, [pc, #36]	@ (8005e0c <HAL_RCC_OscConfig+0x248>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dea:	f7fd ff51 	bl	8003c90 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df0:	e00e      	b.n	8005e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df2:	f7fd ff4d 	bl	8003c90 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d907      	bls.n	8005e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e150      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
 8005e04:	40023800 	.word	0x40023800
 8005e08:	42470000 	.word	0x42470000
 8005e0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e10:	4b88      	ldr	r3, [pc, #544]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8097 	beq.w	8005f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e2e:	4b81      	ldr	r3, [pc, #516]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	4a7c      	ldr	r2, [pc, #496]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e52:	60bb      	str	r3, [r7, #8]
 8005e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5a:	4b77      	ldr	r3, [pc, #476]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d118      	bne.n	8005e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e66:	4b74      	ldr	r3, [pc, #464]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a73      	ldr	r2, [pc, #460]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e72:	f7fd ff0d 	bl	8003c90 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7a:	f7fd ff09 	bl	8003c90 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e10c      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d106      	bne.n	8005eae <HAL_RCC_OscConfig+0x2ea>
 8005ea0:	4b64      	ldr	r3, [pc, #400]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea4:	4a63      	ldr	r2, [pc, #396]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eac:	e01c      	b.n	8005ee8 <HAL_RCC_OscConfig+0x324>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x30c>
 8005eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eba:	4a5e      	ldr	r2, [pc, #376]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	f043 0304 	orr.w	r3, r3, #4
 8005ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ece:	e00b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x324>
 8005ed0:	4b58      	ldr	r3, [pc, #352]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed4:	4a57      	ldr	r2, [pc, #348]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005edc:	4b55      	ldr	r3, [pc, #340]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee0:	4a54      	ldr	r2, [pc, #336]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	f023 0304 	bic.w	r3, r3, #4
 8005ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef0:	f7fd fece 	bl	8003c90 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef8:	f7fd feca 	bl	8003c90 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0cb      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0e:	4b49      	ldr	r3, [pc, #292]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ee      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x334>
 8005f1a:	e014      	b.n	8005f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1c:	f7fd feb8 	bl	8003c90 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f22:	e00a      	b.n	8005f3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f24:	f7fd feb4 	bl	8003c90 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e0b5      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1ee      	bne.n	8005f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d105      	bne.n	8005f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f4c:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	4a38      	ldr	r2, [pc, #224]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80a1 	beq.w	80060a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f62:	4b34      	ldr	r3, [pc, #208]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d05c      	beq.n	8006028 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d141      	bne.n	8005ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f76:	4b31      	ldr	r3, [pc, #196]	@ (800603c <HAL_RCC_OscConfig+0x478>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fd fe88 	bl	8003c90 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fd fe84 	bl	8003c90 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e087      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	4b27      	ldr	r3, [pc, #156]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	019b      	lsls	r3, r3, #6
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	491b      	ldr	r1, [pc, #108]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800603c <HAL_RCC_OscConfig+0x478>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd2:	f7fd fe5d 	bl	8003c90 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fda:	f7fd fe59 	bl	8003c90 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e05c      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fec:	4b11      	ldr	r3, [pc, #68]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x416>
 8005ff8:	e054      	b.n	80060a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffa:	4b10      	ldr	r3, [pc, #64]	@ (800603c <HAL_RCC_OscConfig+0x478>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006000:	f7fd fe46 	bl	8003c90 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006008:	f7fd fe42 	bl	8003c90 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e045      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601a:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x444>
 8006026:	e03d      	b.n	80060a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e038      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
 8006034:	40023800 	.word	0x40023800
 8006038:	40007000 	.word	0x40007000
 800603c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006040:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <HAL_RCC_OscConfig+0x4ec>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d028      	beq.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006058:	429a      	cmp	r2, r3
 800605a:	d121      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006066:	429a      	cmp	r2, r3
 8006068:	d11a      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006078:	4293      	cmp	r3, r2
 800607a:	d111      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	3b01      	subs	r3, #1
 800608a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800608c:	429a      	cmp	r2, r3
 800608e:	d107      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800

080060b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0cc      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c8:	4b68      	ldr	r3, [pc, #416]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d90c      	bls.n	80060f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d6:	4b65      	ldr	r3, [pc, #404]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b63      	ldr	r3, [pc, #396]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0b8      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d020      	beq.n	800613e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006108:	4b59      	ldr	r3, [pc, #356]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a58      	ldr	r2, [pc, #352]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006112:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006120:	4b53      	ldr	r3, [pc, #332]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a52      	ldr	r2, [pc, #328]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800612a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800612c:	4b50      	ldr	r3, [pc, #320]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	494d      	ldr	r1, [pc, #308]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d044      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	4b47      	ldr	r3, [pc, #284]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d119      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e07f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d003      	beq.n	8006172 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616e:	2b03      	cmp	r3, #3
 8006170:	d107      	bne.n	8006182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006172:	4b3f      	ldr	r3, [pc, #252]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e06f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006182:	4b3b      	ldr	r3, [pc, #236]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e067      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006192:	4b37      	ldr	r3, [pc, #220]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 0203 	bic.w	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4934      	ldr	r1, [pc, #208]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a4:	f7fd fd74 	bl	8003c90 <HAL_GetTick>
 80061a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ac:	f7fd fd70 	bl	8003c90 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e04f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 020c 	and.w	r2, r3, #12
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d1eb      	bne.n	80061ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061d4:	4b25      	ldr	r3, [pc, #148]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d20c      	bcs.n	80061fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e2:	4b22      	ldr	r3, [pc, #136]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ea:	4b20      	ldr	r3, [pc, #128]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e032      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006208:	4b19      	ldr	r3, [pc, #100]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4916      	ldr	r1, [pc, #88]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	4313      	orrs	r3, r2
 8006218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006226:	4b12      	ldr	r3, [pc, #72]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	490e      	ldr	r1, [pc, #56]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800623a:	f000 f821 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 800623e:	4602      	mov	r2, r0
 8006240:	4b0b      	ldr	r3, [pc, #44]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	490a      	ldr	r1, [pc, #40]	@ (8006274 <HAL_RCC_ClockConfig+0x1c0>)
 800624c:	5ccb      	ldrb	r3, [r1, r3]
 800624e:	fa22 f303 	lsr.w	r3, r2, r3
 8006252:	4a09      	ldr	r2, [pc, #36]	@ (8006278 <HAL_RCC_ClockConfig+0x1c4>)
 8006254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006256:	4b09      	ldr	r3, [pc, #36]	@ (800627c <HAL_RCC_ClockConfig+0x1c8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f7fd fcd4 	bl	8003c08 <HAL_InitTick>

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40023c00 	.word	0x40023c00
 8006270:	40023800 	.word	0x40023800
 8006274:	0800e2d8 	.word	0x0800e2d8
 8006278:	20000088 	.word	0x20000088
 800627c:	2000008c 	.word	0x2000008c

08006280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006284:	b094      	sub	sp, #80	@ 0x50
 8006286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006298:	4b79      	ldr	r3, [pc, #484]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 030c 	and.w	r3, r3, #12
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d00d      	beq.n	80062c0 <HAL_RCC_GetSysClockFreq+0x40>
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	f200 80e1 	bhi.w	800646c <HAL_RCC_GetSysClockFreq+0x1ec>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0x34>
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d003      	beq.n	80062ba <HAL_RCC_GetSysClockFreq+0x3a>
 80062b2:	e0db      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b4:	4b73      	ldr	r3, [pc, #460]	@ (8006484 <HAL_RCC_GetSysClockFreq+0x204>)
 80062b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b8:	e0db      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ba:	4b73      	ldr	r3, [pc, #460]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x208>)
 80062bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062be:	e0d8      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d063      	beq.n	800639e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	099b      	lsrs	r3, r3, #6
 80062dc:	2200      	movs	r2, #0
 80062de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ea:	2300      	movs	r3, #0
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062f2:	4622      	mov	r2, r4
 80062f4:	462b      	mov	r3, r5
 80062f6:	f04f 0000 	mov.w	r0, #0
 80062fa:	f04f 0100 	mov.w	r1, #0
 80062fe:	0159      	lsls	r1, r3, #5
 8006300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006304:	0150      	lsls	r0, r2, #5
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4621      	mov	r1, r4
 800630c:	1a51      	subs	r1, r2, r1
 800630e:	6139      	str	r1, [r7, #16]
 8006310:	4629      	mov	r1, r5
 8006312:	eb63 0301 	sbc.w	r3, r3, r1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006324:	4659      	mov	r1, fp
 8006326:	018b      	lsls	r3, r1, #6
 8006328:	4651      	mov	r1, sl
 800632a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800632e:	4651      	mov	r1, sl
 8006330:	018a      	lsls	r2, r1, #6
 8006332:	4651      	mov	r1, sl
 8006334:	ebb2 0801 	subs.w	r8, r2, r1
 8006338:	4659      	mov	r1, fp
 800633a:	eb63 0901 	sbc.w	r9, r3, r1
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800634a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800634e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006352:	4690      	mov	r8, r2
 8006354:	4699      	mov	r9, r3
 8006356:	4623      	mov	r3, r4
 8006358:	eb18 0303 	adds.w	r3, r8, r3
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	462b      	mov	r3, r5
 8006360:	eb49 0303 	adc.w	r3, r9, r3
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	f04f 0300 	mov.w	r3, #0
 800636e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006372:	4629      	mov	r1, r5
 8006374:	024b      	lsls	r3, r1, #9
 8006376:	4621      	mov	r1, r4
 8006378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800637c:	4621      	mov	r1, r4
 800637e:	024a      	lsls	r2, r1, #9
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006386:	2200      	movs	r2, #0
 8006388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800638a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800638c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006390:	f7fa fc82 	bl	8000c98 <__aeabi_uldivmod>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4613      	mov	r3, r2
 800639a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800639c:	e058      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800639e:	4b38      	ldr	r3, [pc, #224]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	099b      	lsrs	r3, r3, #6
 80063a4:	2200      	movs	r2, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	4611      	mov	r1, r2
 80063aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	2300      	movs	r3, #0
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	f04f 0000 	mov.w	r0, #0
 80063c0:	f04f 0100 	mov.w	r1, #0
 80063c4:	0159      	lsls	r1, r3, #5
 80063c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ca:	0150      	lsls	r0, r2, #5
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4641      	mov	r1, r8
 80063d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80063d6:	4649      	mov	r1, r9
 80063d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063f0:	ebb2 040a 	subs.w	r4, r2, sl
 80063f4:	eb63 050b 	sbc.w	r5, r3, fp
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	00eb      	lsls	r3, r5, #3
 8006402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006406:	00e2      	lsls	r2, r4, #3
 8006408:	4614      	mov	r4, r2
 800640a:	461d      	mov	r5, r3
 800640c:	4643      	mov	r3, r8
 800640e:	18e3      	adds	r3, r4, r3
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	464b      	mov	r3, r9
 8006414:	eb45 0303 	adc.w	r3, r5, r3
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006426:	4629      	mov	r1, r5
 8006428:	028b      	lsls	r3, r1, #10
 800642a:	4621      	mov	r1, r4
 800642c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006430:	4621      	mov	r1, r4
 8006432:	028a      	lsls	r2, r1, #10
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643a:	2200      	movs	r2, #0
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	61fa      	str	r2, [r7, #28]
 8006440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006444:	f7fa fc28 	bl	8000c98 <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4613      	mov	r3, r2
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006450:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	3301      	adds	r3, #1
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800646a:	e002      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <HAL_RCC_GetSysClockFreq+0x204>)
 800646e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006474:	4618      	mov	r0, r3
 8006476:	3750      	adds	r7, #80	@ 0x50
 8006478:	46bd      	mov	sp, r7
 800647a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647e:	bf00      	nop
 8006480:	40023800 	.word	0x40023800
 8006484:	00f42400 	.word	0x00f42400
 8006488:	007a1200 	.word	0x007a1200

0800648c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006490:	4b03      	ldr	r3, [pc, #12]	@ (80064a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000088 	.word	0x20000088

080064a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064a8:	f7ff fff0 	bl	800648c <HAL_RCC_GetHCLKFreq>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	0a9b      	lsrs	r3, r3, #10
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	4903      	ldr	r1, [pc, #12]	@ (80064c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ba:	5ccb      	ldrb	r3, [r1, r3]
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40023800 	.word	0x40023800
 80064c8:	0800e2e8 	.word	0x0800e2e8

080064cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064d0:	f7ff ffdc 	bl	800648c <HAL_RCC_GetHCLKFreq>
 80064d4:	4602      	mov	r2, r0
 80064d6:	4b05      	ldr	r3, [pc, #20]	@ (80064ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	0b5b      	lsrs	r3, r3, #13
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	4903      	ldr	r1, [pc, #12]	@ (80064f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e2:	5ccb      	ldrb	r3, [r1, r3]
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40023800 	.word	0x40023800
 80064f0:	0800e2e8 	.word	0x0800e2e8

080064f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e07b      	b.n	80065fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d108      	bne.n	8006520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006516:	d009      	beq.n	800652c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	61da      	str	r2, [r3, #28]
 800651e:	e005      	b.n	800652c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fd f806 	bl	8003558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b0:	ea42 0103 	orr.w	r1, r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	f003 0104 	and.w	r1, r3, #4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d2:	f003 0210 	and.w	r2, r3, #16
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b088      	sub	sp, #32
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006616:	f7fd fb3b 	bl	8003c90 <HAL_GetTick>
 800661a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d001      	beq.n	8006630 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
 800662e:	e12a      	b.n	8006886 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_SPI_Transmit+0x36>
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e122      	b.n	8006886 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_SPI_Transmit+0x48>
 800664a:	2302      	movs	r3, #2
 800664c:	e11b      	b.n	8006886 <HAL_SPI_Transmit+0x280>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2203      	movs	r2, #3
 800665a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800669c:	d10f      	bne.n	80066be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c8:	2b40      	cmp	r3, #64	@ 0x40
 80066ca:	d007      	beq.n	80066dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e4:	d152      	bne.n	800678c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_SPI_Transmit+0xee>
 80066ee:	8b7b      	ldrh	r3, [r7, #26]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d145      	bne.n	8006780 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f8:	881a      	ldrh	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006704:	1c9a      	adds	r2, r3, #2
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006718:	e032      	b.n	8006780 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b02      	cmp	r3, #2
 8006726:	d112      	bne.n	800674e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	1c9a      	adds	r2, r3, #2
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800674c:	e018      	b.n	8006780 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800674e:	f7fd fa9f 	bl	8003c90 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d803      	bhi.n	8006766 <HAL_SPI_Transmit+0x160>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d102      	bne.n	800676c <HAL_SPI_Transmit+0x166>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e082      	b.n	8006886 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1c7      	bne.n	800671a <HAL_SPI_Transmit+0x114>
 800678a:	e053      	b.n	8006834 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_SPI_Transmit+0x194>
 8006794:	8b7b      	ldrh	r3, [r7, #26]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d147      	bne.n	800682a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067c0:	e033      	b.n	800682a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d113      	bne.n	80067f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067f6:	e018      	b.n	800682a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f8:	f7fd fa4a 	bl	8003c90 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d803      	bhi.n	8006810 <HAL_SPI_Transmit+0x20a>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d102      	bne.n	8006816 <HAL_SPI_Transmit+0x210>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e02d      	b.n	8006886 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1c6      	bne.n	80067c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fbd9 	bl	8006ff0 <SPI_EndRxTxTransaction>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006884:	2300      	movs	r3, #0
  }
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b088      	sub	sp, #32
 8006892:	af02      	add	r7, sp, #8
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d001      	beq.n	80068ae <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80068aa:	2302      	movs	r3, #2
 80068ac:	e104      	b.n	8006ab8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068b6:	d112      	bne.n	80068de <HAL_SPI_Receive+0x50>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10e      	bne.n	80068de <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2204      	movs	r2, #4
 80068c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068c8:	88fa      	ldrh	r2, [r7, #6]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	4613      	mov	r3, r2
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f8f3 	bl	8006ac0 <HAL_SPI_TransmitReceive>
 80068da:	4603      	mov	r3, r0
 80068dc:	e0ec      	b.n	8006ab8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068de:	f7fd f9d7 	bl	8003c90 <HAL_GetTick>
 80068e2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_Receive+0x62>
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0e1      	b.n	8006ab8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_SPI_Receive+0x74>
 80068fe:	2302      	movs	r3, #2
 8006900:	e0da      	b.n	8006ab8 <HAL_SPI_Receive+0x22a>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2204      	movs	r2, #4
 800690e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006950:	d10f      	bne.n	8006972 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006970:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697c:	2b40      	cmp	r3, #64	@ 0x40
 800697e:	d007      	beq.n	8006990 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800698e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d170      	bne.n	8006a7a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006998:	e035      	b.n	8006a06 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d115      	bne.n	80069d4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f103 020c 	add.w	r2, r3, #12
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b4:	7812      	ldrb	r2, [r2, #0]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069d2:	e018      	b.n	8006a06 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d4:	f7fd f95c 	bl	8003c90 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d803      	bhi.n	80069ec <HAL_SPI_Receive+0x15e>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Receive+0x164>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e058      	b.n	8006ab8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1c4      	bne.n	800699a <HAL_SPI_Receive+0x10c>
 8006a10:	e038      	b.n	8006a84 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d113      	bne.n	8006a48 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2a:	b292      	uxth	r2, r2
 8006a2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a46:	e018      	b.n	8006a7a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a48:	f7fd f922 	bl	8003c90 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d803      	bhi.n	8006a60 <HAL_SPI_Receive+0x1d2>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5e:	d102      	bne.n	8006a66 <HAL_SPI_Receive+0x1d8>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e01e      	b.n	8006ab8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1c6      	bne.n	8006a12 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fa4b 	bl	8006f24 <SPI_EndRxTransaction>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
  }
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	@ 0x28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ad2:	f7fd f8dd 	bl	8003c90 <HAL_GetTick>
 8006ad6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ade:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aea:	7ffb      	ldrb	r3, [r7, #31]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d00c      	beq.n	8006b0a <HAL_SPI_TransmitReceive+0x4a>
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006af6:	d106      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x46>
 8006b00:	7ffb      	ldrb	r3, [r7, #31]
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d001      	beq.n	8006b0a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
 8006b08:	e17f      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x5c>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x5c>
 8006b16:	887b      	ldrh	r3, [r7, #2]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e174      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x6e>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e16d      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x34a>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d003      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2205      	movs	r2, #5
 8006b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	887a      	ldrh	r2, [r7, #2]
 8006b5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	887a      	ldrh	r2, [r7, #2]
 8006b60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	887a      	ldrh	r2, [r7, #2]
 8006b6c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	887a      	ldrh	r2, [r7, #2]
 8006b72:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8a:	2b40      	cmp	r3, #64	@ 0x40
 8006b8c:	d007      	beq.n	8006b9e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba6:	d17e      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_SPI_TransmitReceive+0xf6>
 8006bb0:	8afb      	ldrh	r3, [r7, #22]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d16c      	bne.n	8006c90 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	881a      	ldrh	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc6:	1c9a      	adds	r2, r3, #2
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bda:	e059      	b.n	8006c90 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d11b      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x162>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d016      	beq.n	8006c22 <HAL_SPI_TransmitReceive+0x162>
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d113      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfe:	881a      	ldrh	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0a:	1c9a      	adds	r2, r3, #2
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d119      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x1a4>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d014      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	b292      	uxth	r2, r2
 8006c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	1c9a      	adds	r2, r3, #2
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c60:	2301      	movs	r3, #1
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c64:	f7fd f814 	bl	8003c90 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d80d      	bhi.n	8006c90 <HAL_SPI_TransmitReceive+0x1d0>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d009      	beq.n	8006c90 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e0bc      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1a0      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x11c>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d19b      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x11c>
 8006ca4:	e082      	b.n	8006dac <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x1f4>
 8006cae:	8afb      	ldrh	r3, [r7, #22]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d171      	bne.n	8006d98 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	7812      	ldrb	r2, [r2, #0]
 8006cc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cda:	e05d      	b.n	8006d98 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d11c      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x264>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d017      	beq.n	8006d24 <HAL_SPI_TransmitReceive+0x264>
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d114      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d119      	bne.n	8006d66 <HAL_SPI_TransmitReceive+0x2a6>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d014      	beq.n	8006d66 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d62:	2301      	movs	r3, #1
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d66:	f7fc ff93 	bl	8003c90 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d803      	bhi.n	8006d7e <HAL_SPI_TransmitReceive+0x2be>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d102      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x2c4>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d109      	bne.n	8006d98 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e038      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d19c      	bne.n	8006cdc <HAL_SPI_TransmitReceive+0x21c>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d197      	bne.n	8006cdc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dac:	6a3a      	ldr	r2, [r7, #32]
 8006dae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f91d 	bl	8006ff0 <SPI_EndRxTxTransaction>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d008      	beq.n	8006dce <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e01d      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006e08:	2300      	movs	r3, #0
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3728      	adds	r7, #40	@ 0x28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e24:	f7fc ff34 	bl	8003c90 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	4413      	add	r3, r2
 8006e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e34:	f7fc ff2c 	bl	8003c90 <HAL_GetTick>
 8006e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e3a:	4b39      	ldr	r3, [pc, #228]	@ (8006f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	015b      	lsls	r3, r3, #5
 8006e40:	0d1b      	lsrs	r3, r3, #20
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	fb02 f303 	mul.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e4a:	e054      	b.n	8006ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e52:	d050      	beq.n	8006ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e54:	f7fc ff1c 	bl	8003c90 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d902      	bls.n	8006e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d13d      	bne.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e82:	d111      	bne.n	8006ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e8c:	d004      	beq.n	8006e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e96:	d107      	bne.n	8006ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eb0:	d10f      	bne.n	8006ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e017      	b.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4013      	ands	r3, r2
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	bf0c      	ite	eq
 8006f06:	2301      	moveq	r3, #1
 8006f08:	2300      	movne	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d19b      	bne.n	8006e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000088 	.word	0x20000088

08006f24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f38:	d111      	bne.n	8006f5e <SPI_EndRxTransaction+0x3a>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f42:	d004      	beq.n	8006f4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f4c:	d107      	bne.n	8006f5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f66:	d12a      	bne.n	8006fbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f70:	d012      	beq.n	8006f98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2180      	movs	r1, #128	@ 0x80
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7ff ff49 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d02d      	beq.n	8006fe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8c:	f043 0220 	orr.w	r2, r3, #32
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e026      	b.n	8006fe6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff ff36 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01a      	beq.n	8006fe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	f043 0220 	orr.w	r2, r3, #32
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e013      	b.n	8006fe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff ff23 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd8:	f043 0220 	orr.w	r2, r3, #32
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e000      	b.n	8006fe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2201      	movs	r2, #1
 8007004:	2102      	movs	r1, #2
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7ff ff04 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e032      	b.n	8007088 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007022:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <SPI_EndRxTxTransaction+0xa0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1b      	ldr	r2, [pc, #108]	@ (8007094 <SPI_EndRxTxTransaction+0xa4>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	0d5b      	lsrs	r3, r3, #21
 800702e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007040:	d112      	bne.n	8007068 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	2180      	movs	r1, #128	@ 0x80
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff fee1 	bl	8006e14 <SPI_WaitFlagStateUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d016      	beq.n	8007086 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e00f      	b.n	8007088 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	3b01      	subs	r3, #1
 8007072:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707e:	2b80      	cmp	r3, #128	@ 0x80
 8007080:	d0f2      	beq.n	8007068 <SPI_EndRxTxTransaction+0x78>
 8007082:	e000      	b.n	8007086 <SPI_EndRxTxTransaction+0x96>
        break;
 8007084:	bf00      	nop
  }

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000088 	.word	0x20000088
 8007094:	165e9f81 	.word	0x165e9f81

08007098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e041      	b.n	800712e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fc fab2 	bl	8003628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f000 fc96 	bl	8007a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d001      	beq.n	8007150 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e03c      	b.n	80071ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1e      	ldr	r2, [pc, #120]	@ (80071d8 <HAL_TIM_Base_Start+0xa0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d018      	beq.n	8007194 <HAL_TIM_Base_Start+0x5c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716a:	d013      	beq.n	8007194 <HAL_TIM_Base_Start+0x5c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1a      	ldr	r2, [pc, #104]	@ (80071dc <HAL_TIM_Base_Start+0xa4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00e      	beq.n	8007194 <HAL_TIM_Base_Start+0x5c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a19      	ldr	r2, [pc, #100]	@ (80071e0 <HAL_TIM_Base_Start+0xa8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <HAL_TIM_Base_Start+0x5c>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a17      	ldr	r2, [pc, #92]	@ (80071e4 <HAL_TIM_Base_Start+0xac>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_TIM_Base_Start+0x5c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a16      	ldr	r2, [pc, #88]	@ (80071e8 <HAL_TIM_Base_Start+0xb0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d111      	bne.n	80071b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b06      	cmp	r3, #6
 80071a4:	d010      	beq.n	80071c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0201 	orr.w	r2, r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b6:	e007      	b.n	80071c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0201 	orr.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800
 80071e4:	40000c00 	.word	0x40000c00
 80071e8:	40014000 	.word	0x40014000

080071ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d001      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e044      	b.n	800728e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1e      	ldr	r2, [pc, #120]	@ (800729c <HAL_TIM_Base_Start_IT+0xb0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d018      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x6c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722e:	d013      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x6c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1a      	ldr	r2, [pc, #104]	@ (80072a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00e      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x6c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a19      	ldr	r2, [pc, #100]	@ (80072a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x6c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a17      	ldr	r2, [pc, #92]	@ (80072a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_TIM_Base_Start_IT+0x6c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a16      	ldr	r2, [pc, #88]	@ (80072ac <HAL_TIM_Base_Start_IT+0xc0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d111      	bne.n	800727c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b06      	cmp	r3, #6
 8007268:	d010      	beq.n	800728c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727a:	e007      	b.n	800728c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40010000 	.word	0x40010000
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40014000 	.word	0x40014000

080072b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e041      	b.n	8007346 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f839 	bl	800734e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f000 fb8a 	bl	8007a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <HAL_TIM_PWM_Start+0x24>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e022      	b.n	80073ce <HAL_TIM_PWM_Start+0x6a>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b04      	cmp	r3, #4
 800738c:	d109      	bne.n	80073a2 <HAL_TIM_PWM_Start+0x3e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b01      	cmp	r3, #1
 8007398:	bf14      	ite	ne
 800739a:	2301      	movne	r3, #1
 800739c:	2300      	moveq	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	e015      	b.n	80073ce <HAL_TIM_PWM_Start+0x6a>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d109      	bne.n	80073bc <HAL_TIM_PWM_Start+0x58>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	bf14      	ite	ne
 80073b4:	2301      	movne	r3, #1
 80073b6:	2300      	moveq	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	e008      	b.n	80073ce <HAL_TIM_PWM_Start+0x6a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	bf14      	ite	ne
 80073c8:	2301      	movne	r3, #1
 80073ca:	2300      	moveq	r3, #0
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e068      	b.n	80074a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <HAL_TIM_PWM_Start+0x82>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073e4:	e013      	b.n	800740e <HAL_TIM_PWM_Start+0xaa>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d104      	bne.n	80073f6 <HAL_TIM_PWM_Start+0x92>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073f4:	e00b      	b.n	800740e <HAL_TIM_PWM_Start+0xaa>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d104      	bne.n	8007406 <HAL_TIM_PWM_Start+0xa2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007404:	e003      	b.n	800740e <HAL_TIM_PWM_Start+0xaa>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2201      	movs	r2, #1
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fda8 	bl	8007f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a23      	ldr	r2, [pc, #140]	@ (80074b0 <HAL_TIM_PWM_Start+0x14c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d107      	bne.n	8007436 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007434:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a1d      	ldr	r2, [pc, #116]	@ (80074b0 <HAL_TIM_PWM_Start+0x14c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d018      	beq.n	8007472 <HAL_TIM_PWM_Start+0x10e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007448:	d013      	beq.n	8007472 <HAL_TIM_PWM_Start+0x10e>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a19      	ldr	r2, [pc, #100]	@ (80074b4 <HAL_TIM_PWM_Start+0x150>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00e      	beq.n	8007472 <HAL_TIM_PWM_Start+0x10e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a17      	ldr	r2, [pc, #92]	@ (80074b8 <HAL_TIM_PWM_Start+0x154>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d009      	beq.n	8007472 <HAL_TIM_PWM_Start+0x10e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a16      	ldr	r2, [pc, #88]	@ (80074bc <HAL_TIM_PWM_Start+0x158>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d004      	beq.n	8007472 <HAL_TIM_PWM_Start+0x10e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a14      	ldr	r2, [pc, #80]	@ (80074c0 <HAL_TIM_PWM_Start+0x15c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d111      	bne.n	8007496 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 0307 	and.w	r3, r3, #7
 800747c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b06      	cmp	r3, #6
 8007482:	d010      	beq.n	80074a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007494:	e007      	b.n	80074a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f042 0201 	orr.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40000400 	.word	0x40000400
 80074b8:	40000800 	.word	0x40000800
 80074bc:	40000c00 	.word	0x40000c00
 80074c0:	40014000 	.word	0x40014000

080074c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d020      	beq.n	8007528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01b      	beq.n	8007528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0202 	mvn.w	r2, #2
 80074f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa5b 	bl	80079ca <HAL_TIM_IC_CaptureCallback>
 8007514:	e005      	b.n	8007522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa4d 	bl	80079b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fa5e 	bl	80079de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d020      	beq.n	8007574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01b      	beq.n	8007574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0204 	mvn.w	r2, #4
 8007544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2202      	movs	r2, #2
 800754a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa35 	bl	80079ca <HAL_TIM_IC_CaptureCallback>
 8007560:	e005      	b.n	800756e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa27 	bl	80079b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fa38 	bl	80079de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d020      	beq.n	80075c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01b      	beq.n	80075c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0208 	mvn.w	r2, #8
 8007590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2204      	movs	r2, #4
 8007596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa0f 	bl	80079ca <HAL_TIM_IC_CaptureCallback>
 80075ac:	e005      	b.n	80075ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fa01 	bl	80079b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa12 	bl	80079de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f003 0310 	and.w	r3, r3, #16
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d020      	beq.n	800760c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f003 0310 	and.w	r3, r3, #16
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01b      	beq.n	800760c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0210 	mvn.w	r2, #16
 80075dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2208      	movs	r2, #8
 80075e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9e9 	bl	80079ca <HAL_TIM_IC_CaptureCallback>
 80075f8:	e005      	b.n	8007606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9db 	bl	80079b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f9ec 	bl	80079de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00c      	beq.n	8007630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d007      	beq.n	8007630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0201 	mvn.w	r2, #1
 8007628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fb fb02 	bl	8002c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00c      	beq.n	8007654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800764c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fd2a 	bl	80080a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d007      	beq.n	8007678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f9bd 	bl	80079f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00c      	beq.n	800769c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d007      	beq.n	800769c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0220 	mvn.w	r2, #32
 8007694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fcfc 	bl	8008094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076be:	2302      	movs	r3, #2
 80076c0:	e0ae      	b.n	8007820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b0c      	cmp	r3, #12
 80076ce:	f200 809f 	bhi.w	8007810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076d2:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	0800770d 	.word	0x0800770d
 80076dc:	08007811 	.word	0x08007811
 80076e0:	08007811 	.word	0x08007811
 80076e4:	08007811 	.word	0x08007811
 80076e8:	0800774d 	.word	0x0800774d
 80076ec:	08007811 	.word	0x08007811
 80076f0:	08007811 	.word	0x08007811
 80076f4:	08007811 	.word	0x08007811
 80076f8:	0800778f 	.word	0x0800778f
 80076fc:	08007811 	.word	0x08007811
 8007700:	08007811 	.word	0x08007811
 8007704:	08007811 	.word	0x08007811
 8007708:	080077cf 	.word	0x080077cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fa04 	bl	8007b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0208 	orr.w	r2, r2, #8
 8007726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0204 	bic.w	r2, r2, #4
 8007736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6999      	ldr	r1, [r3, #24]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	619a      	str	r2, [r3, #24]
      break;
 800774a:	e064      	b.n	8007816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fa4a 	bl	8007bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6999      	ldr	r1, [r3, #24]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	619a      	str	r2, [r3, #24]
      break;
 800778c:	e043      	b.n	8007816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fa95 	bl	8007cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0208 	orr.w	r2, r2, #8
 80077a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0204 	bic.w	r2, r2, #4
 80077b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69d9      	ldr	r1, [r3, #28]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	61da      	str	r2, [r3, #28]
      break;
 80077cc:	e023      	b.n	8007816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fadf 	bl	8007d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69d9      	ldr	r1, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	021a      	lsls	r2, r3, #8
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	61da      	str	r2, [r3, #28]
      break;
 800780e:	e002      	b.n	8007816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
      break;
 8007814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_TIM_ConfigClockSource+0x1c>
 8007840:	2302      	movs	r3, #2
 8007842:	e0b4      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x186>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800786a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800787c:	d03e      	beq.n	80078fc <HAL_TIM_ConfigClockSource+0xd4>
 800787e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007882:	f200 8087 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 8007886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800788a:	f000 8086 	beq.w	800799a <HAL_TIM_ConfigClockSource+0x172>
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007892:	d87f      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 8007894:	2b70      	cmp	r3, #112	@ 0x70
 8007896:	d01a      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0xa6>
 8007898:	2b70      	cmp	r3, #112	@ 0x70
 800789a:	d87b      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	2b60      	cmp	r3, #96	@ 0x60
 800789e:	d050      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x11a>
 80078a0:	2b60      	cmp	r3, #96	@ 0x60
 80078a2:	d877      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 80078a4:	2b50      	cmp	r3, #80	@ 0x50
 80078a6:	d03c      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0xfa>
 80078a8:	2b50      	cmp	r3, #80	@ 0x50
 80078aa:	d873      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 80078ac:	2b40      	cmp	r3, #64	@ 0x40
 80078ae:	d058      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x13a>
 80078b0:	2b40      	cmp	r3, #64	@ 0x40
 80078b2:	d86f      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 80078b4:	2b30      	cmp	r3, #48	@ 0x30
 80078b6:	d064      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x15a>
 80078b8:	2b30      	cmp	r3, #48	@ 0x30
 80078ba:	d86b      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d060      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x15a>
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d867      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d05c      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x15a>
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d05a      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x15a>
 80078cc:	e062      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078de:	f000 fb25 	bl	8007f2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	609a      	str	r2, [r3, #8]
      break;
 80078fa:	e04f      	b.n	800799c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800790c:	f000 fb0e 	bl	8007f2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800791e:	609a      	str	r2, [r3, #8]
      break;
 8007920:	e03c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800792e:	461a      	mov	r2, r3
 8007930:	f000 fa82 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2150      	movs	r1, #80	@ 0x50
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fadb 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007940:	e02c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800794e:	461a      	mov	r2, r3
 8007950:	f000 faa1 	bl	8007e96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2160      	movs	r1, #96	@ 0x60
 800795a:	4618      	mov	r0, r3
 800795c:	f000 facb 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007960:	e01c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800796e:	461a      	mov	r2, r3
 8007970:	f000 fa62 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2140      	movs	r1, #64	@ 0x40
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fabb 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007980:	e00c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f000 fab2 	bl	8007ef6 <TIM_ITRx_SetConfig>
      break;
 8007992:	e003      	b.n	800799c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
      break;
 8007998:	e000      	b.n	800799c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800799a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8007b04 <TIM_Base_SetConfig+0xfc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00f      	beq.n	8007a40 <TIM_Base_SetConfig+0x38>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a26:	d00b      	beq.n	8007a40 <TIM_Base_SetConfig+0x38>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a37      	ldr	r2, [pc, #220]	@ (8007b08 <TIM_Base_SetConfig+0x100>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d007      	beq.n	8007a40 <TIM_Base_SetConfig+0x38>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a36      	ldr	r2, [pc, #216]	@ (8007b0c <TIM_Base_SetConfig+0x104>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d003      	beq.n	8007a40 <TIM_Base_SetConfig+0x38>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a35      	ldr	r2, [pc, #212]	@ (8007b10 <TIM_Base_SetConfig+0x108>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d108      	bne.n	8007a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a2b      	ldr	r2, [pc, #172]	@ (8007b04 <TIM_Base_SetConfig+0xfc>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d01b      	beq.n	8007a92 <TIM_Base_SetConfig+0x8a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a60:	d017      	beq.n	8007a92 <TIM_Base_SetConfig+0x8a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a28      	ldr	r2, [pc, #160]	@ (8007b08 <TIM_Base_SetConfig+0x100>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d013      	beq.n	8007a92 <TIM_Base_SetConfig+0x8a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a27      	ldr	r2, [pc, #156]	@ (8007b0c <TIM_Base_SetConfig+0x104>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00f      	beq.n	8007a92 <TIM_Base_SetConfig+0x8a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a26      	ldr	r2, [pc, #152]	@ (8007b10 <TIM_Base_SetConfig+0x108>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <TIM_Base_SetConfig+0x8a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a25      	ldr	r2, [pc, #148]	@ (8007b14 <TIM_Base_SetConfig+0x10c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d007      	beq.n	8007a92 <TIM_Base_SetConfig+0x8a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a24      	ldr	r2, [pc, #144]	@ (8007b18 <TIM_Base_SetConfig+0x110>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_Base_SetConfig+0x8a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a23      	ldr	r2, [pc, #140]	@ (8007b1c <TIM_Base_SetConfig+0x114>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d108      	bne.n	8007aa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a0e      	ldr	r2, [pc, #56]	@ (8007b04 <TIM_Base_SetConfig+0xfc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d103      	bne.n	8007ad8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d105      	bne.n	8007af6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f023 0201 	bic.w	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	611a      	str	r2, [r3, #16]
  }
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40000400 	.word	0x40000400
 8007b0c:	40000800 	.word	0x40000800
 8007b10:	40000c00 	.word	0x40000c00
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800

08007b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	f023 0201 	bic.w	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 0302 	bic.w	r3, r3, #2
 8007b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	@ (8007be8 <TIM_OC1_SetConfig+0xc8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d10c      	bne.n	8007b96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f023 0308 	bic.w	r3, r3, #8
 8007b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f023 0304 	bic.w	r3, r3, #4
 8007b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a13      	ldr	r2, [pc, #76]	@ (8007be8 <TIM_OC1_SetConfig+0xc8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d111      	bne.n	8007bc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	621a      	str	r2, [r3, #32]
}
 8007bdc:	bf00      	nop
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40010000 	.word	0x40010000

08007bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f023 0210 	bic.w	r2, r3, #16
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f023 0320 	bic.w	r3, r3, #32
 8007c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc0 <TIM_OC2_SetConfig+0xd4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d10d      	bne.n	8007c68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a15      	ldr	r2, [pc, #84]	@ (8007cc0 <TIM_OC2_SetConfig+0xd4>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d113      	bne.n	8007c98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40010000 	.word	0x40010000

08007cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0303 	bic.w	r3, r3, #3
 8007cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <TIM_OC3_SetConfig+0xd0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d10d      	bne.n	8007d3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a14      	ldr	r2, [pc, #80]	@ (8007d94 <TIM_OC3_SetConfig+0xd0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d113      	bne.n	8007d6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	621a      	str	r2, [r3, #32]
}
 8007d88:	bf00      	nop
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	40010000 	.word	0x40010000

08007d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	031b      	lsls	r3, r3, #12
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a10      	ldr	r2, [pc, #64]	@ (8007e34 <TIM_OC4_SetConfig+0x9c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d109      	bne.n	8007e0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	019b      	lsls	r3, r3, #6
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	621a      	str	r2, [r3, #32]
}
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40010000 	.word	0x40010000

08007e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	f023 0201 	bic.w	r2, r3, #1
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 030a 	bic.w	r3, r3, #10
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	621a      	str	r2, [r3, #32]
}
 8007e8a:	bf00      	nop
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b087      	sub	sp, #28
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f023 0210 	bic.w	r2, r3, #16
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ed2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f043 0307 	orr.w	r3, r3, #7
 8007f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	609a      	str	r2, [r3, #8]
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	021a      	lsls	r2, r3, #8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	609a      	str	r2, [r3, #8]
}
 8007f60:	bf00      	nop
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	2201      	movs	r2, #1
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1a      	ldr	r2, [r3, #32]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	401a      	ands	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f003 031f 	and.w	r3, r3, #31
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e050      	b.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1c      	ldr	r2, [pc, #112]	@ (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d018      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800801c:	d013      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a18      	ldr	r2, [pc, #96]	@ (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00e      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d009      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a15      	ldr	r2, [pc, #84]	@ (800808c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d004      	beq.n	8008046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a13      	ldr	r2, [pc, #76]	@ (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d10c      	bne.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800804c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4313      	orrs	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000
 8008084:	40000400 	.word	0x40000400
 8008088:	40000800 	.word	0x40000800
 800808c:	40000c00 	.word	0x40000c00
 8008090:	40014000 	.word	0x40014000

08008094 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e042      	b.n	8008154 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fb fb88 	bl	80037f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2224      	movs	r2, #36	@ 0x24
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fdf3 	bl	8008cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691a      	ldr	r2, [r3, #16]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08a      	sub	sp, #40	@ 0x28
 8008160:	af02      	add	r7, sp, #8
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b20      	cmp	r3, #32
 800817a:	d175      	bne.n	8008268 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <HAL_UART_Transmit+0x2c>
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e06e      	b.n	800826a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2221      	movs	r2, #33	@ 0x21
 8008196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800819a:	f7fb fd79 	bl	8003c90 <HAL_GetTick>
 800819e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b4:	d108      	bne.n	80081c8 <HAL_UART_Transmit+0x6c>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d104      	bne.n	80081c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	e003      	b.n	80081d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081d0:	e02e      	b.n	8008230 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2200      	movs	r2, #0
 80081da:	2180      	movs	r1, #128	@ 0x80
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 fb55 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e03a      	b.n	800826a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	3302      	adds	r3, #2
 800820e:	61bb      	str	r3, [r7, #24]
 8008210:	e007      	b.n	8008222 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3301      	adds	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008226:	b29b      	uxth	r3, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1cb      	bne.n	80081d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2200      	movs	r2, #0
 8008242:	2140      	movs	r1, #64	@ 0x40
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fb21 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e006      	b.n	800826a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	e000      	b.n	800826a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008268:	2302      	movs	r3, #2
  }
}
 800826a:	4618      	mov	r0, r3
 800826c:	3720      	adds	r7, #32
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b08c      	sub	sp, #48	@ 0x30
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	4613      	mov	r3, r2
 800827e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b20      	cmp	r3, #32
 800828a:	d14a      	bne.n	8008322 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e043      	b.n	8008324 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	461a      	mov	r2, r3
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fb45 	bl	800893e <UART_Start_Receive_IT>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80082ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d12c      	bne.n	800831c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d125      	bne.n	8008316 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	617b      	str	r3, [r7, #20]
   return(result);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f043 0310 	orr.w	r3, r3, #16
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008300:	627a      	str	r2, [r7, #36]	@ 0x24
 8008302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6a39      	ldr	r1, [r7, #32]
 8008306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	61fb      	str	r3, [r7, #28]
   return(result);
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e5      	bne.n	80082e0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8008314:	e002      	b.n	800831c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800831c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008320:	e000      	b.n	8008324 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008322:	2302      	movs	r3, #2
  }
}
 8008324:	4618      	mov	r0, r3
 8008326:	3730      	adds	r7, #48	@ 0x30
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b0ba      	sub	sp, #232	@ 0xe8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008352:	2300      	movs	r3, #0
 8008354:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008358:	2300      	movs	r3, #0
 800835a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800835e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800836a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10f      	bne.n	8008392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <HAL_UART_IRQHandler+0x66>
 800837e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fbf0 	bl	8008b70 <UART_Receive_IT>
      return;
 8008390:	e25b      	b.n	800884a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80de 	beq.w	8008558 <HAL_UART_IRQHandler+0x22c>
 800839c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d106      	bne.n	80083b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80d1 	beq.w	8008558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <HAL_UART_IRQHandler+0xae>
 80083c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d2:	f043 0201 	orr.w	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <HAL_UART_IRQHandler+0xd2>
 80083e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f6:	f043 0202 	orr.w	r2, r3, #2
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <HAL_UART_IRQHandler+0xf6>
 800840a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841a:	f043 0204 	orr.w	r2, r3, #4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d011      	beq.n	8008452 <HAL_UART_IRQHandler+0x126>
 800842e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800843a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844a:	f043 0208 	orr.w	r2, r3, #8
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 81f2 	beq.w	8008840 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800845c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <HAL_UART_IRQHandler+0x14e>
 8008468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb7b 	bl	8008b70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008484:	2b40      	cmp	r3, #64	@ 0x40
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d103      	bne.n	80084a6 <HAL_UART_IRQHandler+0x17a>
 800849e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d04f      	beq.n	8008546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa83 	bl	80089b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b6:	2b40      	cmp	r3, #64	@ 0x40
 80084b8:	d141      	bne.n	800853e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3314      	adds	r3, #20
 80084c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3314      	adds	r3, #20
 80084e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80084f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80084fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1d9      	bne.n	80084ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d013      	beq.n	8008536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008512:	4a7e      	ldr	r2, [pc, #504]	@ (800870c <HAL_UART_IRQHandler+0x3e0>)
 8008514:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800851a:	4618      	mov	r0, r3
 800851c:	f7fc fa62 	bl	80049e4 <HAL_DMA_Abort_IT>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d016      	beq.n	8008554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008534:	e00e      	b.n	8008554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f99e 	bl	8008878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853c:	e00a      	b.n	8008554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f99a 	bl	8008878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008544:	e006      	b.n	8008554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f996 	bl	8008878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008552:	e175      	b.n	8008840 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008554:	bf00      	nop
    return;
 8008556:	e173      	b.n	8008840 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855c:	2b01      	cmp	r3, #1
 800855e:	f040 814f 	bne.w	8008800 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008566:	f003 0310 	and.w	r3, r3, #16
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 8148 	beq.w	8008800 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8141 	beq.w	8008800 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800857e:	2300      	movs	r3, #0
 8008580:	60bb      	str	r3, [r7, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60bb      	str	r3, [r7, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	60bb      	str	r3, [r7, #8]
 8008592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800859e:	2b40      	cmp	r3, #64	@ 0x40
 80085a0:	f040 80b6 	bne.w	8008710 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8145 	beq.w	8008844 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80085be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085c2:	429a      	cmp	r2, r3
 80085c4:	f080 813e 	bcs.w	8008844 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085da:	f000 8088 	beq.w	80086ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	330c      	adds	r3, #12
 80085e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80085f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	330c      	adds	r3, #12
 8008606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800860a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800860e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008616:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1d9      	bne.n	80085de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3314      	adds	r3, #20
 8008630:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800863a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3314      	adds	r3, #20
 800864a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800864e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008652:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008656:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e1      	bne.n	800862a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3314      	adds	r3, #20
 800866c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800867c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3314      	adds	r3, #20
 8008686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800868a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800868c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008690:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e3      	bne.n	8008666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	330c      	adds	r3, #12
 80086b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086be:	f023 0310 	bic.w	r3, r3, #16
 80086c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	330c      	adds	r3, #12
 80086cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80086d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80086d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e3      	bne.n	80086ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fc f90b 	bl	8004904 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2202      	movs	r2, #2
 80086f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	b29b      	uxth	r3, r3
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7f9 fd51 	bl	80021ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800870a:	e09b      	b.n	8008844 <HAL_UART_IRQHandler+0x518>
 800870c:	08008a79 	.word	0x08008a79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008718:	b29b      	uxth	r3, r3
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 808e 	beq.w	8008848 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800872c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8089 	beq.w	8008848 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	330c      	adds	r3, #12
 800873c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800874c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800875a:	647a      	str	r2, [r7, #68]	@ 0x44
 800875c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e3      	bne.n	8008736 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	623b      	str	r3, [r7, #32]
   return(result);
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3314      	adds	r3, #20
 800878e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008792:	633a      	str	r2, [r7, #48]	@ 0x30
 8008794:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e3      	bne.n	800876e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	330c      	adds	r3, #12
 80087ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0310 	bic.w	r3, r3, #16
 80087ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	330c      	adds	r3, #12
 80087d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80087d8:	61fa      	str	r2, [r7, #28]
 80087da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	69b9      	ldr	r1, [r7, #24]
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	617b      	str	r3, [r7, #20]
   return(result);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e3      	bne.n	80087b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7f9 fcd7 	bl	80021ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087fe:	e023      	b.n	8008848 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <HAL_UART_IRQHandler+0x4f4>
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f941 	bl	8008aa0 <UART_Transmit_IT>
    return;
 800881e:	e014      	b.n	800884a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00e      	beq.n	800884a <HAL_UART_IRQHandler+0x51e>
 800882c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d008      	beq.n	800884a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f981 	bl	8008b40 <UART_EndTransmit_IT>
    return;
 800883e:	e004      	b.n	800884a <HAL_UART_IRQHandler+0x51e>
    return;
 8008840:	bf00      	nop
 8008842:	e002      	b.n	800884a <HAL_UART_IRQHandler+0x51e>
      return;
 8008844:	bf00      	nop
 8008846:	e000      	b.n	800884a <HAL_UART_IRQHandler+0x51e>
      return;
 8008848:	bf00      	nop
  }
}
 800884a:	37e8      	adds	r7, #232	@ 0xe8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	4613      	mov	r3, r2
 800889a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800889c:	e03b      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d037      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a6:	f7fb f9f3 	bl	8003c90 <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d302      	bcc.n	80088bc <UART_WaitOnFlagUntilTimeout+0x30>
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e03a      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d023      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0x8a>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b80      	cmp	r3, #128	@ 0x80
 80088d2:	d020      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0x8a>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b40      	cmp	r3, #64	@ 0x40
 80088d8:	d01d      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d116      	bne.n	8008916 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	617b      	str	r3, [r7, #20]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 f857 	bl	80089b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2208      	movs	r2, #8
 8008908:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e00f      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4013      	ands	r3, r2
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	429a      	cmp	r2, r3
 8008924:	bf0c      	ite	eq
 8008926:	2301      	moveq	r3, #1
 8008928:	2300      	movne	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	461a      	mov	r2, r3
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	429a      	cmp	r2, r3
 8008932:	d0b4      	beq.n	800889e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	4613      	mov	r3, r2
 800894a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	88fa      	ldrh	r2, [r7, #6]
 8008956:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	88fa      	ldrh	r2, [r7, #6]
 800895c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2222      	movs	r2, #34	@ 0x22
 8008968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d007      	beq.n	8008984 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008982:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0201 	orr.w	r2, r2, #1
 8008992:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0220 	orr.w	r2, r2, #32
 80089a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b095      	sub	sp, #84	@ 0x54
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089da:	643a      	str	r2, [r7, #64]	@ 0x40
 80089dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3314      	adds	r3, #20
 80089f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3314      	adds	r3, #20
 8008a0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e5      	bne.n	80089ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d119      	bne.n	8008a5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f023 0310 	bic.w	r3, r3, #16
 8008a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a4a:	61ba      	str	r2, [r7, #24]
 8008a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6979      	ldr	r1, [r7, #20]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	613b      	str	r3, [r7, #16]
   return(result);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e5      	bne.n	8008a2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a6c:	bf00      	nop
 8008a6e:	3754      	adds	r7, #84	@ 0x54
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff fef0 	bl	8008878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a98:	bf00      	nop
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b21      	cmp	r3, #33	@ 0x21
 8008ab2:	d13e      	bne.n	8008b32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008abc:	d114      	bne.n	8008ae8 <UART_Transmit_IT+0x48>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d110      	bne.n	8008ae8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ada:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	1c9a      	adds	r2, r3, #2
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	621a      	str	r2, [r3, #32]
 8008ae6:	e008      	b.n	8008afa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	1c59      	adds	r1, r3, #1
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6211      	str	r1, [r2, #32]
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	3b01      	subs	r3, #1
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	4619      	mov	r1, r3
 8008b08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10f      	bne.n	8008b2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68da      	ldr	r2, [r3, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e000      	b.n	8008b34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
  }
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff fe75 	bl	8008850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08c      	sub	sp, #48	@ 0x30
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b22      	cmp	r3, #34	@ 0x22
 8008b82:	f040 80ae 	bne.w	8008ce2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b8e:	d117      	bne.n	8008bc0 <UART_Receive_IT+0x50>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d113      	bne.n	8008bc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb8:	1c9a      	adds	r2, r3, #2
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8008bbe:	e026      	b.n	8008c0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bd2:	d007      	beq.n	8008be4 <UART_Receive_IT+0x74>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <UART_Receive_IT+0x82>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e008      	b.n	8008c04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d15d      	bne.n	8008cde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68da      	ldr	r2, [r3, #12]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0220 	bic.w	r2, r2, #32
 8008c30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	695a      	ldr	r2, [r3, #20]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0201 	bic.w	r2, r2, #1
 8008c50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d135      	bne.n	8008cd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f023 0310 	bic.w	r3, r3, #16
 8008c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8e:	623a      	str	r2, [r7, #32]
 8008c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	6a3a      	ldr	r2, [r7, #32]
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e5      	bne.n	8008c6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	d10a      	bne.n	8008cc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7f9 fa6d 	bl	80021ac <HAL_UARTEx_RxEventCallback>
 8008cd2:	e002      	b.n	8008cda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff fdc5 	bl	8008864 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e002      	b.n	8008ce4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e000      	b.n	8008ce4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ce2:	2302      	movs	r3, #2
  }
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3730      	adds	r7, #48	@ 0x30
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cf0:	b0c0      	sub	sp, #256	@ 0x100
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d08:	68d9      	ldr	r1, [r3, #12]
 8008d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	ea40 0301 	orr.w	r3, r0, r1
 8008d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008d44:	f021 010c 	bic.w	r1, r1, #12
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008d52:	430b      	orrs	r3, r1
 8008d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d66:	6999      	ldr	r1, [r3, #24]
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	ea40 0301 	orr.w	r3, r0, r1
 8008d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	4b8f      	ldr	r3, [pc, #572]	@ (8008fb8 <UART_SetConfig+0x2cc>)
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d005      	beq.n	8008d8c <UART_SetConfig+0xa0>
 8008d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4b8d      	ldr	r3, [pc, #564]	@ (8008fbc <UART_SetConfig+0x2d0>)
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d104      	bne.n	8008d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d8c:	f7fd fb9e 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8008d90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008d94:	e003      	b.n	8008d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d96:	f7fd fb85 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008da8:	f040 810c 	bne.w	8008fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008db6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	1891      	adds	r1, r2, r2
 8008dc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008dc6:	415b      	adcs	r3, r3
 8008dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008dce:	4621      	mov	r1, r4
 8008dd0:	eb12 0801 	adds.w	r8, r2, r1
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	eb43 0901 	adc.w	r9, r3, r1
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dee:	4690      	mov	r8, r2
 8008df0:	4699      	mov	r9, r3
 8008df2:	4623      	mov	r3, r4
 8008df4:	eb18 0303 	adds.w	r3, r8, r3
 8008df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	eb49 0303 	adc.w	r3, r9, r3
 8008e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	18db      	adds	r3, r3, r3
 8008e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e20:	4613      	mov	r3, r2
 8008e22:	eb42 0303 	adc.w	r3, r2, r3
 8008e26:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008e30:	f7f7 ff32 	bl	8000c98 <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4b61      	ldr	r3, [pc, #388]	@ (8008fc0 <UART_SetConfig+0x2d4>)
 8008e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	011c      	lsls	r4, r3, #4
 8008e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008e54:	4642      	mov	r2, r8
 8008e56:	464b      	mov	r3, r9
 8008e58:	1891      	adds	r1, r2, r2
 8008e5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008e5c:	415b      	adcs	r3, r3
 8008e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008e64:	4641      	mov	r1, r8
 8008e66:	eb12 0a01 	adds.w	sl, r2, r1
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e84:	4692      	mov	sl, r2
 8008e86:	469b      	mov	fp, r3
 8008e88:	4643      	mov	r3, r8
 8008e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8008e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e92:	464b      	mov	r3, r9
 8008e94:	eb4b 0303 	adc.w	r3, fp, r3
 8008e98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	18db      	adds	r3, r3, r3
 8008eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	eb42 0303 	adc.w	r3, r2, r3
 8008ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ec6:	f7f7 fee7 	bl	8000c98 <__aeabi_uldivmod>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8008fc0 <UART_SetConfig+0x2d4>)
 8008ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	2264      	movs	r2, #100	@ 0x64
 8008eda:	fb02 f303 	mul.w	r3, r2, r3
 8008ede:	1acb      	subs	r3, r1, r3
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008ee6:	4b36      	ldr	r3, [pc, #216]	@ (8008fc0 <UART_SetConfig+0x2d4>)
 8008ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8008eec:	095b      	lsrs	r3, r3, #5
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008ef4:	441c      	add	r4, r3
 8008ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	1891      	adds	r1, r2, r2
 8008f0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f10:	415b      	adcs	r3, r3
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f18:	4641      	mov	r1, r8
 8008f1a:	1851      	adds	r1, r2, r1
 8008f1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008f1e:	4649      	mov	r1, r9
 8008f20:	414b      	adcs	r3, r1
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f24:	f04f 0200 	mov.w	r2, #0
 8008f28:	f04f 0300 	mov.w	r3, #0
 8008f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008f30:	4659      	mov	r1, fp
 8008f32:	00cb      	lsls	r3, r1, #3
 8008f34:	4651      	mov	r1, sl
 8008f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f3a:	4651      	mov	r1, sl
 8008f3c:	00ca      	lsls	r2, r1, #3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	4619      	mov	r1, r3
 8008f42:	4603      	mov	r3, r0
 8008f44:	4642      	mov	r2, r8
 8008f46:	189b      	adds	r3, r3, r2
 8008f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f4c:	464b      	mov	r3, r9
 8008f4e:	460a      	mov	r2, r1
 8008f50:	eb42 0303 	adc.w	r3, r2, r3
 8008f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	18db      	adds	r3, r3, r3
 8008f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f72:	4613      	mov	r3, r2
 8008f74:	eb42 0303 	adc.w	r3, r2, r3
 8008f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008f82:	f7f7 fe89 	bl	8000c98 <__aeabi_uldivmod>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc0 <UART_SetConfig+0x2d4>)
 8008f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f90:	095b      	lsrs	r3, r3, #5
 8008f92:	2164      	movs	r1, #100	@ 0x64
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	3332      	adds	r3, #50	@ 0x32
 8008f9e:	4a08      	ldr	r2, [pc, #32]	@ (8008fc0 <UART_SetConfig+0x2d4>)
 8008fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	f003 0207 	and.w	r2, r3, #7
 8008faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4422      	add	r2, r4
 8008fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fb4:	e106      	b.n	80091c4 <UART_SetConfig+0x4d8>
 8008fb6:	bf00      	nop
 8008fb8:	40011000 	.word	0x40011000
 8008fbc:	40011400 	.word	0x40011400
 8008fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008fce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008fd6:	4642      	mov	r2, r8
 8008fd8:	464b      	mov	r3, r9
 8008fda:	1891      	adds	r1, r2, r2
 8008fdc:	6239      	str	r1, [r7, #32]
 8008fde:	415b      	adcs	r3, r3
 8008fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fe6:	4641      	mov	r1, r8
 8008fe8:	1854      	adds	r4, r2, r1
 8008fea:	4649      	mov	r1, r9
 8008fec:	eb43 0501 	adc.w	r5, r3, r1
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	f04f 0300 	mov.w	r3, #0
 8008ff8:	00eb      	lsls	r3, r5, #3
 8008ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ffe:	00e2      	lsls	r2, r4, #3
 8009000:	4614      	mov	r4, r2
 8009002:	461d      	mov	r5, r3
 8009004:	4643      	mov	r3, r8
 8009006:	18e3      	adds	r3, r4, r3
 8009008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800900c:	464b      	mov	r3, r9
 800900e:	eb45 0303 	adc.w	r3, r5, r3
 8009012:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009022:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	f04f 0300 	mov.w	r3, #0
 800902e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009032:	4629      	mov	r1, r5
 8009034:	008b      	lsls	r3, r1, #2
 8009036:	4621      	mov	r1, r4
 8009038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800903c:	4621      	mov	r1, r4
 800903e:	008a      	lsls	r2, r1, #2
 8009040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009044:	f7f7 fe28 	bl	8000c98 <__aeabi_uldivmod>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4b60      	ldr	r3, [pc, #384]	@ (80091d0 <UART_SetConfig+0x4e4>)
 800904e:	fba3 2302 	umull	r2, r3, r3, r2
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	011c      	lsls	r4, r3, #4
 8009056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800905a:	2200      	movs	r2, #0
 800905c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009060:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	1891      	adds	r1, r2, r2
 800906e:	61b9      	str	r1, [r7, #24]
 8009070:	415b      	adcs	r3, r3
 8009072:	61fb      	str	r3, [r7, #28]
 8009074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009078:	4641      	mov	r1, r8
 800907a:	1851      	adds	r1, r2, r1
 800907c:	6139      	str	r1, [r7, #16]
 800907e:	4649      	mov	r1, r9
 8009080:	414b      	adcs	r3, r1
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009090:	4659      	mov	r1, fp
 8009092:	00cb      	lsls	r3, r1, #3
 8009094:	4651      	mov	r1, sl
 8009096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800909a:	4651      	mov	r1, sl
 800909c:	00ca      	lsls	r2, r1, #3
 800909e:	4610      	mov	r0, r2
 80090a0:	4619      	mov	r1, r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	4642      	mov	r2, r8
 80090a6:	189b      	adds	r3, r3, r2
 80090a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090ac:	464b      	mov	r3, r9
 80090ae:	460a      	mov	r2, r1
 80090b0:	eb42 0303 	adc.w	r3, r2, r3
 80090b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80090d0:	4649      	mov	r1, r9
 80090d2:	008b      	lsls	r3, r1, #2
 80090d4:	4641      	mov	r1, r8
 80090d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090da:	4641      	mov	r1, r8
 80090dc:	008a      	lsls	r2, r1, #2
 80090de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80090e2:	f7f7 fdd9 	bl	8000c98 <__aeabi_uldivmod>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4611      	mov	r1, r2
 80090ec:	4b38      	ldr	r3, [pc, #224]	@ (80091d0 <UART_SetConfig+0x4e4>)
 80090ee:	fba3 2301 	umull	r2, r3, r3, r1
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	2264      	movs	r2, #100	@ 0x64
 80090f6:	fb02 f303 	mul.w	r3, r2, r3
 80090fa:	1acb      	subs	r3, r1, r3
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	3332      	adds	r3, #50	@ 0x32
 8009100:	4a33      	ldr	r2, [pc, #204]	@ (80091d0 <UART_SetConfig+0x4e4>)
 8009102:	fba2 2303 	umull	r2, r3, r2, r3
 8009106:	095b      	lsrs	r3, r3, #5
 8009108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800910c:	441c      	add	r4, r3
 800910e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009112:	2200      	movs	r2, #0
 8009114:	673b      	str	r3, [r7, #112]	@ 0x70
 8009116:	677a      	str	r2, [r7, #116]	@ 0x74
 8009118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800911c:	4642      	mov	r2, r8
 800911e:	464b      	mov	r3, r9
 8009120:	1891      	adds	r1, r2, r2
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	415b      	adcs	r3, r3
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800912c:	4641      	mov	r1, r8
 800912e:	1851      	adds	r1, r2, r1
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	4649      	mov	r1, r9
 8009134:	414b      	adcs	r3, r1
 8009136:	607b      	str	r3, [r7, #4]
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009144:	4659      	mov	r1, fp
 8009146:	00cb      	lsls	r3, r1, #3
 8009148:	4651      	mov	r1, sl
 800914a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800914e:	4651      	mov	r1, sl
 8009150:	00ca      	lsls	r2, r1, #3
 8009152:	4610      	mov	r0, r2
 8009154:	4619      	mov	r1, r3
 8009156:	4603      	mov	r3, r0
 8009158:	4642      	mov	r2, r8
 800915a:	189b      	adds	r3, r3, r2
 800915c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800915e:	464b      	mov	r3, r9
 8009160:	460a      	mov	r2, r1
 8009162:	eb42 0303 	adc.w	r3, r2, r3
 8009166:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	663b      	str	r3, [r7, #96]	@ 0x60
 8009172:	667a      	str	r2, [r7, #100]	@ 0x64
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	f04f 0300 	mov.w	r3, #0
 800917c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009180:	4649      	mov	r1, r9
 8009182:	008b      	lsls	r3, r1, #2
 8009184:	4641      	mov	r1, r8
 8009186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800918a:	4641      	mov	r1, r8
 800918c:	008a      	lsls	r2, r1, #2
 800918e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009192:	f7f7 fd81 	bl	8000c98 <__aeabi_uldivmod>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4b0d      	ldr	r3, [pc, #52]	@ (80091d0 <UART_SetConfig+0x4e4>)
 800919c:	fba3 1302 	umull	r1, r3, r3, r2
 80091a0:	095b      	lsrs	r3, r3, #5
 80091a2:	2164      	movs	r1, #100	@ 0x64
 80091a4:	fb01 f303 	mul.w	r3, r1, r3
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	3332      	adds	r3, #50	@ 0x32
 80091ae:	4a08      	ldr	r2, [pc, #32]	@ (80091d0 <UART_SetConfig+0x4e4>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	095b      	lsrs	r3, r3, #5
 80091b6:	f003 020f 	and.w	r2, r3, #15
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4422      	add	r2, r4
 80091c2:	609a      	str	r2, [r3, #8]
}
 80091c4:	bf00      	nop
 80091c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80091ca:	46bd      	mov	sp, r7
 80091cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091d0:	51eb851f 	.word	0x51eb851f

080091d4 <__cvt>:
 80091d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	ec57 6b10 	vmov	r6, r7, d0
 80091dc:	2f00      	cmp	r7, #0
 80091de:	460c      	mov	r4, r1
 80091e0:	4619      	mov	r1, r3
 80091e2:	463b      	mov	r3, r7
 80091e4:	bfbb      	ittet	lt
 80091e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80091ea:	461f      	movlt	r7, r3
 80091ec:	2300      	movge	r3, #0
 80091ee:	232d      	movlt	r3, #45	@ 0x2d
 80091f0:	700b      	strb	r3, [r1, #0]
 80091f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80091f8:	4691      	mov	r9, r2
 80091fa:	f023 0820 	bic.w	r8, r3, #32
 80091fe:	bfbc      	itt	lt
 8009200:	4632      	movlt	r2, r6
 8009202:	4616      	movlt	r6, r2
 8009204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009208:	d005      	beq.n	8009216 <__cvt+0x42>
 800920a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800920e:	d100      	bne.n	8009212 <__cvt+0x3e>
 8009210:	3401      	adds	r4, #1
 8009212:	2102      	movs	r1, #2
 8009214:	e000      	b.n	8009218 <__cvt+0x44>
 8009216:	2103      	movs	r1, #3
 8009218:	ab03      	add	r3, sp, #12
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	ab02      	add	r3, sp, #8
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	ec47 6b10 	vmov	d0, r6, r7
 8009224:	4653      	mov	r3, sl
 8009226:	4622      	mov	r2, r4
 8009228:	f001 f89e 	bl	800a368 <_dtoa_r>
 800922c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009230:	4605      	mov	r5, r0
 8009232:	d119      	bne.n	8009268 <__cvt+0x94>
 8009234:	f019 0f01 	tst.w	r9, #1
 8009238:	d00e      	beq.n	8009258 <__cvt+0x84>
 800923a:	eb00 0904 	add.w	r9, r0, r4
 800923e:	2200      	movs	r2, #0
 8009240:	2300      	movs	r3, #0
 8009242:	4630      	mov	r0, r6
 8009244:	4639      	mov	r1, r7
 8009246:	f7f7 fc47 	bl	8000ad8 <__aeabi_dcmpeq>
 800924a:	b108      	cbz	r0, 8009250 <__cvt+0x7c>
 800924c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009250:	2230      	movs	r2, #48	@ 0x30
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	454b      	cmp	r3, r9
 8009256:	d31e      	bcc.n	8009296 <__cvt+0xc2>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800925c:	1b5b      	subs	r3, r3, r5
 800925e:	4628      	mov	r0, r5
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	b004      	add	sp, #16
 8009264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009268:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800926c:	eb00 0904 	add.w	r9, r0, r4
 8009270:	d1e5      	bne.n	800923e <__cvt+0x6a>
 8009272:	7803      	ldrb	r3, [r0, #0]
 8009274:	2b30      	cmp	r3, #48	@ 0x30
 8009276:	d10a      	bne.n	800928e <__cvt+0xba>
 8009278:	2200      	movs	r2, #0
 800927a:	2300      	movs	r3, #0
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 fc2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009284:	b918      	cbnz	r0, 800928e <__cvt+0xba>
 8009286:	f1c4 0401 	rsb	r4, r4, #1
 800928a:	f8ca 4000 	str.w	r4, [sl]
 800928e:	f8da 3000 	ldr.w	r3, [sl]
 8009292:	4499      	add	r9, r3
 8009294:	e7d3      	b.n	800923e <__cvt+0x6a>
 8009296:	1c59      	adds	r1, r3, #1
 8009298:	9103      	str	r1, [sp, #12]
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e7d9      	b.n	8009252 <__cvt+0x7e>

0800929e <__exponent>:
 800929e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a0:	2900      	cmp	r1, #0
 80092a2:	bfba      	itte	lt
 80092a4:	4249      	neglt	r1, r1
 80092a6:	232d      	movlt	r3, #45	@ 0x2d
 80092a8:	232b      	movge	r3, #43	@ 0x2b
 80092aa:	2909      	cmp	r1, #9
 80092ac:	7002      	strb	r2, [r0, #0]
 80092ae:	7043      	strb	r3, [r0, #1]
 80092b0:	dd29      	ble.n	8009306 <__exponent+0x68>
 80092b2:	f10d 0307 	add.w	r3, sp, #7
 80092b6:	461d      	mov	r5, r3
 80092b8:	270a      	movs	r7, #10
 80092ba:	461a      	mov	r2, r3
 80092bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80092c0:	fb07 1416 	mls	r4, r7, r6, r1
 80092c4:	3430      	adds	r4, #48	@ 0x30
 80092c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80092ca:	460c      	mov	r4, r1
 80092cc:	2c63      	cmp	r4, #99	@ 0x63
 80092ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80092d2:	4631      	mov	r1, r6
 80092d4:	dcf1      	bgt.n	80092ba <__exponent+0x1c>
 80092d6:	3130      	adds	r1, #48	@ 0x30
 80092d8:	1e94      	subs	r4, r2, #2
 80092da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092de:	1c41      	adds	r1, r0, #1
 80092e0:	4623      	mov	r3, r4
 80092e2:	42ab      	cmp	r3, r5
 80092e4:	d30a      	bcc.n	80092fc <__exponent+0x5e>
 80092e6:	f10d 0309 	add.w	r3, sp, #9
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	42ac      	cmp	r4, r5
 80092ee:	bf88      	it	hi
 80092f0:	2300      	movhi	r3, #0
 80092f2:	3302      	adds	r3, #2
 80092f4:	4403      	add	r3, r0
 80092f6:	1a18      	subs	r0, r3, r0
 80092f8:	b003      	add	sp, #12
 80092fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009300:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009304:	e7ed      	b.n	80092e2 <__exponent+0x44>
 8009306:	2330      	movs	r3, #48	@ 0x30
 8009308:	3130      	adds	r1, #48	@ 0x30
 800930a:	7083      	strb	r3, [r0, #2]
 800930c:	70c1      	strb	r1, [r0, #3]
 800930e:	1d03      	adds	r3, r0, #4
 8009310:	e7f1      	b.n	80092f6 <__exponent+0x58>
	...

08009314 <_printf_float>:
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	b08d      	sub	sp, #52	@ 0x34
 800931a:	460c      	mov	r4, r1
 800931c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009320:	4616      	mov	r6, r2
 8009322:	461f      	mov	r7, r3
 8009324:	4605      	mov	r5, r0
 8009326:	f000 ff09 	bl	800a13c <_localeconv_r>
 800932a:	6803      	ldr	r3, [r0, #0]
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	4618      	mov	r0, r3
 8009330:	f7f6 ffa6 	bl	8000280 <strlen>
 8009334:	2300      	movs	r3, #0
 8009336:	930a      	str	r3, [sp, #40]	@ 0x28
 8009338:	f8d8 3000 	ldr.w	r3, [r8]
 800933c:	9005      	str	r0, [sp, #20]
 800933e:	3307      	adds	r3, #7
 8009340:	f023 0307 	bic.w	r3, r3, #7
 8009344:	f103 0208 	add.w	r2, r3, #8
 8009348:	f894 a018 	ldrb.w	sl, [r4, #24]
 800934c:	f8d4 b000 	ldr.w	fp, [r4]
 8009350:	f8c8 2000 	str.w	r2, [r8]
 8009354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009358:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800935c:	9307      	str	r3, [sp, #28]
 800935e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009362:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800936a:	4b9c      	ldr	r3, [pc, #624]	@ (80095dc <_printf_float+0x2c8>)
 800936c:	f04f 32ff 	mov.w	r2, #4294967295
 8009370:	f7f7 fbe4 	bl	8000b3c <__aeabi_dcmpun>
 8009374:	bb70      	cbnz	r0, 80093d4 <_printf_float+0xc0>
 8009376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800937a:	4b98      	ldr	r3, [pc, #608]	@ (80095dc <_printf_float+0x2c8>)
 800937c:	f04f 32ff 	mov.w	r2, #4294967295
 8009380:	f7f7 fbbe 	bl	8000b00 <__aeabi_dcmple>
 8009384:	bb30      	cbnz	r0, 80093d4 <_printf_float+0xc0>
 8009386:	2200      	movs	r2, #0
 8009388:	2300      	movs	r3, #0
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f7 fbad 	bl	8000aec <__aeabi_dcmplt>
 8009392:	b110      	cbz	r0, 800939a <_printf_float+0x86>
 8009394:	232d      	movs	r3, #45	@ 0x2d
 8009396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800939a:	4a91      	ldr	r2, [pc, #580]	@ (80095e0 <_printf_float+0x2cc>)
 800939c:	4b91      	ldr	r3, [pc, #580]	@ (80095e4 <_printf_float+0x2d0>)
 800939e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80093a2:	bf94      	ite	ls
 80093a4:	4690      	movls	r8, r2
 80093a6:	4698      	movhi	r8, r3
 80093a8:	2303      	movs	r3, #3
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	f02b 0304 	bic.w	r3, fp, #4
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	f04f 0900 	mov.w	r9, #0
 80093b6:	9700      	str	r7, [sp, #0]
 80093b8:	4633      	mov	r3, r6
 80093ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80093bc:	4621      	mov	r1, r4
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 f9d2 	bl	8009768 <_printf_common>
 80093c4:	3001      	adds	r0, #1
 80093c6:	f040 808d 	bne.w	80094e4 <_printf_float+0x1d0>
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	b00d      	add	sp, #52	@ 0x34
 80093d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d4:	4642      	mov	r2, r8
 80093d6:	464b      	mov	r3, r9
 80093d8:	4640      	mov	r0, r8
 80093da:	4649      	mov	r1, r9
 80093dc:	f7f7 fbae 	bl	8000b3c <__aeabi_dcmpun>
 80093e0:	b140      	cbz	r0, 80093f4 <_printf_float+0xe0>
 80093e2:	464b      	mov	r3, r9
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfbc      	itt	lt
 80093e8:	232d      	movlt	r3, #45	@ 0x2d
 80093ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80093ee:	4a7e      	ldr	r2, [pc, #504]	@ (80095e8 <_printf_float+0x2d4>)
 80093f0:	4b7e      	ldr	r3, [pc, #504]	@ (80095ec <_printf_float+0x2d8>)
 80093f2:	e7d4      	b.n	800939e <_printf_float+0x8a>
 80093f4:	6863      	ldr	r3, [r4, #4]
 80093f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80093fa:	9206      	str	r2, [sp, #24]
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	d13b      	bne.n	8009478 <_printf_float+0x164>
 8009400:	2306      	movs	r3, #6
 8009402:	6063      	str	r3, [r4, #4]
 8009404:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009408:	2300      	movs	r3, #0
 800940a:	6022      	str	r2, [r4, #0]
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009410:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009414:	ab09      	add	r3, sp, #36	@ 0x24
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	6861      	ldr	r1, [r4, #4]
 800941a:	ec49 8b10 	vmov	d0, r8, r9
 800941e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009422:	4628      	mov	r0, r5
 8009424:	f7ff fed6 	bl	80091d4 <__cvt>
 8009428:	9b06      	ldr	r3, [sp, #24]
 800942a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800942c:	2b47      	cmp	r3, #71	@ 0x47
 800942e:	4680      	mov	r8, r0
 8009430:	d129      	bne.n	8009486 <_printf_float+0x172>
 8009432:	1cc8      	adds	r0, r1, #3
 8009434:	db02      	blt.n	800943c <_printf_float+0x128>
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	4299      	cmp	r1, r3
 800943a:	dd41      	ble.n	80094c0 <_printf_float+0x1ac>
 800943c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009440:	fa5f fa8a 	uxtb.w	sl, sl
 8009444:	3901      	subs	r1, #1
 8009446:	4652      	mov	r2, sl
 8009448:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800944c:	9109      	str	r1, [sp, #36]	@ 0x24
 800944e:	f7ff ff26 	bl	800929e <__exponent>
 8009452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009454:	1813      	adds	r3, r2, r0
 8009456:	2a01      	cmp	r2, #1
 8009458:	4681      	mov	r9, r0
 800945a:	6123      	str	r3, [r4, #16]
 800945c:	dc02      	bgt.n	8009464 <_printf_float+0x150>
 800945e:	6822      	ldr	r2, [r4, #0]
 8009460:	07d2      	lsls	r2, r2, #31
 8009462:	d501      	bpl.n	8009468 <_printf_float+0x154>
 8009464:	3301      	adds	r3, #1
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0a2      	beq.n	80093b6 <_printf_float+0xa2>
 8009470:	232d      	movs	r3, #45	@ 0x2d
 8009472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009476:	e79e      	b.n	80093b6 <_printf_float+0xa2>
 8009478:	9a06      	ldr	r2, [sp, #24]
 800947a:	2a47      	cmp	r2, #71	@ 0x47
 800947c:	d1c2      	bne.n	8009404 <_printf_float+0xf0>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1c0      	bne.n	8009404 <_printf_float+0xf0>
 8009482:	2301      	movs	r3, #1
 8009484:	e7bd      	b.n	8009402 <_printf_float+0xee>
 8009486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800948a:	d9db      	bls.n	8009444 <_printf_float+0x130>
 800948c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009490:	d118      	bne.n	80094c4 <_printf_float+0x1b0>
 8009492:	2900      	cmp	r1, #0
 8009494:	6863      	ldr	r3, [r4, #4]
 8009496:	dd0b      	ble.n	80094b0 <_printf_float+0x19c>
 8009498:	6121      	str	r1, [r4, #16]
 800949a:	b913      	cbnz	r3, 80094a2 <_printf_float+0x18e>
 800949c:	6822      	ldr	r2, [r4, #0]
 800949e:	07d0      	lsls	r0, r2, #31
 80094a0:	d502      	bpl.n	80094a8 <_printf_float+0x194>
 80094a2:	3301      	adds	r3, #1
 80094a4:	440b      	add	r3, r1
 80094a6:	6123      	str	r3, [r4, #16]
 80094a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80094aa:	f04f 0900 	mov.w	r9, #0
 80094ae:	e7db      	b.n	8009468 <_printf_float+0x154>
 80094b0:	b913      	cbnz	r3, 80094b8 <_printf_float+0x1a4>
 80094b2:	6822      	ldr	r2, [r4, #0]
 80094b4:	07d2      	lsls	r2, r2, #31
 80094b6:	d501      	bpl.n	80094bc <_printf_float+0x1a8>
 80094b8:	3302      	adds	r3, #2
 80094ba:	e7f4      	b.n	80094a6 <_printf_float+0x192>
 80094bc:	2301      	movs	r3, #1
 80094be:	e7f2      	b.n	80094a6 <_printf_float+0x192>
 80094c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80094c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c6:	4299      	cmp	r1, r3
 80094c8:	db05      	blt.n	80094d6 <_printf_float+0x1c2>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	6121      	str	r1, [r4, #16]
 80094ce:	07d8      	lsls	r0, r3, #31
 80094d0:	d5ea      	bpl.n	80094a8 <_printf_float+0x194>
 80094d2:	1c4b      	adds	r3, r1, #1
 80094d4:	e7e7      	b.n	80094a6 <_printf_float+0x192>
 80094d6:	2900      	cmp	r1, #0
 80094d8:	bfd4      	ite	le
 80094da:	f1c1 0202 	rsble	r2, r1, #2
 80094de:	2201      	movgt	r2, #1
 80094e0:	4413      	add	r3, r2
 80094e2:	e7e0      	b.n	80094a6 <_printf_float+0x192>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	055a      	lsls	r2, r3, #21
 80094e8:	d407      	bmi.n	80094fa <_printf_float+0x1e6>
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	4642      	mov	r2, r8
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	d12b      	bne.n	8009550 <_printf_float+0x23c>
 80094f8:	e767      	b.n	80093ca <_printf_float+0xb6>
 80094fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094fe:	f240 80dd 	bls.w	80096bc <_printf_float+0x3a8>
 8009502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009506:	2200      	movs	r2, #0
 8009508:	2300      	movs	r3, #0
 800950a:	f7f7 fae5 	bl	8000ad8 <__aeabi_dcmpeq>
 800950e:	2800      	cmp	r0, #0
 8009510:	d033      	beq.n	800957a <_printf_float+0x266>
 8009512:	4a37      	ldr	r2, [pc, #220]	@ (80095f0 <_printf_float+0x2dc>)
 8009514:	2301      	movs	r3, #1
 8009516:	4631      	mov	r1, r6
 8009518:	4628      	mov	r0, r5
 800951a:	47b8      	blx	r7
 800951c:	3001      	adds	r0, #1
 800951e:	f43f af54 	beq.w	80093ca <_printf_float+0xb6>
 8009522:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009526:	4543      	cmp	r3, r8
 8009528:	db02      	blt.n	8009530 <_printf_float+0x21c>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	07d8      	lsls	r0, r3, #31
 800952e:	d50f      	bpl.n	8009550 <_printf_float+0x23c>
 8009530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009534:	4631      	mov	r1, r6
 8009536:	4628      	mov	r0, r5
 8009538:	47b8      	blx	r7
 800953a:	3001      	adds	r0, #1
 800953c:	f43f af45 	beq.w	80093ca <_printf_float+0xb6>
 8009540:	f04f 0900 	mov.w	r9, #0
 8009544:	f108 38ff 	add.w	r8, r8, #4294967295
 8009548:	f104 0a1a 	add.w	sl, r4, #26
 800954c:	45c8      	cmp	r8, r9
 800954e:	dc09      	bgt.n	8009564 <_printf_float+0x250>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	079b      	lsls	r3, r3, #30
 8009554:	f100 8103 	bmi.w	800975e <_printf_float+0x44a>
 8009558:	68e0      	ldr	r0, [r4, #12]
 800955a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800955c:	4298      	cmp	r0, r3
 800955e:	bfb8      	it	lt
 8009560:	4618      	movlt	r0, r3
 8009562:	e734      	b.n	80093ce <_printf_float+0xba>
 8009564:	2301      	movs	r3, #1
 8009566:	4652      	mov	r2, sl
 8009568:	4631      	mov	r1, r6
 800956a:	4628      	mov	r0, r5
 800956c:	47b8      	blx	r7
 800956e:	3001      	adds	r0, #1
 8009570:	f43f af2b 	beq.w	80093ca <_printf_float+0xb6>
 8009574:	f109 0901 	add.w	r9, r9, #1
 8009578:	e7e8      	b.n	800954c <_printf_float+0x238>
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	dc39      	bgt.n	80095f4 <_printf_float+0x2e0>
 8009580:	4a1b      	ldr	r2, [pc, #108]	@ (80095f0 <_printf_float+0x2dc>)
 8009582:	2301      	movs	r3, #1
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	f43f af1d 	beq.w	80093ca <_printf_float+0xb6>
 8009590:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009594:	ea59 0303 	orrs.w	r3, r9, r3
 8009598:	d102      	bne.n	80095a0 <_printf_float+0x28c>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	07d9      	lsls	r1, r3, #31
 800959e:	d5d7      	bpl.n	8009550 <_printf_float+0x23c>
 80095a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095a4:	4631      	mov	r1, r6
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b8      	blx	r7
 80095aa:	3001      	adds	r0, #1
 80095ac:	f43f af0d 	beq.w	80093ca <_printf_float+0xb6>
 80095b0:	f04f 0a00 	mov.w	sl, #0
 80095b4:	f104 0b1a 	add.w	fp, r4, #26
 80095b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ba:	425b      	negs	r3, r3
 80095bc:	4553      	cmp	r3, sl
 80095be:	dc01      	bgt.n	80095c4 <_printf_float+0x2b0>
 80095c0:	464b      	mov	r3, r9
 80095c2:	e793      	b.n	80094ec <_printf_float+0x1d8>
 80095c4:	2301      	movs	r3, #1
 80095c6:	465a      	mov	r2, fp
 80095c8:	4631      	mov	r1, r6
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b8      	blx	r7
 80095ce:	3001      	adds	r0, #1
 80095d0:	f43f aefb 	beq.w	80093ca <_printf_float+0xb6>
 80095d4:	f10a 0a01 	add.w	sl, sl, #1
 80095d8:	e7ee      	b.n	80095b8 <_printf_float+0x2a4>
 80095da:	bf00      	nop
 80095dc:	7fefffff 	.word	0x7fefffff
 80095e0:	0800e2f8 	.word	0x0800e2f8
 80095e4:	0800e2fc 	.word	0x0800e2fc
 80095e8:	0800e300 	.word	0x0800e300
 80095ec:	0800e304 	.word	0x0800e304
 80095f0:	0800e308 	.word	0x0800e308
 80095f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095fa:	4553      	cmp	r3, sl
 80095fc:	bfa8      	it	ge
 80095fe:	4653      	movge	r3, sl
 8009600:	2b00      	cmp	r3, #0
 8009602:	4699      	mov	r9, r3
 8009604:	dc36      	bgt.n	8009674 <_printf_float+0x360>
 8009606:	f04f 0b00 	mov.w	fp, #0
 800960a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800960e:	f104 021a 	add.w	r2, r4, #26
 8009612:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009614:	9306      	str	r3, [sp, #24]
 8009616:	eba3 0309 	sub.w	r3, r3, r9
 800961a:	455b      	cmp	r3, fp
 800961c:	dc31      	bgt.n	8009682 <_printf_float+0x36e>
 800961e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009620:	459a      	cmp	sl, r3
 8009622:	dc3a      	bgt.n	800969a <_printf_float+0x386>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	07da      	lsls	r2, r3, #31
 8009628:	d437      	bmi.n	800969a <_printf_float+0x386>
 800962a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800962c:	ebaa 0903 	sub.w	r9, sl, r3
 8009630:	9b06      	ldr	r3, [sp, #24]
 8009632:	ebaa 0303 	sub.w	r3, sl, r3
 8009636:	4599      	cmp	r9, r3
 8009638:	bfa8      	it	ge
 800963a:	4699      	movge	r9, r3
 800963c:	f1b9 0f00 	cmp.w	r9, #0
 8009640:	dc33      	bgt.n	80096aa <_printf_float+0x396>
 8009642:	f04f 0800 	mov.w	r8, #0
 8009646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800964a:	f104 0b1a 	add.w	fp, r4, #26
 800964e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009650:	ebaa 0303 	sub.w	r3, sl, r3
 8009654:	eba3 0309 	sub.w	r3, r3, r9
 8009658:	4543      	cmp	r3, r8
 800965a:	f77f af79 	ble.w	8009550 <_printf_float+0x23c>
 800965e:	2301      	movs	r3, #1
 8009660:	465a      	mov	r2, fp
 8009662:	4631      	mov	r1, r6
 8009664:	4628      	mov	r0, r5
 8009666:	47b8      	blx	r7
 8009668:	3001      	adds	r0, #1
 800966a:	f43f aeae 	beq.w	80093ca <_printf_float+0xb6>
 800966e:	f108 0801 	add.w	r8, r8, #1
 8009672:	e7ec      	b.n	800964e <_printf_float+0x33a>
 8009674:	4642      	mov	r2, r8
 8009676:	4631      	mov	r1, r6
 8009678:	4628      	mov	r0, r5
 800967a:	47b8      	blx	r7
 800967c:	3001      	adds	r0, #1
 800967e:	d1c2      	bne.n	8009606 <_printf_float+0x2f2>
 8009680:	e6a3      	b.n	80093ca <_printf_float+0xb6>
 8009682:	2301      	movs	r3, #1
 8009684:	4631      	mov	r1, r6
 8009686:	4628      	mov	r0, r5
 8009688:	9206      	str	r2, [sp, #24]
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	f43f ae9c 	beq.w	80093ca <_printf_float+0xb6>
 8009692:	9a06      	ldr	r2, [sp, #24]
 8009694:	f10b 0b01 	add.w	fp, fp, #1
 8009698:	e7bb      	b.n	8009612 <_printf_float+0x2fe>
 800969a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	d1c0      	bne.n	800962a <_printf_float+0x316>
 80096a8:	e68f      	b.n	80093ca <_printf_float+0xb6>
 80096aa:	9a06      	ldr	r2, [sp, #24]
 80096ac:	464b      	mov	r3, r9
 80096ae:	4442      	add	r2, r8
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	d1c3      	bne.n	8009642 <_printf_float+0x32e>
 80096ba:	e686      	b.n	80093ca <_printf_float+0xb6>
 80096bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80096c0:	f1ba 0f01 	cmp.w	sl, #1
 80096c4:	dc01      	bgt.n	80096ca <_printf_float+0x3b6>
 80096c6:	07db      	lsls	r3, r3, #31
 80096c8:	d536      	bpl.n	8009738 <_printf_float+0x424>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4642      	mov	r2, r8
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	f43f ae78 	beq.w	80093ca <_printf_float+0xb6>
 80096da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096de:	4631      	mov	r1, r6
 80096e0:	4628      	mov	r0, r5
 80096e2:	47b8      	blx	r7
 80096e4:	3001      	adds	r0, #1
 80096e6:	f43f ae70 	beq.w	80093ca <_printf_float+0xb6>
 80096ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096ee:	2200      	movs	r2, #0
 80096f0:	2300      	movs	r3, #0
 80096f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096f6:	f7f7 f9ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80096fa:	b9c0      	cbnz	r0, 800972e <_printf_float+0x41a>
 80096fc:	4653      	mov	r3, sl
 80096fe:	f108 0201 	add.w	r2, r8, #1
 8009702:	4631      	mov	r1, r6
 8009704:	4628      	mov	r0, r5
 8009706:	47b8      	blx	r7
 8009708:	3001      	adds	r0, #1
 800970a:	d10c      	bne.n	8009726 <_printf_float+0x412>
 800970c:	e65d      	b.n	80093ca <_printf_float+0xb6>
 800970e:	2301      	movs	r3, #1
 8009710:	465a      	mov	r2, fp
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	47b8      	blx	r7
 8009718:	3001      	adds	r0, #1
 800971a:	f43f ae56 	beq.w	80093ca <_printf_float+0xb6>
 800971e:	f108 0801 	add.w	r8, r8, #1
 8009722:	45d0      	cmp	r8, sl
 8009724:	dbf3      	blt.n	800970e <_printf_float+0x3fa>
 8009726:	464b      	mov	r3, r9
 8009728:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800972c:	e6df      	b.n	80094ee <_printf_float+0x1da>
 800972e:	f04f 0800 	mov.w	r8, #0
 8009732:	f104 0b1a 	add.w	fp, r4, #26
 8009736:	e7f4      	b.n	8009722 <_printf_float+0x40e>
 8009738:	2301      	movs	r3, #1
 800973a:	4642      	mov	r2, r8
 800973c:	e7e1      	b.n	8009702 <_printf_float+0x3ee>
 800973e:	2301      	movs	r3, #1
 8009740:	464a      	mov	r2, r9
 8009742:	4631      	mov	r1, r6
 8009744:	4628      	mov	r0, r5
 8009746:	47b8      	blx	r7
 8009748:	3001      	adds	r0, #1
 800974a:	f43f ae3e 	beq.w	80093ca <_printf_float+0xb6>
 800974e:	f108 0801 	add.w	r8, r8, #1
 8009752:	68e3      	ldr	r3, [r4, #12]
 8009754:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009756:	1a5b      	subs	r3, r3, r1
 8009758:	4543      	cmp	r3, r8
 800975a:	dcf0      	bgt.n	800973e <_printf_float+0x42a>
 800975c:	e6fc      	b.n	8009558 <_printf_float+0x244>
 800975e:	f04f 0800 	mov.w	r8, #0
 8009762:	f104 0919 	add.w	r9, r4, #25
 8009766:	e7f4      	b.n	8009752 <_printf_float+0x43e>

08009768 <_printf_common>:
 8009768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	4616      	mov	r6, r2
 800976e:	4698      	mov	r8, r3
 8009770:	688a      	ldr	r2, [r1, #8]
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009778:	4293      	cmp	r3, r2
 800977a:	bfb8      	it	lt
 800977c:	4613      	movlt	r3, r2
 800977e:	6033      	str	r3, [r6, #0]
 8009780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009784:	4607      	mov	r7, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b10a      	cbz	r2, 800978e <_printf_common+0x26>
 800978a:	3301      	adds	r3, #1
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	0699      	lsls	r1, r3, #26
 8009792:	bf42      	ittt	mi
 8009794:	6833      	ldrmi	r3, [r6, #0]
 8009796:	3302      	addmi	r3, #2
 8009798:	6033      	strmi	r3, [r6, #0]
 800979a:	6825      	ldr	r5, [r4, #0]
 800979c:	f015 0506 	ands.w	r5, r5, #6
 80097a0:	d106      	bne.n	80097b0 <_printf_common+0x48>
 80097a2:	f104 0a19 	add.w	sl, r4, #25
 80097a6:	68e3      	ldr	r3, [r4, #12]
 80097a8:	6832      	ldr	r2, [r6, #0]
 80097aa:	1a9b      	subs	r3, r3, r2
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	dc26      	bgt.n	80097fe <_printf_common+0x96>
 80097b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	3b00      	subs	r3, #0
 80097b8:	bf18      	it	ne
 80097ba:	2301      	movne	r3, #1
 80097bc:	0692      	lsls	r2, r2, #26
 80097be:	d42b      	bmi.n	8009818 <_printf_common+0xb0>
 80097c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097c4:	4641      	mov	r1, r8
 80097c6:	4638      	mov	r0, r7
 80097c8:	47c8      	blx	r9
 80097ca:	3001      	adds	r0, #1
 80097cc:	d01e      	beq.n	800980c <_printf_common+0xa4>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	6922      	ldr	r2, [r4, #16]
 80097d2:	f003 0306 	and.w	r3, r3, #6
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	bf02      	ittt	eq
 80097da:	68e5      	ldreq	r5, [r4, #12]
 80097dc:	6833      	ldreq	r3, [r6, #0]
 80097de:	1aed      	subeq	r5, r5, r3
 80097e0:	68a3      	ldr	r3, [r4, #8]
 80097e2:	bf0c      	ite	eq
 80097e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097e8:	2500      	movne	r5, #0
 80097ea:	4293      	cmp	r3, r2
 80097ec:	bfc4      	itt	gt
 80097ee:	1a9b      	subgt	r3, r3, r2
 80097f0:	18ed      	addgt	r5, r5, r3
 80097f2:	2600      	movs	r6, #0
 80097f4:	341a      	adds	r4, #26
 80097f6:	42b5      	cmp	r5, r6
 80097f8:	d11a      	bne.n	8009830 <_printf_common+0xc8>
 80097fa:	2000      	movs	r0, #0
 80097fc:	e008      	b.n	8009810 <_printf_common+0xa8>
 80097fe:	2301      	movs	r3, #1
 8009800:	4652      	mov	r2, sl
 8009802:	4641      	mov	r1, r8
 8009804:	4638      	mov	r0, r7
 8009806:	47c8      	blx	r9
 8009808:	3001      	adds	r0, #1
 800980a:	d103      	bne.n	8009814 <_printf_common+0xac>
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	3501      	adds	r5, #1
 8009816:	e7c6      	b.n	80097a6 <_printf_common+0x3e>
 8009818:	18e1      	adds	r1, r4, r3
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	2030      	movs	r0, #48	@ 0x30
 800981e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009822:	4422      	add	r2, r4
 8009824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800982c:	3302      	adds	r3, #2
 800982e:	e7c7      	b.n	80097c0 <_printf_common+0x58>
 8009830:	2301      	movs	r3, #1
 8009832:	4622      	mov	r2, r4
 8009834:	4641      	mov	r1, r8
 8009836:	4638      	mov	r0, r7
 8009838:	47c8      	blx	r9
 800983a:	3001      	adds	r0, #1
 800983c:	d0e6      	beq.n	800980c <_printf_common+0xa4>
 800983e:	3601      	adds	r6, #1
 8009840:	e7d9      	b.n	80097f6 <_printf_common+0x8e>
	...

08009844 <_printf_i>:
 8009844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009848:	7e0f      	ldrb	r7, [r1, #24]
 800984a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800984c:	2f78      	cmp	r7, #120	@ 0x78
 800984e:	4691      	mov	r9, r2
 8009850:	4680      	mov	r8, r0
 8009852:	460c      	mov	r4, r1
 8009854:	469a      	mov	sl, r3
 8009856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800985a:	d807      	bhi.n	800986c <_printf_i+0x28>
 800985c:	2f62      	cmp	r7, #98	@ 0x62
 800985e:	d80a      	bhi.n	8009876 <_printf_i+0x32>
 8009860:	2f00      	cmp	r7, #0
 8009862:	f000 80d2 	beq.w	8009a0a <_printf_i+0x1c6>
 8009866:	2f58      	cmp	r7, #88	@ 0x58
 8009868:	f000 80b9 	beq.w	80099de <_printf_i+0x19a>
 800986c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009874:	e03a      	b.n	80098ec <_printf_i+0xa8>
 8009876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800987a:	2b15      	cmp	r3, #21
 800987c:	d8f6      	bhi.n	800986c <_printf_i+0x28>
 800987e:	a101      	add	r1, pc, #4	@ (adr r1, 8009884 <_printf_i+0x40>)
 8009880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009884:	080098dd 	.word	0x080098dd
 8009888:	080098f1 	.word	0x080098f1
 800988c:	0800986d 	.word	0x0800986d
 8009890:	0800986d 	.word	0x0800986d
 8009894:	0800986d 	.word	0x0800986d
 8009898:	0800986d 	.word	0x0800986d
 800989c:	080098f1 	.word	0x080098f1
 80098a0:	0800986d 	.word	0x0800986d
 80098a4:	0800986d 	.word	0x0800986d
 80098a8:	0800986d 	.word	0x0800986d
 80098ac:	0800986d 	.word	0x0800986d
 80098b0:	080099f1 	.word	0x080099f1
 80098b4:	0800991b 	.word	0x0800991b
 80098b8:	080099ab 	.word	0x080099ab
 80098bc:	0800986d 	.word	0x0800986d
 80098c0:	0800986d 	.word	0x0800986d
 80098c4:	08009a13 	.word	0x08009a13
 80098c8:	0800986d 	.word	0x0800986d
 80098cc:	0800991b 	.word	0x0800991b
 80098d0:	0800986d 	.word	0x0800986d
 80098d4:	0800986d 	.word	0x0800986d
 80098d8:	080099b3 	.word	0x080099b3
 80098dc:	6833      	ldr	r3, [r6, #0]
 80098de:	1d1a      	adds	r2, r3, #4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6032      	str	r2, [r6, #0]
 80098e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098ec:	2301      	movs	r3, #1
 80098ee:	e09d      	b.n	8009a2c <_printf_i+0x1e8>
 80098f0:	6833      	ldr	r3, [r6, #0]
 80098f2:	6820      	ldr	r0, [r4, #0]
 80098f4:	1d19      	adds	r1, r3, #4
 80098f6:	6031      	str	r1, [r6, #0]
 80098f8:	0606      	lsls	r6, r0, #24
 80098fa:	d501      	bpl.n	8009900 <_printf_i+0xbc>
 80098fc:	681d      	ldr	r5, [r3, #0]
 80098fe:	e003      	b.n	8009908 <_printf_i+0xc4>
 8009900:	0645      	lsls	r5, r0, #25
 8009902:	d5fb      	bpl.n	80098fc <_printf_i+0xb8>
 8009904:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009908:	2d00      	cmp	r5, #0
 800990a:	da03      	bge.n	8009914 <_printf_i+0xd0>
 800990c:	232d      	movs	r3, #45	@ 0x2d
 800990e:	426d      	negs	r5, r5
 8009910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009914:	4859      	ldr	r0, [pc, #356]	@ (8009a7c <_printf_i+0x238>)
 8009916:	230a      	movs	r3, #10
 8009918:	e011      	b.n	800993e <_printf_i+0xfa>
 800991a:	6821      	ldr	r1, [r4, #0]
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	0608      	lsls	r0, r1, #24
 8009920:	f853 5b04 	ldr.w	r5, [r3], #4
 8009924:	d402      	bmi.n	800992c <_printf_i+0xe8>
 8009926:	0649      	lsls	r1, r1, #25
 8009928:	bf48      	it	mi
 800992a:	b2ad      	uxthmi	r5, r5
 800992c:	2f6f      	cmp	r7, #111	@ 0x6f
 800992e:	4853      	ldr	r0, [pc, #332]	@ (8009a7c <_printf_i+0x238>)
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	bf14      	ite	ne
 8009934:	230a      	movne	r3, #10
 8009936:	2308      	moveq	r3, #8
 8009938:	2100      	movs	r1, #0
 800993a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800993e:	6866      	ldr	r6, [r4, #4]
 8009940:	60a6      	str	r6, [r4, #8]
 8009942:	2e00      	cmp	r6, #0
 8009944:	bfa2      	ittt	ge
 8009946:	6821      	ldrge	r1, [r4, #0]
 8009948:	f021 0104 	bicge.w	r1, r1, #4
 800994c:	6021      	strge	r1, [r4, #0]
 800994e:	b90d      	cbnz	r5, 8009954 <_printf_i+0x110>
 8009950:	2e00      	cmp	r6, #0
 8009952:	d04b      	beq.n	80099ec <_printf_i+0x1a8>
 8009954:	4616      	mov	r6, r2
 8009956:	fbb5 f1f3 	udiv	r1, r5, r3
 800995a:	fb03 5711 	mls	r7, r3, r1, r5
 800995e:	5dc7      	ldrb	r7, [r0, r7]
 8009960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009964:	462f      	mov	r7, r5
 8009966:	42bb      	cmp	r3, r7
 8009968:	460d      	mov	r5, r1
 800996a:	d9f4      	bls.n	8009956 <_printf_i+0x112>
 800996c:	2b08      	cmp	r3, #8
 800996e:	d10b      	bne.n	8009988 <_printf_i+0x144>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	07df      	lsls	r7, r3, #31
 8009974:	d508      	bpl.n	8009988 <_printf_i+0x144>
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	6861      	ldr	r1, [r4, #4]
 800997a:	4299      	cmp	r1, r3
 800997c:	bfde      	ittt	le
 800997e:	2330      	movle	r3, #48	@ 0x30
 8009980:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009984:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009988:	1b92      	subs	r2, r2, r6
 800998a:	6122      	str	r2, [r4, #16]
 800998c:	f8cd a000 	str.w	sl, [sp]
 8009990:	464b      	mov	r3, r9
 8009992:	aa03      	add	r2, sp, #12
 8009994:	4621      	mov	r1, r4
 8009996:	4640      	mov	r0, r8
 8009998:	f7ff fee6 	bl	8009768 <_printf_common>
 800999c:	3001      	adds	r0, #1
 800999e:	d14a      	bne.n	8009a36 <_printf_i+0x1f2>
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295
 80099a4:	b004      	add	sp, #16
 80099a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	f043 0320 	orr.w	r3, r3, #32
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	4833      	ldr	r0, [pc, #204]	@ (8009a80 <_printf_i+0x23c>)
 80099b4:	2778      	movs	r7, #120	@ 0x78
 80099b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	6831      	ldr	r1, [r6, #0]
 80099be:	061f      	lsls	r7, r3, #24
 80099c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80099c4:	d402      	bmi.n	80099cc <_printf_i+0x188>
 80099c6:	065f      	lsls	r7, r3, #25
 80099c8:	bf48      	it	mi
 80099ca:	b2ad      	uxthmi	r5, r5
 80099cc:	6031      	str	r1, [r6, #0]
 80099ce:	07d9      	lsls	r1, r3, #31
 80099d0:	bf44      	itt	mi
 80099d2:	f043 0320 	orrmi.w	r3, r3, #32
 80099d6:	6023      	strmi	r3, [r4, #0]
 80099d8:	b11d      	cbz	r5, 80099e2 <_printf_i+0x19e>
 80099da:	2310      	movs	r3, #16
 80099dc:	e7ac      	b.n	8009938 <_printf_i+0xf4>
 80099de:	4827      	ldr	r0, [pc, #156]	@ (8009a7c <_printf_i+0x238>)
 80099e0:	e7e9      	b.n	80099b6 <_printf_i+0x172>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	f023 0320 	bic.w	r3, r3, #32
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	e7f6      	b.n	80099da <_printf_i+0x196>
 80099ec:	4616      	mov	r6, r2
 80099ee:	e7bd      	b.n	800996c <_printf_i+0x128>
 80099f0:	6833      	ldr	r3, [r6, #0]
 80099f2:	6825      	ldr	r5, [r4, #0]
 80099f4:	6961      	ldr	r1, [r4, #20]
 80099f6:	1d18      	adds	r0, r3, #4
 80099f8:	6030      	str	r0, [r6, #0]
 80099fa:	062e      	lsls	r6, r5, #24
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	d501      	bpl.n	8009a04 <_printf_i+0x1c0>
 8009a00:	6019      	str	r1, [r3, #0]
 8009a02:	e002      	b.n	8009a0a <_printf_i+0x1c6>
 8009a04:	0668      	lsls	r0, r5, #25
 8009a06:	d5fb      	bpl.n	8009a00 <_printf_i+0x1bc>
 8009a08:	8019      	strh	r1, [r3, #0]
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	4616      	mov	r6, r2
 8009a10:	e7bc      	b.n	800998c <_printf_i+0x148>
 8009a12:	6833      	ldr	r3, [r6, #0]
 8009a14:	1d1a      	adds	r2, r3, #4
 8009a16:	6032      	str	r2, [r6, #0]
 8009a18:	681e      	ldr	r6, [r3, #0]
 8009a1a:	6862      	ldr	r2, [r4, #4]
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7f6 fbde 	bl	80001e0 <memchr>
 8009a24:	b108      	cbz	r0, 8009a2a <_printf_i+0x1e6>
 8009a26:	1b80      	subs	r0, r0, r6
 8009a28:	6060      	str	r0, [r4, #4]
 8009a2a:	6863      	ldr	r3, [r4, #4]
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a34:	e7aa      	b.n	800998c <_printf_i+0x148>
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	4632      	mov	r2, r6
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	47d0      	blx	sl
 8009a40:	3001      	adds	r0, #1
 8009a42:	d0ad      	beq.n	80099a0 <_printf_i+0x15c>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	079b      	lsls	r3, r3, #30
 8009a48:	d413      	bmi.n	8009a72 <_printf_i+0x22e>
 8009a4a:	68e0      	ldr	r0, [r4, #12]
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	4298      	cmp	r0, r3
 8009a50:	bfb8      	it	lt
 8009a52:	4618      	movlt	r0, r3
 8009a54:	e7a6      	b.n	80099a4 <_printf_i+0x160>
 8009a56:	2301      	movs	r3, #1
 8009a58:	4632      	mov	r2, r6
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	47d0      	blx	sl
 8009a60:	3001      	adds	r0, #1
 8009a62:	d09d      	beq.n	80099a0 <_printf_i+0x15c>
 8009a64:	3501      	adds	r5, #1
 8009a66:	68e3      	ldr	r3, [r4, #12]
 8009a68:	9903      	ldr	r1, [sp, #12]
 8009a6a:	1a5b      	subs	r3, r3, r1
 8009a6c:	42ab      	cmp	r3, r5
 8009a6e:	dcf2      	bgt.n	8009a56 <_printf_i+0x212>
 8009a70:	e7eb      	b.n	8009a4a <_printf_i+0x206>
 8009a72:	2500      	movs	r5, #0
 8009a74:	f104 0619 	add.w	r6, r4, #25
 8009a78:	e7f5      	b.n	8009a66 <_printf_i+0x222>
 8009a7a:	bf00      	nop
 8009a7c:	0800e30a 	.word	0x0800e30a
 8009a80:	0800e31b 	.word	0x0800e31b

08009a84 <_scanf_float>:
 8009a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a88:	b087      	sub	sp, #28
 8009a8a:	4617      	mov	r7, r2
 8009a8c:	9303      	str	r3, [sp, #12]
 8009a8e:	688b      	ldr	r3, [r1, #8]
 8009a90:	1e5a      	subs	r2, r3, #1
 8009a92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009a96:	bf81      	itttt	hi
 8009a98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009a9c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009aa0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009aa4:	608b      	strhi	r3, [r1, #8]
 8009aa6:	680b      	ldr	r3, [r1, #0]
 8009aa8:	460a      	mov	r2, r1
 8009aaa:	f04f 0500 	mov.w	r5, #0
 8009aae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009ab2:	f842 3b1c 	str.w	r3, [r2], #28
 8009ab6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009aba:	4680      	mov	r8, r0
 8009abc:	460c      	mov	r4, r1
 8009abe:	bf98      	it	ls
 8009ac0:	f04f 0b00 	movls.w	fp, #0
 8009ac4:	9201      	str	r2, [sp, #4]
 8009ac6:	4616      	mov	r6, r2
 8009ac8:	46aa      	mov	sl, r5
 8009aca:	46a9      	mov	r9, r5
 8009acc:	9502      	str	r5, [sp, #8]
 8009ace:	68a2      	ldr	r2, [r4, #8]
 8009ad0:	b152      	cbz	r2, 8009ae8 <_scanf_float+0x64>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b4e      	cmp	r3, #78	@ 0x4e
 8009ad8:	d864      	bhi.n	8009ba4 <_scanf_float+0x120>
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d83c      	bhi.n	8009b58 <_scanf_float+0xd4>
 8009ade:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009ae2:	b2c8      	uxtb	r0, r1
 8009ae4:	280e      	cmp	r0, #14
 8009ae6:	d93a      	bls.n	8009b5e <_scanf_float+0xda>
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	d003      	beq.n	8009af6 <_scanf_float+0x72>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009afa:	f1ba 0f01 	cmp.w	sl, #1
 8009afe:	f200 8117 	bhi.w	8009d30 <_scanf_float+0x2ac>
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	429e      	cmp	r6, r3
 8009b06:	f200 8108 	bhi.w	8009d1a <_scanf_float+0x296>
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	b007      	add	sp, #28
 8009b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009b16:	2a0d      	cmp	r2, #13
 8009b18:	d8e6      	bhi.n	8009ae8 <_scanf_float+0x64>
 8009b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b20 <_scanf_float+0x9c>)
 8009b1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b20:	08009c67 	.word	0x08009c67
 8009b24:	08009ae9 	.word	0x08009ae9
 8009b28:	08009ae9 	.word	0x08009ae9
 8009b2c:	08009ae9 	.word	0x08009ae9
 8009b30:	08009cc7 	.word	0x08009cc7
 8009b34:	08009c9f 	.word	0x08009c9f
 8009b38:	08009ae9 	.word	0x08009ae9
 8009b3c:	08009ae9 	.word	0x08009ae9
 8009b40:	08009c75 	.word	0x08009c75
 8009b44:	08009ae9 	.word	0x08009ae9
 8009b48:	08009ae9 	.word	0x08009ae9
 8009b4c:	08009ae9 	.word	0x08009ae9
 8009b50:	08009ae9 	.word	0x08009ae9
 8009b54:	08009c2d 	.word	0x08009c2d
 8009b58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009b5c:	e7db      	b.n	8009b16 <_scanf_float+0x92>
 8009b5e:	290e      	cmp	r1, #14
 8009b60:	d8c2      	bhi.n	8009ae8 <_scanf_float+0x64>
 8009b62:	a001      	add	r0, pc, #4	@ (adr r0, 8009b68 <_scanf_float+0xe4>)
 8009b64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009b68:	08009c1d 	.word	0x08009c1d
 8009b6c:	08009ae9 	.word	0x08009ae9
 8009b70:	08009c1d 	.word	0x08009c1d
 8009b74:	08009cb3 	.word	0x08009cb3
 8009b78:	08009ae9 	.word	0x08009ae9
 8009b7c:	08009bc5 	.word	0x08009bc5
 8009b80:	08009c03 	.word	0x08009c03
 8009b84:	08009c03 	.word	0x08009c03
 8009b88:	08009c03 	.word	0x08009c03
 8009b8c:	08009c03 	.word	0x08009c03
 8009b90:	08009c03 	.word	0x08009c03
 8009b94:	08009c03 	.word	0x08009c03
 8009b98:	08009c03 	.word	0x08009c03
 8009b9c:	08009c03 	.word	0x08009c03
 8009ba0:	08009c03 	.word	0x08009c03
 8009ba4:	2b6e      	cmp	r3, #110	@ 0x6e
 8009ba6:	d809      	bhi.n	8009bbc <_scanf_float+0x138>
 8009ba8:	2b60      	cmp	r3, #96	@ 0x60
 8009baa:	d8b2      	bhi.n	8009b12 <_scanf_float+0x8e>
 8009bac:	2b54      	cmp	r3, #84	@ 0x54
 8009bae:	d07b      	beq.n	8009ca8 <_scanf_float+0x224>
 8009bb0:	2b59      	cmp	r3, #89	@ 0x59
 8009bb2:	d199      	bne.n	8009ae8 <_scanf_float+0x64>
 8009bb4:	2d07      	cmp	r5, #7
 8009bb6:	d197      	bne.n	8009ae8 <_scanf_float+0x64>
 8009bb8:	2508      	movs	r5, #8
 8009bba:	e02c      	b.n	8009c16 <_scanf_float+0x192>
 8009bbc:	2b74      	cmp	r3, #116	@ 0x74
 8009bbe:	d073      	beq.n	8009ca8 <_scanf_float+0x224>
 8009bc0:	2b79      	cmp	r3, #121	@ 0x79
 8009bc2:	e7f6      	b.n	8009bb2 <_scanf_float+0x12e>
 8009bc4:	6821      	ldr	r1, [r4, #0]
 8009bc6:	05c8      	lsls	r0, r1, #23
 8009bc8:	d51b      	bpl.n	8009c02 <_scanf_float+0x17e>
 8009bca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009bce:	6021      	str	r1, [r4, #0]
 8009bd0:	f109 0901 	add.w	r9, r9, #1
 8009bd4:	f1bb 0f00 	cmp.w	fp, #0
 8009bd8:	d003      	beq.n	8009be2 <_scanf_float+0x15e>
 8009bda:	3201      	adds	r2, #1
 8009bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009be0:	60a2      	str	r2, [r4, #8]
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	60a3      	str	r3, [r4, #8]
 8009be8:	6923      	ldr	r3, [r4, #16]
 8009bea:	3301      	adds	r3, #1
 8009bec:	6123      	str	r3, [r4, #16]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	607b      	str	r3, [r7, #4]
 8009bf6:	f340 8087 	ble.w	8009d08 <_scanf_float+0x284>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	e765      	b.n	8009ace <_scanf_float+0x4a>
 8009c02:	eb1a 0105 	adds.w	r1, sl, r5
 8009c06:	f47f af6f 	bne.w	8009ae8 <_scanf_float+0x64>
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009c10:	6022      	str	r2, [r4, #0]
 8009c12:	460d      	mov	r5, r1
 8009c14:	468a      	mov	sl, r1
 8009c16:	f806 3b01 	strb.w	r3, [r6], #1
 8009c1a:	e7e2      	b.n	8009be2 <_scanf_float+0x15e>
 8009c1c:	6822      	ldr	r2, [r4, #0]
 8009c1e:	0610      	lsls	r0, r2, #24
 8009c20:	f57f af62 	bpl.w	8009ae8 <_scanf_float+0x64>
 8009c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009c28:	6022      	str	r2, [r4, #0]
 8009c2a:	e7f4      	b.n	8009c16 <_scanf_float+0x192>
 8009c2c:	f1ba 0f00 	cmp.w	sl, #0
 8009c30:	d10e      	bne.n	8009c50 <_scanf_float+0x1cc>
 8009c32:	f1b9 0f00 	cmp.w	r9, #0
 8009c36:	d10e      	bne.n	8009c56 <_scanf_float+0x1d2>
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009c3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009c42:	d108      	bne.n	8009c56 <_scanf_float+0x1d2>
 8009c44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009c48:	6022      	str	r2, [r4, #0]
 8009c4a:	f04f 0a01 	mov.w	sl, #1
 8009c4e:	e7e2      	b.n	8009c16 <_scanf_float+0x192>
 8009c50:	f1ba 0f02 	cmp.w	sl, #2
 8009c54:	d055      	beq.n	8009d02 <_scanf_float+0x27e>
 8009c56:	2d01      	cmp	r5, #1
 8009c58:	d002      	beq.n	8009c60 <_scanf_float+0x1dc>
 8009c5a:	2d04      	cmp	r5, #4
 8009c5c:	f47f af44 	bne.w	8009ae8 <_scanf_float+0x64>
 8009c60:	3501      	adds	r5, #1
 8009c62:	b2ed      	uxtb	r5, r5
 8009c64:	e7d7      	b.n	8009c16 <_scanf_float+0x192>
 8009c66:	f1ba 0f01 	cmp.w	sl, #1
 8009c6a:	f47f af3d 	bne.w	8009ae8 <_scanf_float+0x64>
 8009c6e:	f04f 0a02 	mov.w	sl, #2
 8009c72:	e7d0      	b.n	8009c16 <_scanf_float+0x192>
 8009c74:	b97d      	cbnz	r5, 8009c96 <_scanf_float+0x212>
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	f47f af38 	bne.w	8009aee <_scanf_float+0x6a>
 8009c7e:	6822      	ldr	r2, [r4, #0]
 8009c80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009c84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009c88:	f040 8108 	bne.w	8009e9c <_scanf_float+0x418>
 8009c8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009c90:	6022      	str	r2, [r4, #0]
 8009c92:	2501      	movs	r5, #1
 8009c94:	e7bf      	b.n	8009c16 <_scanf_float+0x192>
 8009c96:	2d03      	cmp	r5, #3
 8009c98:	d0e2      	beq.n	8009c60 <_scanf_float+0x1dc>
 8009c9a:	2d05      	cmp	r5, #5
 8009c9c:	e7de      	b.n	8009c5c <_scanf_float+0x1d8>
 8009c9e:	2d02      	cmp	r5, #2
 8009ca0:	f47f af22 	bne.w	8009ae8 <_scanf_float+0x64>
 8009ca4:	2503      	movs	r5, #3
 8009ca6:	e7b6      	b.n	8009c16 <_scanf_float+0x192>
 8009ca8:	2d06      	cmp	r5, #6
 8009caa:	f47f af1d 	bne.w	8009ae8 <_scanf_float+0x64>
 8009cae:	2507      	movs	r5, #7
 8009cb0:	e7b1      	b.n	8009c16 <_scanf_float+0x192>
 8009cb2:	6822      	ldr	r2, [r4, #0]
 8009cb4:	0591      	lsls	r1, r2, #22
 8009cb6:	f57f af17 	bpl.w	8009ae8 <_scanf_float+0x64>
 8009cba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009cbe:	6022      	str	r2, [r4, #0]
 8009cc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cc4:	e7a7      	b.n	8009c16 <_scanf_float+0x192>
 8009cc6:	6822      	ldr	r2, [r4, #0]
 8009cc8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009ccc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009cd0:	d006      	beq.n	8009ce0 <_scanf_float+0x25c>
 8009cd2:	0550      	lsls	r0, r2, #21
 8009cd4:	f57f af08 	bpl.w	8009ae8 <_scanf_float+0x64>
 8009cd8:	f1b9 0f00 	cmp.w	r9, #0
 8009cdc:	f000 80de 	beq.w	8009e9c <_scanf_float+0x418>
 8009ce0:	0591      	lsls	r1, r2, #22
 8009ce2:	bf58      	it	pl
 8009ce4:	9902      	ldrpl	r1, [sp, #8]
 8009ce6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009cea:	bf58      	it	pl
 8009cec:	eba9 0101 	subpl.w	r1, r9, r1
 8009cf0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009cf4:	bf58      	it	pl
 8009cf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009cfa:	6022      	str	r2, [r4, #0]
 8009cfc:	f04f 0900 	mov.w	r9, #0
 8009d00:	e789      	b.n	8009c16 <_scanf_float+0x192>
 8009d02:	f04f 0a03 	mov.w	sl, #3
 8009d06:	e786      	b.n	8009c16 <_scanf_float+0x192>
 8009d08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	4640      	mov	r0, r8
 8009d10:	4798      	blx	r3
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f43f aedb 	beq.w	8009ace <_scanf_float+0x4a>
 8009d18:	e6e6      	b.n	8009ae8 <_scanf_float+0x64>
 8009d1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d22:	463a      	mov	r2, r7
 8009d24:	4640      	mov	r0, r8
 8009d26:	4798      	blx	r3
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	6123      	str	r3, [r4, #16]
 8009d2e:	e6e8      	b.n	8009b02 <_scanf_float+0x7e>
 8009d30:	1e6b      	subs	r3, r5, #1
 8009d32:	2b06      	cmp	r3, #6
 8009d34:	d824      	bhi.n	8009d80 <_scanf_float+0x2fc>
 8009d36:	2d02      	cmp	r5, #2
 8009d38:	d836      	bhi.n	8009da8 <_scanf_float+0x324>
 8009d3a:	9b01      	ldr	r3, [sp, #4]
 8009d3c:	429e      	cmp	r6, r3
 8009d3e:	f67f aee4 	bls.w	8009b0a <_scanf_float+0x86>
 8009d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	4798      	blx	r3
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	6123      	str	r3, [r4, #16]
 8009d56:	e7f0      	b.n	8009d3a <_scanf_float+0x2b6>
 8009d58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009d60:	463a      	mov	r2, r7
 8009d62:	4640      	mov	r0, r8
 8009d64:	4798      	blx	r3
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d70:	fa5f fa8a 	uxtb.w	sl, sl
 8009d74:	f1ba 0f02 	cmp.w	sl, #2
 8009d78:	d1ee      	bne.n	8009d58 <_scanf_float+0x2d4>
 8009d7a:	3d03      	subs	r5, #3
 8009d7c:	b2ed      	uxtb	r5, r5
 8009d7e:	1b76      	subs	r6, r6, r5
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	05da      	lsls	r2, r3, #23
 8009d84:	d530      	bpl.n	8009de8 <_scanf_float+0x364>
 8009d86:	055b      	lsls	r3, r3, #21
 8009d88:	d511      	bpl.n	8009dae <_scanf_float+0x32a>
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	429e      	cmp	r6, r3
 8009d8e:	f67f aebc 	bls.w	8009b0a <_scanf_float+0x86>
 8009d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d9a:	463a      	mov	r2, r7
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	4798      	blx	r3
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	e7f0      	b.n	8009d8a <_scanf_float+0x306>
 8009da8:	46aa      	mov	sl, r5
 8009daa:	46b3      	mov	fp, r6
 8009dac:	e7de      	b.n	8009d6c <_scanf_float+0x2e8>
 8009dae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009db2:	6923      	ldr	r3, [r4, #16]
 8009db4:	2965      	cmp	r1, #101	@ 0x65
 8009db6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009dba:	f106 35ff 	add.w	r5, r6, #4294967295
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	d00c      	beq.n	8009ddc <_scanf_float+0x358>
 8009dc2:	2945      	cmp	r1, #69	@ 0x45
 8009dc4:	d00a      	beq.n	8009ddc <_scanf_float+0x358>
 8009dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4640      	mov	r0, r8
 8009dce:	4798      	blx	r3
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	1eb5      	subs	r5, r6, #2
 8009dda:	6123      	str	r3, [r4, #16]
 8009ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009de0:	463a      	mov	r2, r7
 8009de2:	4640      	mov	r0, r8
 8009de4:	4798      	blx	r3
 8009de6:	462e      	mov	r6, r5
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	f012 0210 	ands.w	r2, r2, #16
 8009dee:	d001      	beq.n	8009df4 <_scanf_float+0x370>
 8009df0:	2000      	movs	r0, #0
 8009df2:	e68b      	b.n	8009b0c <_scanf_float+0x88>
 8009df4:	7032      	strb	r2, [r6, #0]
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e00:	d11c      	bne.n	8009e3c <_scanf_float+0x3b8>
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	454b      	cmp	r3, r9
 8009e06:	eba3 0209 	sub.w	r2, r3, r9
 8009e0a:	d123      	bne.n	8009e54 <_scanf_float+0x3d0>
 8009e0c:	9901      	ldr	r1, [sp, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4640      	mov	r0, r8
 8009e12:	f002 fc21 	bl	800c658 <_strtod_r>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	6821      	ldr	r1, [r4, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f011 0f02 	tst.w	r1, #2
 8009e20:	ec57 6b10 	vmov	r6, r7, d0
 8009e24:	f103 0204 	add.w	r2, r3, #4
 8009e28:	d01f      	beq.n	8009e6a <_scanf_float+0x3e6>
 8009e2a:	9903      	ldr	r1, [sp, #12]
 8009e2c:	600a      	str	r2, [r1, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	e9c3 6700 	strd	r6, r7, [r3]
 8009e34:	68e3      	ldr	r3, [r4, #12]
 8009e36:	3301      	adds	r3, #1
 8009e38:	60e3      	str	r3, [r4, #12]
 8009e3a:	e7d9      	b.n	8009df0 <_scanf_float+0x36c>
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0e4      	beq.n	8009e0c <_scanf_float+0x388>
 8009e42:	9905      	ldr	r1, [sp, #20]
 8009e44:	230a      	movs	r3, #10
 8009e46:	3101      	adds	r1, #1
 8009e48:	4640      	mov	r0, r8
 8009e4a:	f002 fc85 	bl	800c758 <_strtol_r>
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	9e05      	ldr	r6, [sp, #20]
 8009e52:	1ac2      	subs	r2, r0, r3
 8009e54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009e58:	429e      	cmp	r6, r3
 8009e5a:	bf28      	it	cs
 8009e5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009e60:	4910      	ldr	r1, [pc, #64]	@ (8009ea4 <_scanf_float+0x420>)
 8009e62:	4630      	mov	r0, r6
 8009e64:	f000 f8e4 	bl	800a030 <siprintf>
 8009e68:	e7d0      	b.n	8009e0c <_scanf_float+0x388>
 8009e6a:	f011 0f04 	tst.w	r1, #4
 8009e6e:	9903      	ldr	r1, [sp, #12]
 8009e70:	600a      	str	r2, [r1, #0]
 8009e72:	d1dc      	bne.n	8009e2e <_scanf_float+0x3aa>
 8009e74:	681d      	ldr	r5, [r3, #0]
 8009e76:	4632      	mov	r2, r6
 8009e78:	463b      	mov	r3, r7
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	f7f6 fe5d 	bl	8000b3c <__aeabi_dcmpun>
 8009e82:	b128      	cbz	r0, 8009e90 <_scanf_float+0x40c>
 8009e84:	4808      	ldr	r0, [pc, #32]	@ (8009ea8 <_scanf_float+0x424>)
 8009e86:	f000 f9df 	bl	800a248 <nanf>
 8009e8a:	ed85 0a00 	vstr	s0, [r5]
 8009e8e:	e7d1      	b.n	8009e34 <_scanf_float+0x3b0>
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 feb0 	bl	8000bf8 <__aeabi_d2f>
 8009e98:	6028      	str	r0, [r5, #0]
 8009e9a:	e7cb      	b.n	8009e34 <_scanf_float+0x3b0>
 8009e9c:	f04f 0900 	mov.w	r9, #0
 8009ea0:	e629      	b.n	8009af6 <_scanf_float+0x72>
 8009ea2:	bf00      	nop
 8009ea4:	0800e32c 	.word	0x0800e32c
 8009ea8:	0800e6c5 	.word	0x0800e6c5

08009eac <std>:
 8009eac:	2300      	movs	r3, #0
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8009eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eba:	6083      	str	r3, [r0, #8]
 8009ebc:	8181      	strh	r1, [r0, #12]
 8009ebe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ec0:	81c2      	strh	r2, [r0, #14]
 8009ec2:	6183      	str	r3, [r0, #24]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	2208      	movs	r2, #8
 8009ec8:	305c      	adds	r0, #92	@ 0x5c
 8009eca:	f000 f92e 	bl	800a12a <memset>
 8009ece:	4b0d      	ldr	r3, [pc, #52]	@ (8009f04 <std+0x58>)
 8009ed0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8009f08 <std+0x5c>)
 8009ed4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f0c <std+0x60>)
 8009ed8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009eda:	4b0d      	ldr	r3, [pc, #52]	@ (8009f10 <std+0x64>)
 8009edc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ede:	4b0d      	ldr	r3, [pc, #52]	@ (8009f14 <std+0x68>)
 8009ee0:	6224      	str	r4, [r4, #32]
 8009ee2:	429c      	cmp	r4, r3
 8009ee4:	d006      	beq.n	8009ef4 <std+0x48>
 8009ee6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009eea:	4294      	cmp	r4, r2
 8009eec:	d002      	beq.n	8009ef4 <std+0x48>
 8009eee:	33d0      	adds	r3, #208	@ 0xd0
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	d105      	bne.n	8009f00 <std+0x54>
 8009ef4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009efc:	f000 b992 	b.w	800a224 <__retarget_lock_init_recursive>
 8009f00:	bd10      	pop	{r4, pc}
 8009f02:	bf00      	nop
 8009f04:	0800a071 	.word	0x0800a071
 8009f08:	0800a093 	.word	0x0800a093
 8009f0c:	0800a0cb 	.word	0x0800a0cb
 8009f10:	0800a0ef 	.word	0x0800a0ef
 8009f14:	20002c18 	.word	0x20002c18

08009f18 <stdio_exit_handler>:
 8009f18:	4a02      	ldr	r2, [pc, #8]	@ (8009f24 <stdio_exit_handler+0xc>)
 8009f1a:	4903      	ldr	r1, [pc, #12]	@ (8009f28 <stdio_exit_handler+0x10>)
 8009f1c:	4803      	ldr	r0, [pc, #12]	@ (8009f2c <stdio_exit_handler+0x14>)
 8009f1e:	f000 b869 	b.w	8009ff4 <_fwalk_sglue>
 8009f22:	bf00      	nop
 8009f24:	20000094 	.word	0x20000094
 8009f28:	0800cb15 	.word	0x0800cb15
 8009f2c:	200000a4 	.word	0x200000a4

08009f30 <cleanup_stdio>:
 8009f30:	6841      	ldr	r1, [r0, #4]
 8009f32:	4b0c      	ldr	r3, [pc, #48]	@ (8009f64 <cleanup_stdio+0x34>)
 8009f34:	4299      	cmp	r1, r3
 8009f36:	b510      	push	{r4, lr}
 8009f38:	4604      	mov	r4, r0
 8009f3a:	d001      	beq.n	8009f40 <cleanup_stdio+0x10>
 8009f3c:	f002 fdea 	bl	800cb14 <_fflush_r>
 8009f40:	68a1      	ldr	r1, [r4, #8]
 8009f42:	4b09      	ldr	r3, [pc, #36]	@ (8009f68 <cleanup_stdio+0x38>)
 8009f44:	4299      	cmp	r1, r3
 8009f46:	d002      	beq.n	8009f4e <cleanup_stdio+0x1e>
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f002 fde3 	bl	800cb14 <_fflush_r>
 8009f4e:	68e1      	ldr	r1, [r4, #12]
 8009f50:	4b06      	ldr	r3, [pc, #24]	@ (8009f6c <cleanup_stdio+0x3c>)
 8009f52:	4299      	cmp	r1, r3
 8009f54:	d004      	beq.n	8009f60 <cleanup_stdio+0x30>
 8009f56:	4620      	mov	r0, r4
 8009f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f5c:	f002 bdda 	b.w	800cb14 <_fflush_r>
 8009f60:	bd10      	pop	{r4, pc}
 8009f62:	bf00      	nop
 8009f64:	20002c18 	.word	0x20002c18
 8009f68:	20002c80 	.word	0x20002c80
 8009f6c:	20002ce8 	.word	0x20002ce8

08009f70 <global_stdio_init.part.0>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa0 <global_stdio_init.part.0+0x30>)
 8009f74:	4c0b      	ldr	r4, [pc, #44]	@ (8009fa4 <global_stdio_init.part.0+0x34>)
 8009f76:	4a0c      	ldr	r2, [pc, #48]	@ (8009fa8 <global_stdio_init.part.0+0x38>)
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2104      	movs	r1, #4
 8009f80:	f7ff ff94 	bl	8009eac <std>
 8009f84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f88:	2201      	movs	r2, #1
 8009f8a:	2109      	movs	r1, #9
 8009f8c:	f7ff ff8e 	bl	8009eac <std>
 8009f90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f94:	2202      	movs	r2, #2
 8009f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f9a:	2112      	movs	r1, #18
 8009f9c:	f7ff bf86 	b.w	8009eac <std>
 8009fa0:	20002d50 	.word	0x20002d50
 8009fa4:	20002c18 	.word	0x20002c18
 8009fa8:	08009f19 	.word	0x08009f19

08009fac <__sfp_lock_acquire>:
 8009fac:	4801      	ldr	r0, [pc, #4]	@ (8009fb4 <__sfp_lock_acquire+0x8>)
 8009fae:	f000 b93a 	b.w	800a226 <__retarget_lock_acquire_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	20002d59 	.word	0x20002d59

08009fb8 <__sfp_lock_release>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	@ (8009fc0 <__sfp_lock_release+0x8>)
 8009fba:	f000 b935 	b.w	800a228 <__retarget_lock_release_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	20002d59 	.word	0x20002d59

08009fc4 <__sinit>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	f7ff fff0 	bl	8009fac <__sfp_lock_acquire>
 8009fcc:	6a23      	ldr	r3, [r4, #32]
 8009fce:	b11b      	cbz	r3, 8009fd8 <__sinit+0x14>
 8009fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fd4:	f7ff bff0 	b.w	8009fb8 <__sfp_lock_release>
 8009fd8:	4b04      	ldr	r3, [pc, #16]	@ (8009fec <__sinit+0x28>)
 8009fda:	6223      	str	r3, [r4, #32]
 8009fdc:	4b04      	ldr	r3, [pc, #16]	@ (8009ff0 <__sinit+0x2c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1f5      	bne.n	8009fd0 <__sinit+0xc>
 8009fe4:	f7ff ffc4 	bl	8009f70 <global_stdio_init.part.0>
 8009fe8:	e7f2      	b.n	8009fd0 <__sinit+0xc>
 8009fea:	bf00      	nop
 8009fec:	08009f31 	.word	0x08009f31
 8009ff0:	20002d50 	.word	0x20002d50

08009ff4 <_fwalk_sglue>:
 8009ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	4688      	mov	r8, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	2600      	movs	r6, #0
 800a000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a004:	f1b9 0901 	subs.w	r9, r9, #1
 800a008:	d505      	bpl.n	800a016 <_fwalk_sglue+0x22>
 800a00a:	6824      	ldr	r4, [r4, #0]
 800a00c:	2c00      	cmp	r4, #0
 800a00e:	d1f7      	bne.n	800a000 <_fwalk_sglue+0xc>
 800a010:	4630      	mov	r0, r6
 800a012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a016:	89ab      	ldrh	r3, [r5, #12]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d907      	bls.n	800a02c <_fwalk_sglue+0x38>
 800a01c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a020:	3301      	adds	r3, #1
 800a022:	d003      	beq.n	800a02c <_fwalk_sglue+0x38>
 800a024:	4629      	mov	r1, r5
 800a026:	4638      	mov	r0, r7
 800a028:	47c0      	blx	r8
 800a02a:	4306      	orrs	r6, r0
 800a02c:	3568      	adds	r5, #104	@ 0x68
 800a02e:	e7e9      	b.n	800a004 <_fwalk_sglue+0x10>

0800a030 <siprintf>:
 800a030:	b40e      	push	{r1, r2, r3}
 800a032:	b500      	push	{lr}
 800a034:	b09c      	sub	sp, #112	@ 0x70
 800a036:	ab1d      	add	r3, sp, #116	@ 0x74
 800a038:	9002      	str	r0, [sp, #8]
 800a03a:	9006      	str	r0, [sp, #24]
 800a03c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a040:	4809      	ldr	r0, [pc, #36]	@ (800a068 <siprintf+0x38>)
 800a042:	9107      	str	r1, [sp, #28]
 800a044:	9104      	str	r1, [sp, #16]
 800a046:	4909      	ldr	r1, [pc, #36]	@ (800a06c <siprintf+0x3c>)
 800a048:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04c:	9105      	str	r1, [sp, #20]
 800a04e:	6800      	ldr	r0, [r0, #0]
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	a902      	add	r1, sp, #8
 800a054:	f002 fbde 	bl	800c814 <_svfiprintf_r>
 800a058:	9b02      	ldr	r3, [sp, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	701a      	strb	r2, [r3, #0]
 800a05e:	b01c      	add	sp, #112	@ 0x70
 800a060:	f85d eb04 	ldr.w	lr, [sp], #4
 800a064:	b003      	add	sp, #12
 800a066:	4770      	bx	lr
 800a068:	200000a0 	.word	0x200000a0
 800a06c:	ffff0208 	.word	0xffff0208

0800a070 <__sread>:
 800a070:	b510      	push	{r4, lr}
 800a072:	460c      	mov	r4, r1
 800a074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a078:	f000 f886 	bl	800a188 <_read_r>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	bfab      	itete	ge
 800a080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a082:	89a3      	ldrhlt	r3, [r4, #12]
 800a084:	181b      	addge	r3, r3, r0
 800a086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a08a:	bfac      	ite	ge
 800a08c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a08e:	81a3      	strhlt	r3, [r4, #12]
 800a090:	bd10      	pop	{r4, pc}

0800a092 <__swrite>:
 800a092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	461f      	mov	r7, r3
 800a098:	898b      	ldrh	r3, [r1, #12]
 800a09a:	05db      	lsls	r3, r3, #23
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	d505      	bpl.n	800a0b0 <__swrite+0x1e>
 800a0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f000 f85a 	bl	800a164 <_lseek_r>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	4632      	mov	r2, r6
 800a0be:	463b      	mov	r3, r7
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c6:	f000 b871 	b.w	800a1ac <_write_r>

0800a0ca <__sseek>:
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d2:	f000 f847 	bl	800a164 <_lseek_r>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	bf15      	itete	ne
 800a0dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a0de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a0e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a0e6:	81a3      	strheq	r3, [r4, #12]
 800a0e8:	bf18      	it	ne
 800a0ea:	81a3      	strhne	r3, [r4, #12]
 800a0ec:	bd10      	pop	{r4, pc}

0800a0ee <__sclose>:
 800a0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f2:	f000 b827 	b.w	800a144 <_close_r>

0800a0f6 <memmove>:
 800a0f6:	4288      	cmp	r0, r1
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	eb01 0402 	add.w	r4, r1, r2
 800a0fe:	d902      	bls.n	800a106 <memmove+0x10>
 800a100:	4284      	cmp	r4, r0
 800a102:	4623      	mov	r3, r4
 800a104:	d807      	bhi.n	800a116 <memmove+0x20>
 800a106:	1e43      	subs	r3, r0, #1
 800a108:	42a1      	cmp	r1, r4
 800a10a:	d008      	beq.n	800a11e <memmove+0x28>
 800a10c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a110:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a114:	e7f8      	b.n	800a108 <memmove+0x12>
 800a116:	4402      	add	r2, r0
 800a118:	4601      	mov	r1, r0
 800a11a:	428a      	cmp	r2, r1
 800a11c:	d100      	bne.n	800a120 <memmove+0x2a>
 800a11e:	bd10      	pop	{r4, pc}
 800a120:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a124:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a128:	e7f7      	b.n	800a11a <memmove+0x24>

0800a12a <memset>:
 800a12a:	4402      	add	r2, r0
 800a12c:	4603      	mov	r3, r0
 800a12e:	4293      	cmp	r3, r2
 800a130:	d100      	bne.n	800a134 <memset+0xa>
 800a132:	4770      	bx	lr
 800a134:	f803 1b01 	strb.w	r1, [r3], #1
 800a138:	e7f9      	b.n	800a12e <memset+0x4>
	...

0800a13c <_localeconv_r>:
 800a13c:	4800      	ldr	r0, [pc, #0]	@ (800a140 <_localeconv_r+0x4>)
 800a13e:	4770      	bx	lr
 800a140:	200001e0 	.word	0x200001e0

0800a144 <_close_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d06      	ldr	r5, [pc, #24]	@ (800a160 <_close_r+0x1c>)
 800a148:	2300      	movs	r3, #0
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	f7f9 fc92 	bl	8003a78 <_close>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_close_r+0x1a>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_close_r+0x1a>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	20002d54 	.word	0x20002d54

0800a164 <_lseek_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	@ (800a184 <_lseek_r+0x20>)
 800a168:	4604      	mov	r4, r0
 800a16a:	4608      	mov	r0, r1
 800a16c:	4611      	mov	r1, r2
 800a16e:	2200      	movs	r2, #0
 800a170:	602a      	str	r2, [r5, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	f7f9 fca7 	bl	8003ac6 <_lseek>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_lseek_r+0x1e>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_lseek_r+0x1e>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20002d54 	.word	0x20002d54

0800a188 <_read_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4d07      	ldr	r5, [pc, #28]	@ (800a1a8 <_read_r+0x20>)
 800a18c:	4604      	mov	r4, r0
 800a18e:	4608      	mov	r0, r1
 800a190:	4611      	mov	r1, r2
 800a192:	2200      	movs	r2, #0
 800a194:	602a      	str	r2, [r5, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	f7f9 fc35 	bl	8003a06 <_read>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d102      	bne.n	800a1a6 <_read_r+0x1e>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	b103      	cbz	r3, 800a1a6 <_read_r+0x1e>
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	20002d54 	.word	0x20002d54

0800a1ac <_write_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d07      	ldr	r5, [pc, #28]	@ (800a1cc <_write_r+0x20>)
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4608      	mov	r0, r1
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	602a      	str	r2, [r5, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f7f9 fc40 	bl	8003a40 <_write>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_write_r+0x1e>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_write_r+0x1e>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	20002d54 	.word	0x20002d54

0800a1d0 <__errno>:
 800a1d0:	4b01      	ldr	r3, [pc, #4]	@ (800a1d8 <__errno+0x8>)
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	200000a0 	.word	0x200000a0

0800a1dc <__libc_init_array>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	4d0d      	ldr	r5, [pc, #52]	@ (800a214 <__libc_init_array+0x38>)
 800a1e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a218 <__libc_init_array+0x3c>)
 800a1e2:	1b64      	subs	r4, r4, r5
 800a1e4:	10a4      	asrs	r4, r4, #2
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	42a6      	cmp	r6, r4
 800a1ea:	d109      	bne.n	800a200 <__libc_init_array+0x24>
 800a1ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a21c <__libc_init_array+0x40>)
 800a1ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a220 <__libc_init_array+0x44>)
 800a1f0:	f003 fc90 	bl	800db14 <_init>
 800a1f4:	1b64      	subs	r4, r4, r5
 800a1f6:	10a4      	asrs	r4, r4, #2
 800a1f8:	2600      	movs	r6, #0
 800a1fa:	42a6      	cmp	r6, r4
 800a1fc:	d105      	bne.n	800a20a <__libc_init_array+0x2e>
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	f855 3b04 	ldr.w	r3, [r5], #4
 800a204:	4798      	blx	r3
 800a206:	3601      	adds	r6, #1
 800a208:	e7ee      	b.n	800a1e8 <__libc_init_array+0xc>
 800a20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a20e:	4798      	blx	r3
 800a210:	3601      	adds	r6, #1
 800a212:	e7f2      	b.n	800a1fa <__libc_init_array+0x1e>
 800a214:	0800e740 	.word	0x0800e740
 800a218:	0800e740 	.word	0x0800e740
 800a21c:	0800e740 	.word	0x0800e740
 800a220:	0800e744 	.word	0x0800e744

0800a224 <__retarget_lock_init_recursive>:
 800a224:	4770      	bx	lr

0800a226 <__retarget_lock_acquire_recursive>:
 800a226:	4770      	bx	lr

0800a228 <__retarget_lock_release_recursive>:
 800a228:	4770      	bx	lr

0800a22a <memcpy>:
 800a22a:	440a      	add	r2, r1
 800a22c:	4291      	cmp	r1, r2
 800a22e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a232:	d100      	bne.n	800a236 <memcpy+0xc>
 800a234:	4770      	bx	lr
 800a236:	b510      	push	{r4, lr}
 800a238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a240:	4291      	cmp	r1, r2
 800a242:	d1f9      	bne.n	800a238 <memcpy+0xe>
 800a244:	bd10      	pop	{r4, pc}
	...

0800a248 <nanf>:
 800a248:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a250 <nanf+0x8>
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	7fc00000 	.word	0x7fc00000

0800a254 <quorem>:
 800a254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	6903      	ldr	r3, [r0, #16]
 800a25a:	690c      	ldr	r4, [r1, #16]
 800a25c:	42a3      	cmp	r3, r4
 800a25e:	4607      	mov	r7, r0
 800a260:	db7e      	blt.n	800a360 <quorem+0x10c>
 800a262:	3c01      	subs	r4, #1
 800a264:	f101 0814 	add.w	r8, r1, #20
 800a268:	00a3      	lsls	r3, r4, #2
 800a26a:	f100 0514 	add.w	r5, r0, #20
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a27a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a27e:	3301      	adds	r3, #1
 800a280:	429a      	cmp	r2, r3
 800a282:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a286:	fbb2 f6f3 	udiv	r6, r2, r3
 800a28a:	d32e      	bcc.n	800a2ea <quorem+0x96>
 800a28c:	f04f 0a00 	mov.w	sl, #0
 800a290:	46c4      	mov	ip, r8
 800a292:	46ae      	mov	lr, r5
 800a294:	46d3      	mov	fp, sl
 800a296:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a29a:	b298      	uxth	r0, r3
 800a29c:	fb06 a000 	mla	r0, r6, r0, sl
 800a2a0:	0c02      	lsrs	r2, r0, #16
 800a2a2:	0c1b      	lsrs	r3, r3, #16
 800a2a4:	fb06 2303 	mla	r3, r6, r3, r2
 800a2a8:	f8de 2000 	ldr.w	r2, [lr]
 800a2ac:	b280      	uxth	r0, r0
 800a2ae:	b292      	uxth	r2, r2
 800a2b0:	1a12      	subs	r2, r2, r0
 800a2b2:	445a      	add	r2, fp
 800a2b4:	f8de 0000 	ldr.w	r0, [lr]
 800a2b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a2c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a2cc:	45e1      	cmp	r9, ip
 800a2ce:	f84e 2b04 	str.w	r2, [lr], #4
 800a2d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a2d6:	d2de      	bcs.n	800a296 <quorem+0x42>
 800a2d8:	9b00      	ldr	r3, [sp, #0]
 800a2da:	58eb      	ldr	r3, [r5, r3]
 800a2dc:	b92b      	cbnz	r3, 800a2ea <quorem+0x96>
 800a2de:	9b01      	ldr	r3, [sp, #4]
 800a2e0:	3b04      	subs	r3, #4
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	d32f      	bcc.n	800a348 <quorem+0xf4>
 800a2e8:	613c      	str	r4, [r7, #16]
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	f001 f9c4 	bl	800b678 <__mcmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	db25      	blt.n	800a340 <quorem+0xec>
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2fc:	f8d1 c000 	ldr.w	ip, [r1]
 800a300:	fa1f fe82 	uxth.w	lr, r2
 800a304:	fa1f f38c 	uxth.w	r3, ip
 800a308:	eba3 030e 	sub.w	r3, r3, lr
 800a30c:	4403      	add	r3, r0
 800a30e:	0c12      	lsrs	r2, r2, #16
 800a310:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a314:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a318:	b29b      	uxth	r3, r3
 800a31a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a31e:	45c1      	cmp	r9, r8
 800a320:	f841 3b04 	str.w	r3, [r1], #4
 800a324:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a328:	d2e6      	bcs.n	800a2f8 <quorem+0xa4>
 800a32a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a32e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a332:	b922      	cbnz	r2, 800a33e <quorem+0xea>
 800a334:	3b04      	subs	r3, #4
 800a336:	429d      	cmp	r5, r3
 800a338:	461a      	mov	r2, r3
 800a33a:	d30b      	bcc.n	800a354 <quorem+0x100>
 800a33c:	613c      	str	r4, [r7, #16]
 800a33e:	3601      	adds	r6, #1
 800a340:	4630      	mov	r0, r6
 800a342:	b003      	add	sp, #12
 800a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	3b04      	subs	r3, #4
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	d1cb      	bne.n	800a2e8 <quorem+0x94>
 800a350:	3c01      	subs	r4, #1
 800a352:	e7c6      	b.n	800a2e2 <quorem+0x8e>
 800a354:	6812      	ldr	r2, [r2, #0]
 800a356:	3b04      	subs	r3, #4
 800a358:	2a00      	cmp	r2, #0
 800a35a:	d1ef      	bne.n	800a33c <quorem+0xe8>
 800a35c:	3c01      	subs	r4, #1
 800a35e:	e7ea      	b.n	800a336 <quorem+0xe2>
 800a360:	2000      	movs	r0, #0
 800a362:	e7ee      	b.n	800a342 <quorem+0xee>
 800a364:	0000      	movs	r0, r0
	...

0800a368 <_dtoa_r>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	69c7      	ldr	r7, [r0, #28]
 800a36e:	b099      	sub	sp, #100	@ 0x64
 800a370:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a374:	ec55 4b10 	vmov	r4, r5, d0
 800a378:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a37a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a37c:	4683      	mov	fp, r0
 800a37e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a380:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a382:	b97f      	cbnz	r7, 800a3a4 <_dtoa_r+0x3c>
 800a384:	2010      	movs	r0, #16
 800a386:	f000 fdfd 	bl	800af84 <malloc>
 800a38a:	4602      	mov	r2, r0
 800a38c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a390:	b920      	cbnz	r0, 800a39c <_dtoa_r+0x34>
 800a392:	4ba7      	ldr	r3, [pc, #668]	@ (800a630 <_dtoa_r+0x2c8>)
 800a394:	21ef      	movs	r1, #239	@ 0xef
 800a396:	48a7      	ldr	r0, [pc, #668]	@ (800a634 <_dtoa_r+0x2cc>)
 800a398:	f002 fc0e 	bl	800cbb8 <__assert_func>
 800a39c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a3a0:	6007      	str	r7, [r0, #0]
 800a3a2:	60c7      	str	r7, [r0, #12]
 800a3a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3a8:	6819      	ldr	r1, [r3, #0]
 800a3aa:	b159      	cbz	r1, 800a3c4 <_dtoa_r+0x5c>
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	604a      	str	r2, [r1, #4]
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	4093      	lsls	r3, r2
 800a3b4:	608b      	str	r3, [r1, #8]
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	f000 feda 	bl	800b170 <_Bfree>
 800a3bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	1e2b      	subs	r3, r5, #0
 800a3c6:	bfb9      	ittee	lt
 800a3c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a3cc:	9303      	strlt	r3, [sp, #12]
 800a3ce:	2300      	movge	r3, #0
 800a3d0:	6033      	strge	r3, [r6, #0]
 800a3d2:	9f03      	ldr	r7, [sp, #12]
 800a3d4:	4b98      	ldr	r3, [pc, #608]	@ (800a638 <_dtoa_r+0x2d0>)
 800a3d6:	bfbc      	itt	lt
 800a3d8:	2201      	movlt	r2, #1
 800a3da:	6032      	strlt	r2, [r6, #0]
 800a3dc:	43bb      	bics	r3, r7
 800a3de:	d112      	bne.n	800a406 <_dtoa_r+0x9e>
 800a3e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a3e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3ec:	4323      	orrs	r3, r4
 800a3ee:	f000 854d 	beq.w	800ae8c <_dtoa_r+0xb24>
 800a3f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a64c <_dtoa_r+0x2e4>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 854f 	beq.w	800ae9c <_dtoa_r+0xb34>
 800a3fe:	f10a 0303 	add.w	r3, sl, #3
 800a402:	f000 bd49 	b.w	800ae98 <_dtoa_r+0xb30>
 800a406:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a40a:	2200      	movs	r2, #0
 800a40c:	ec51 0b17 	vmov	r0, r1, d7
 800a410:	2300      	movs	r3, #0
 800a412:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a416:	f7f6 fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a41a:	4680      	mov	r8, r0
 800a41c:	b158      	cbz	r0, 800a436 <_dtoa_r+0xce>
 800a41e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a420:	2301      	movs	r3, #1
 800a422:	6013      	str	r3, [r2, #0]
 800a424:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a426:	b113      	cbz	r3, 800a42e <_dtoa_r+0xc6>
 800a428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a42a:	4b84      	ldr	r3, [pc, #528]	@ (800a63c <_dtoa_r+0x2d4>)
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a650 <_dtoa_r+0x2e8>
 800a432:	f000 bd33 	b.w	800ae9c <_dtoa_r+0xb34>
 800a436:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a43a:	aa16      	add	r2, sp, #88	@ 0x58
 800a43c:	a917      	add	r1, sp, #92	@ 0x5c
 800a43e:	4658      	mov	r0, fp
 800a440:	f001 fa3a 	bl	800b8b8 <__d2b>
 800a444:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a448:	4681      	mov	r9, r0
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	d077      	beq.n	800a53e <_dtoa_r+0x1d6>
 800a44e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a450:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a45c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a460:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a464:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a468:	4619      	mov	r1, r3
 800a46a:	2200      	movs	r2, #0
 800a46c:	4b74      	ldr	r3, [pc, #464]	@ (800a640 <_dtoa_r+0x2d8>)
 800a46e:	f7f5 ff13 	bl	8000298 <__aeabi_dsub>
 800a472:	a369      	add	r3, pc, #420	@ (adr r3, 800a618 <_dtoa_r+0x2b0>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f7f6 f8c6 	bl	8000608 <__aeabi_dmul>
 800a47c:	a368      	add	r3, pc, #416	@ (adr r3, 800a620 <_dtoa_r+0x2b8>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f7f5 ff0b 	bl	800029c <__adddf3>
 800a486:	4604      	mov	r4, r0
 800a488:	4630      	mov	r0, r6
 800a48a:	460d      	mov	r5, r1
 800a48c:	f7f6 f852 	bl	8000534 <__aeabi_i2d>
 800a490:	a365      	add	r3, pc, #404	@ (adr r3, 800a628 <_dtoa_r+0x2c0>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f6 f8b7 	bl	8000608 <__aeabi_dmul>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f5 fefb 	bl	800029c <__adddf3>
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	f7f6 fb5d 	bl	8000b68 <__aeabi_d2iz>
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	f7f6 fb18 	bl	8000aec <__aeabi_dcmplt>
 800a4bc:	b140      	cbz	r0, 800a4d0 <_dtoa_r+0x168>
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f7f6 f838 	bl	8000534 <__aeabi_i2d>
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	462b      	mov	r3, r5
 800a4c8:	f7f6 fb06 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4cc:	b900      	cbnz	r0, 800a4d0 <_dtoa_r+0x168>
 800a4ce:	3f01      	subs	r7, #1
 800a4d0:	2f16      	cmp	r7, #22
 800a4d2:	d851      	bhi.n	800a578 <_dtoa_r+0x210>
 800a4d4:	4b5b      	ldr	r3, [pc, #364]	@ (800a644 <_dtoa_r+0x2dc>)
 800a4d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4e2:	f7f6 fb03 	bl	8000aec <__aeabi_dcmplt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d048      	beq.n	800a57c <_dtoa_r+0x214>
 800a4ea:	3f01      	subs	r7, #1
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800a4f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a4f2:	1b9b      	subs	r3, r3, r6
 800a4f4:	1e5a      	subs	r2, r3, #1
 800a4f6:	bf44      	itt	mi
 800a4f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a4fc:	2300      	movmi	r3, #0
 800a4fe:	9208      	str	r2, [sp, #32]
 800a500:	bf54      	ite	pl
 800a502:	f04f 0800 	movpl.w	r8, #0
 800a506:	9308      	strmi	r3, [sp, #32]
 800a508:	2f00      	cmp	r7, #0
 800a50a:	db39      	blt.n	800a580 <_dtoa_r+0x218>
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a510:	443b      	add	r3, r7
 800a512:	9308      	str	r3, [sp, #32]
 800a514:	2300      	movs	r3, #0
 800a516:	930a      	str	r3, [sp, #40]	@ 0x28
 800a518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51a:	2b09      	cmp	r3, #9
 800a51c:	d864      	bhi.n	800a5e8 <_dtoa_r+0x280>
 800a51e:	2b05      	cmp	r3, #5
 800a520:	bfc4      	itt	gt
 800a522:	3b04      	subgt	r3, #4
 800a524:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a528:	f1a3 0302 	sub.w	r3, r3, #2
 800a52c:	bfcc      	ite	gt
 800a52e:	2400      	movgt	r4, #0
 800a530:	2401      	movle	r4, #1
 800a532:	2b03      	cmp	r3, #3
 800a534:	d863      	bhi.n	800a5fe <_dtoa_r+0x296>
 800a536:	e8df f003 	tbb	[pc, r3]
 800a53a:	372a      	.short	0x372a
 800a53c:	5535      	.short	0x5535
 800a53e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a542:	441e      	add	r6, r3
 800a544:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a548:	2b20      	cmp	r3, #32
 800a54a:	bfc1      	itttt	gt
 800a54c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a550:	409f      	lslgt	r7, r3
 800a552:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a556:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a55a:	bfd6      	itet	le
 800a55c:	f1c3 0320 	rsble	r3, r3, #32
 800a560:	ea47 0003 	orrgt.w	r0, r7, r3
 800a564:	fa04 f003 	lslle.w	r0, r4, r3
 800a568:	f7f5 ffd4 	bl	8000514 <__aeabi_ui2d>
 800a56c:	2201      	movs	r2, #1
 800a56e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a572:	3e01      	subs	r6, #1
 800a574:	9214      	str	r2, [sp, #80]	@ 0x50
 800a576:	e777      	b.n	800a468 <_dtoa_r+0x100>
 800a578:	2301      	movs	r3, #1
 800a57a:	e7b8      	b.n	800a4ee <_dtoa_r+0x186>
 800a57c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a57e:	e7b7      	b.n	800a4f0 <_dtoa_r+0x188>
 800a580:	427b      	negs	r3, r7
 800a582:	930a      	str	r3, [sp, #40]	@ 0x28
 800a584:	2300      	movs	r3, #0
 800a586:	eba8 0807 	sub.w	r8, r8, r7
 800a58a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a58c:	e7c4      	b.n	800a518 <_dtoa_r+0x1b0>
 800a58e:	2300      	movs	r3, #0
 800a590:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a594:	2b00      	cmp	r3, #0
 800a596:	dc35      	bgt.n	800a604 <_dtoa_r+0x29c>
 800a598:	2301      	movs	r3, #1
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	9307      	str	r3, [sp, #28]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5a2:	e00b      	b.n	800a5bc <_dtoa_r+0x254>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e7f3      	b.n	800a590 <_dtoa_r+0x228>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5ae:	18fb      	adds	r3, r7, r3
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	9307      	str	r3, [sp, #28]
 800a5b8:	bfb8      	it	lt
 800a5ba:	2301      	movlt	r3, #1
 800a5bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	2204      	movs	r2, #4
 800a5c4:	f102 0514 	add.w	r5, r2, #20
 800a5c8:	429d      	cmp	r5, r3
 800a5ca:	d91f      	bls.n	800a60c <_dtoa_r+0x2a4>
 800a5cc:	6041      	str	r1, [r0, #4]
 800a5ce:	4658      	mov	r0, fp
 800a5d0:	f000 fd8e 	bl	800b0f0 <_Balloc>
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d13c      	bne.n	800a654 <_dtoa_r+0x2ec>
 800a5da:	4b1b      	ldr	r3, [pc, #108]	@ (800a648 <_dtoa_r+0x2e0>)
 800a5dc:	4602      	mov	r2, r0
 800a5de:	f240 11af 	movw	r1, #431	@ 0x1af
 800a5e2:	e6d8      	b.n	800a396 <_dtoa_r+0x2e>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e7e0      	b.n	800a5aa <_dtoa_r+0x242>
 800a5e8:	2401      	movs	r4, #1
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	9307      	str	r3, [sp, #28]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2312      	movs	r3, #18
 800a5fc:	e7d0      	b.n	800a5a0 <_dtoa_r+0x238>
 800a5fe:	2301      	movs	r3, #1
 800a600:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a602:	e7f5      	b.n	800a5f0 <_dtoa_r+0x288>
 800a604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	e7d7      	b.n	800a5bc <_dtoa_r+0x254>
 800a60c:	3101      	adds	r1, #1
 800a60e:	0052      	lsls	r2, r2, #1
 800a610:	e7d8      	b.n	800a5c4 <_dtoa_r+0x25c>
 800a612:	bf00      	nop
 800a614:	f3af 8000 	nop.w
 800a618:	636f4361 	.word	0x636f4361
 800a61c:	3fd287a7 	.word	0x3fd287a7
 800a620:	8b60c8b3 	.word	0x8b60c8b3
 800a624:	3fc68a28 	.word	0x3fc68a28
 800a628:	509f79fb 	.word	0x509f79fb
 800a62c:	3fd34413 	.word	0x3fd34413
 800a630:	0800e33e 	.word	0x0800e33e
 800a634:	0800e355 	.word	0x0800e355
 800a638:	7ff00000 	.word	0x7ff00000
 800a63c:	0800e309 	.word	0x0800e309
 800a640:	3ff80000 	.word	0x3ff80000
 800a644:	0800e450 	.word	0x0800e450
 800a648:	0800e3ad 	.word	0x0800e3ad
 800a64c:	0800e33a 	.word	0x0800e33a
 800a650:	0800e308 	.word	0x0800e308
 800a654:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a658:	6018      	str	r0, [r3, #0]
 800a65a:	9b07      	ldr	r3, [sp, #28]
 800a65c:	2b0e      	cmp	r3, #14
 800a65e:	f200 80a4 	bhi.w	800a7aa <_dtoa_r+0x442>
 800a662:	2c00      	cmp	r4, #0
 800a664:	f000 80a1 	beq.w	800a7aa <_dtoa_r+0x442>
 800a668:	2f00      	cmp	r7, #0
 800a66a:	dd33      	ble.n	800a6d4 <_dtoa_r+0x36c>
 800a66c:	4bad      	ldr	r3, [pc, #692]	@ (800a924 <_dtoa_r+0x5bc>)
 800a66e:	f007 020f 	and.w	r2, r7, #15
 800a672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a676:	ed93 7b00 	vldr	d7, [r3]
 800a67a:	05f8      	lsls	r0, r7, #23
 800a67c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a680:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a684:	d516      	bpl.n	800a6b4 <_dtoa_r+0x34c>
 800a686:	4ba8      	ldr	r3, [pc, #672]	@ (800a928 <_dtoa_r+0x5c0>)
 800a688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a68c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a690:	f7f6 f8e4 	bl	800085c <__aeabi_ddiv>
 800a694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a698:	f004 040f 	and.w	r4, r4, #15
 800a69c:	2603      	movs	r6, #3
 800a69e:	4da2      	ldr	r5, [pc, #648]	@ (800a928 <_dtoa_r+0x5c0>)
 800a6a0:	b954      	cbnz	r4, 800a6b8 <_dtoa_r+0x350>
 800a6a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6aa:	f7f6 f8d7 	bl	800085c <__aeabi_ddiv>
 800a6ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b2:	e028      	b.n	800a706 <_dtoa_r+0x39e>
 800a6b4:	2602      	movs	r6, #2
 800a6b6:	e7f2      	b.n	800a69e <_dtoa_r+0x336>
 800a6b8:	07e1      	lsls	r1, r4, #31
 800a6ba:	d508      	bpl.n	800a6ce <_dtoa_r+0x366>
 800a6bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6c4:	f7f5 ffa0 	bl	8000608 <__aeabi_dmul>
 800a6c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	1064      	asrs	r4, r4, #1
 800a6d0:	3508      	adds	r5, #8
 800a6d2:	e7e5      	b.n	800a6a0 <_dtoa_r+0x338>
 800a6d4:	f000 80d2 	beq.w	800a87c <_dtoa_r+0x514>
 800a6d8:	427c      	negs	r4, r7
 800a6da:	4b92      	ldr	r3, [pc, #584]	@ (800a924 <_dtoa_r+0x5bc>)
 800a6dc:	4d92      	ldr	r5, [pc, #584]	@ (800a928 <_dtoa_r+0x5c0>)
 800a6de:	f004 020f 	and.w	r2, r4, #15
 800a6e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6ee:	f7f5 ff8b 	bl	8000608 <__aeabi_dmul>
 800a6f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6f6:	1124      	asrs	r4, r4, #4
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2602      	movs	r6, #2
 800a6fc:	2c00      	cmp	r4, #0
 800a6fe:	f040 80b2 	bne.w	800a866 <_dtoa_r+0x4fe>
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1d3      	bne.n	800a6ae <_dtoa_r+0x346>
 800a706:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a708:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 80b7 	beq.w	800a880 <_dtoa_r+0x518>
 800a712:	4b86      	ldr	r3, [pc, #536]	@ (800a92c <_dtoa_r+0x5c4>)
 800a714:	2200      	movs	r2, #0
 800a716:	4620      	mov	r0, r4
 800a718:	4629      	mov	r1, r5
 800a71a:	f7f6 f9e7 	bl	8000aec <__aeabi_dcmplt>
 800a71e:	2800      	cmp	r0, #0
 800a720:	f000 80ae 	beq.w	800a880 <_dtoa_r+0x518>
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 80aa 	beq.w	800a880 <_dtoa_r+0x518>
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd37      	ble.n	800a7a2 <_dtoa_r+0x43a>
 800a732:	1e7b      	subs	r3, r7, #1
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	4620      	mov	r0, r4
 800a738:	4b7d      	ldr	r3, [pc, #500]	@ (800a930 <_dtoa_r+0x5c8>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	4629      	mov	r1, r5
 800a73e:	f7f5 ff63 	bl	8000608 <__aeabi_dmul>
 800a742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a746:	9c00      	ldr	r4, [sp, #0]
 800a748:	3601      	adds	r6, #1
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7f5 fef2 	bl	8000534 <__aeabi_i2d>
 800a750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a754:	f7f5 ff58 	bl	8000608 <__aeabi_dmul>
 800a758:	4b76      	ldr	r3, [pc, #472]	@ (800a934 <_dtoa_r+0x5cc>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	f7f5 fd9e 	bl	800029c <__adddf3>
 800a760:	4605      	mov	r5, r0
 800a762:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a766:	2c00      	cmp	r4, #0
 800a768:	f040 808d 	bne.w	800a886 <_dtoa_r+0x51e>
 800a76c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a770:	4b71      	ldr	r3, [pc, #452]	@ (800a938 <_dtoa_r+0x5d0>)
 800a772:	2200      	movs	r2, #0
 800a774:	f7f5 fd90 	bl	8000298 <__aeabi_dsub>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a780:	462a      	mov	r2, r5
 800a782:	4633      	mov	r3, r6
 800a784:	f7f6 f9d0 	bl	8000b28 <__aeabi_dcmpgt>
 800a788:	2800      	cmp	r0, #0
 800a78a:	f040 828b 	bne.w	800aca4 <_dtoa_r+0x93c>
 800a78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a792:	462a      	mov	r2, r5
 800a794:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a798:	f7f6 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f040 8128 	bne.w	800a9f2 <_dtoa_r+0x68a>
 800a7a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a7a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a7aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f2c0 815a 	blt.w	800aa66 <_dtoa_r+0x6fe>
 800a7b2:	2f0e      	cmp	r7, #14
 800a7b4:	f300 8157 	bgt.w	800aa66 <_dtoa_r+0x6fe>
 800a7b8:	4b5a      	ldr	r3, [pc, #360]	@ (800a924 <_dtoa_r+0x5bc>)
 800a7ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7be:	ed93 7b00 	vldr	d7, [r3]
 800a7c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	ed8d 7b00 	vstr	d7, [sp]
 800a7ca:	da03      	bge.n	800a7d4 <_dtoa_r+0x46c>
 800a7cc:	9b07      	ldr	r3, [sp, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f340 8101 	ble.w	800a9d6 <_dtoa_r+0x66e>
 800a7d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a7d8:	4656      	mov	r6, sl
 800a7da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	f7f6 f83b 	bl	800085c <__aeabi_ddiv>
 800a7e6:	f7f6 f9bf 	bl	8000b68 <__aeabi_d2iz>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	f7f5 fea2 	bl	8000534 <__aeabi_i2d>
 800a7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7f4:	f7f5 ff08 	bl	8000608 <__aeabi_dmul>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a804:	f7f5 fd48 	bl	8000298 <__aeabi_dsub>
 800a808:	f806 4b01 	strb.w	r4, [r6], #1
 800a80c:	9d07      	ldr	r5, [sp, #28]
 800a80e:	eba6 040a 	sub.w	r4, r6, sl
 800a812:	42a5      	cmp	r5, r4
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	f040 8117 	bne.w	800aa4a <_dtoa_r+0x6e2>
 800a81c:	f7f5 fd3e 	bl	800029c <__adddf3>
 800a820:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a824:	4604      	mov	r4, r0
 800a826:	460d      	mov	r5, r1
 800a828:	f7f6 f97e 	bl	8000b28 <__aeabi_dcmpgt>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f040 80f9 	bne.w	800aa24 <_dtoa_r+0x6bc>
 800a832:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f6 f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a83e:	b118      	cbz	r0, 800a848 <_dtoa_r+0x4e0>
 800a840:	f018 0f01 	tst.w	r8, #1
 800a844:	f040 80ee 	bne.w	800aa24 <_dtoa_r+0x6bc>
 800a848:	4649      	mov	r1, r9
 800a84a:	4658      	mov	r0, fp
 800a84c:	f000 fc90 	bl	800b170 <_Bfree>
 800a850:	2300      	movs	r3, #0
 800a852:	7033      	strb	r3, [r6, #0]
 800a854:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a856:	3701      	adds	r7, #1
 800a858:	601f      	str	r7, [r3, #0]
 800a85a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 831d 	beq.w	800ae9c <_dtoa_r+0xb34>
 800a862:	601e      	str	r6, [r3, #0]
 800a864:	e31a      	b.n	800ae9c <_dtoa_r+0xb34>
 800a866:	07e2      	lsls	r2, r4, #31
 800a868:	d505      	bpl.n	800a876 <_dtoa_r+0x50e>
 800a86a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a86e:	f7f5 fecb 	bl	8000608 <__aeabi_dmul>
 800a872:	3601      	adds	r6, #1
 800a874:	2301      	movs	r3, #1
 800a876:	1064      	asrs	r4, r4, #1
 800a878:	3508      	adds	r5, #8
 800a87a:	e73f      	b.n	800a6fc <_dtoa_r+0x394>
 800a87c:	2602      	movs	r6, #2
 800a87e:	e742      	b.n	800a706 <_dtoa_r+0x39e>
 800a880:	9c07      	ldr	r4, [sp, #28]
 800a882:	9704      	str	r7, [sp, #16]
 800a884:	e761      	b.n	800a74a <_dtoa_r+0x3e2>
 800a886:	4b27      	ldr	r3, [pc, #156]	@ (800a924 <_dtoa_r+0x5bc>)
 800a888:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a88a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a88e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a892:	4454      	add	r4, sl
 800a894:	2900      	cmp	r1, #0
 800a896:	d053      	beq.n	800a940 <_dtoa_r+0x5d8>
 800a898:	4928      	ldr	r1, [pc, #160]	@ (800a93c <_dtoa_r+0x5d4>)
 800a89a:	2000      	movs	r0, #0
 800a89c:	f7f5 ffde 	bl	800085c <__aeabi_ddiv>
 800a8a0:	4633      	mov	r3, r6
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	f7f5 fcf8 	bl	8000298 <__aeabi_dsub>
 800a8a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8ac:	4656      	mov	r6, sl
 800a8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8b2:	f7f6 f959 	bl	8000b68 <__aeabi_d2iz>
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	f7f5 fe3c 	bl	8000534 <__aeabi_i2d>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c4:	f7f5 fce8 	bl	8000298 <__aeabi_dsub>
 800a8c8:	3530      	adds	r5, #48	@ 0x30
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8d2:	f806 5b01 	strb.w	r5, [r6], #1
 800a8d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8da:	f7f6 f907 	bl	8000aec <__aeabi_dcmplt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d171      	bne.n	800a9c6 <_dtoa_r+0x65e>
 800a8e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8e6:	4911      	ldr	r1, [pc, #68]	@ (800a92c <_dtoa_r+0x5c4>)
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	f7f5 fcd5 	bl	8000298 <__aeabi_dsub>
 800a8ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8f2:	f7f6 f8fb 	bl	8000aec <__aeabi_dcmplt>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	f040 8095 	bne.w	800aa26 <_dtoa_r+0x6be>
 800a8fc:	42a6      	cmp	r6, r4
 800a8fe:	f43f af50 	beq.w	800a7a2 <_dtoa_r+0x43a>
 800a902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a906:	4b0a      	ldr	r3, [pc, #40]	@ (800a930 <_dtoa_r+0x5c8>)
 800a908:	2200      	movs	r2, #0
 800a90a:	f7f5 fe7d 	bl	8000608 <__aeabi_dmul>
 800a90e:	4b08      	ldr	r3, [pc, #32]	@ (800a930 <_dtoa_r+0x5c8>)
 800a910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a914:	2200      	movs	r2, #0
 800a916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a91a:	f7f5 fe75 	bl	8000608 <__aeabi_dmul>
 800a91e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a922:	e7c4      	b.n	800a8ae <_dtoa_r+0x546>
 800a924:	0800e450 	.word	0x0800e450
 800a928:	0800e428 	.word	0x0800e428
 800a92c:	3ff00000 	.word	0x3ff00000
 800a930:	40240000 	.word	0x40240000
 800a934:	401c0000 	.word	0x401c0000
 800a938:	40140000 	.word	0x40140000
 800a93c:	3fe00000 	.word	0x3fe00000
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	f7f5 fe60 	bl	8000608 <__aeabi_dmul>
 800a948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a94c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a94e:	4656      	mov	r6, sl
 800a950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a954:	f7f6 f908 	bl	8000b68 <__aeabi_d2iz>
 800a958:	4605      	mov	r5, r0
 800a95a:	f7f5 fdeb 	bl	8000534 <__aeabi_i2d>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a966:	f7f5 fc97 	bl	8000298 <__aeabi_dsub>
 800a96a:	3530      	adds	r5, #48	@ 0x30
 800a96c:	f806 5b01 	strb.w	r5, [r6], #1
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	42a6      	cmp	r6, r4
 800a976:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	d124      	bne.n	800a9ca <_dtoa_r+0x662>
 800a980:	4bac      	ldr	r3, [pc, #688]	@ (800ac34 <_dtoa_r+0x8cc>)
 800a982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a986:	f7f5 fc89 	bl	800029c <__adddf3>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a992:	f7f6 f8c9 	bl	8000b28 <__aeabi_dcmpgt>
 800a996:	2800      	cmp	r0, #0
 800a998:	d145      	bne.n	800aa26 <_dtoa_r+0x6be>
 800a99a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a99e:	49a5      	ldr	r1, [pc, #660]	@ (800ac34 <_dtoa_r+0x8cc>)
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f7f5 fc79 	bl	8000298 <__aeabi_dsub>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ae:	f7f6 f89d 	bl	8000aec <__aeabi_dcmplt>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	f43f aef5 	beq.w	800a7a2 <_dtoa_r+0x43a>
 800a9b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a9ba:	1e73      	subs	r3, r6, #1
 800a9bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a9be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a9c2:	2b30      	cmp	r3, #48	@ 0x30
 800a9c4:	d0f8      	beq.n	800a9b8 <_dtoa_r+0x650>
 800a9c6:	9f04      	ldr	r7, [sp, #16]
 800a9c8:	e73e      	b.n	800a848 <_dtoa_r+0x4e0>
 800a9ca:	4b9b      	ldr	r3, [pc, #620]	@ (800ac38 <_dtoa_r+0x8d0>)
 800a9cc:	f7f5 fe1c 	bl	8000608 <__aeabi_dmul>
 800a9d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9d4:	e7bc      	b.n	800a950 <_dtoa_r+0x5e8>
 800a9d6:	d10c      	bne.n	800a9f2 <_dtoa_r+0x68a>
 800a9d8:	4b98      	ldr	r3, [pc, #608]	@ (800ac3c <_dtoa_r+0x8d4>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9e0:	f7f5 fe12 	bl	8000608 <__aeabi_dmul>
 800a9e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e8:	f7f6 f894 	bl	8000b14 <__aeabi_dcmpge>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	f000 8157 	beq.w	800aca0 <_dtoa_r+0x938>
 800a9f2:	2400      	movs	r4, #0
 800a9f4:	4625      	mov	r5, r4
 800a9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f8:	43db      	mvns	r3, r3
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	4656      	mov	r6, sl
 800a9fe:	2700      	movs	r7, #0
 800aa00:	4621      	mov	r1, r4
 800aa02:	4658      	mov	r0, fp
 800aa04:	f000 fbb4 	bl	800b170 <_Bfree>
 800aa08:	2d00      	cmp	r5, #0
 800aa0a:	d0dc      	beq.n	800a9c6 <_dtoa_r+0x65e>
 800aa0c:	b12f      	cbz	r7, 800aa1a <_dtoa_r+0x6b2>
 800aa0e:	42af      	cmp	r7, r5
 800aa10:	d003      	beq.n	800aa1a <_dtoa_r+0x6b2>
 800aa12:	4639      	mov	r1, r7
 800aa14:	4658      	mov	r0, fp
 800aa16:	f000 fbab 	bl	800b170 <_Bfree>
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	4658      	mov	r0, fp
 800aa1e:	f000 fba7 	bl	800b170 <_Bfree>
 800aa22:	e7d0      	b.n	800a9c6 <_dtoa_r+0x65e>
 800aa24:	9704      	str	r7, [sp, #16]
 800aa26:	4633      	mov	r3, r6
 800aa28:	461e      	mov	r6, r3
 800aa2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa2e:	2a39      	cmp	r2, #57	@ 0x39
 800aa30:	d107      	bne.n	800aa42 <_dtoa_r+0x6da>
 800aa32:	459a      	cmp	sl, r3
 800aa34:	d1f8      	bne.n	800aa28 <_dtoa_r+0x6c0>
 800aa36:	9a04      	ldr	r2, [sp, #16]
 800aa38:	3201      	adds	r2, #1
 800aa3a:	9204      	str	r2, [sp, #16]
 800aa3c:	2230      	movs	r2, #48	@ 0x30
 800aa3e:	f88a 2000 	strb.w	r2, [sl]
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	3201      	adds	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]
 800aa48:	e7bd      	b.n	800a9c6 <_dtoa_r+0x65e>
 800aa4a:	4b7b      	ldr	r3, [pc, #492]	@ (800ac38 <_dtoa_r+0x8d0>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f7f5 fddb 	bl	8000608 <__aeabi_dmul>
 800aa52:	2200      	movs	r2, #0
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	460d      	mov	r5, r1
 800aa5a:	f7f6 f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f aebb 	beq.w	800a7da <_dtoa_r+0x472>
 800aa64:	e6f0      	b.n	800a848 <_dtoa_r+0x4e0>
 800aa66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	f000 80db 	beq.w	800ac24 <_dtoa_r+0x8bc>
 800aa6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa70:	2a01      	cmp	r2, #1
 800aa72:	f300 80bf 	bgt.w	800abf4 <_dtoa_r+0x88c>
 800aa76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aa78:	2a00      	cmp	r2, #0
 800aa7a:	f000 80b7 	beq.w	800abec <_dtoa_r+0x884>
 800aa7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aa82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa84:	4646      	mov	r6, r8
 800aa86:	9a08      	ldr	r2, [sp, #32]
 800aa88:	2101      	movs	r1, #1
 800aa8a:	441a      	add	r2, r3
 800aa8c:	4658      	mov	r0, fp
 800aa8e:	4498      	add	r8, r3
 800aa90:	9208      	str	r2, [sp, #32]
 800aa92:	f000 fc6b 	bl	800b36c <__i2b>
 800aa96:	4605      	mov	r5, r0
 800aa98:	b15e      	cbz	r6, 800aab2 <_dtoa_r+0x74a>
 800aa9a:	9b08      	ldr	r3, [sp, #32]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dd08      	ble.n	800aab2 <_dtoa_r+0x74a>
 800aaa0:	42b3      	cmp	r3, r6
 800aaa2:	9a08      	ldr	r2, [sp, #32]
 800aaa4:	bfa8      	it	ge
 800aaa6:	4633      	movge	r3, r6
 800aaa8:	eba8 0803 	sub.w	r8, r8, r3
 800aaac:	1af6      	subs	r6, r6, r3
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	9308      	str	r3, [sp, #32]
 800aab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aab4:	b1f3      	cbz	r3, 800aaf4 <_dtoa_r+0x78c>
 800aab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 80b7 	beq.w	800ac2c <_dtoa_r+0x8c4>
 800aabe:	b18c      	cbz	r4, 800aae4 <_dtoa_r+0x77c>
 800aac0:	4629      	mov	r1, r5
 800aac2:	4622      	mov	r2, r4
 800aac4:	4658      	mov	r0, fp
 800aac6:	f000 fd11 	bl	800b4ec <__pow5mult>
 800aaca:	464a      	mov	r2, r9
 800aacc:	4601      	mov	r1, r0
 800aace:	4605      	mov	r5, r0
 800aad0:	4658      	mov	r0, fp
 800aad2:	f000 fc61 	bl	800b398 <__multiply>
 800aad6:	4649      	mov	r1, r9
 800aad8:	9004      	str	r0, [sp, #16]
 800aada:	4658      	mov	r0, fp
 800aadc:	f000 fb48 	bl	800b170 <_Bfree>
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	4699      	mov	r9, r3
 800aae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aae6:	1b1a      	subs	r2, r3, r4
 800aae8:	d004      	beq.n	800aaf4 <_dtoa_r+0x78c>
 800aaea:	4649      	mov	r1, r9
 800aaec:	4658      	mov	r0, fp
 800aaee:	f000 fcfd 	bl	800b4ec <__pow5mult>
 800aaf2:	4681      	mov	r9, r0
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	f000 fc38 	bl	800b36c <__i2b>
 800aafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aafe:	4604      	mov	r4, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 81cf 	beq.w	800aea4 <_dtoa_r+0xb3c>
 800ab06:	461a      	mov	r2, r3
 800ab08:	4601      	mov	r1, r0
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	f000 fcee 	bl	800b4ec <__pow5mult>
 800ab10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	4604      	mov	r4, r0
 800ab16:	f300 8095 	bgt.w	800ac44 <_dtoa_r+0x8dc>
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f040 8087 	bne.w	800ac30 <_dtoa_r+0x8c8>
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f040 8089 	bne.w	800ac40 <_dtoa_r+0x8d8>
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab34:	0d1b      	lsrs	r3, r3, #20
 800ab36:	051b      	lsls	r3, r3, #20
 800ab38:	b12b      	cbz	r3, 800ab46 <_dtoa_r+0x7de>
 800ab3a:	9b08      	ldr	r3, [sp, #32]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	9308      	str	r3, [sp, #32]
 800ab40:	f108 0801 	add.w	r8, r8, #1
 800ab44:	2301      	movs	r3, #1
 800ab46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 81b0 	beq.w	800aeb0 <_dtoa_r+0xb48>
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab56:	6918      	ldr	r0, [r3, #16]
 800ab58:	f000 fbbc 	bl	800b2d4 <__hi0bits>
 800ab5c:	f1c0 0020 	rsb	r0, r0, #32
 800ab60:	9b08      	ldr	r3, [sp, #32]
 800ab62:	4418      	add	r0, r3
 800ab64:	f010 001f 	ands.w	r0, r0, #31
 800ab68:	d077      	beq.n	800ac5a <_dtoa_r+0x8f2>
 800ab6a:	f1c0 0320 	rsb	r3, r0, #32
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	dd6b      	ble.n	800ac4a <_dtoa_r+0x8e2>
 800ab72:	9b08      	ldr	r3, [sp, #32]
 800ab74:	f1c0 001c 	rsb	r0, r0, #28
 800ab78:	4403      	add	r3, r0
 800ab7a:	4480      	add	r8, r0
 800ab7c:	4406      	add	r6, r0
 800ab7e:	9308      	str	r3, [sp, #32]
 800ab80:	f1b8 0f00 	cmp.w	r8, #0
 800ab84:	dd05      	ble.n	800ab92 <_dtoa_r+0x82a>
 800ab86:	4649      	mov	r1, r9
 800ab88:	4642      	mov	r2, r8
 800ab8a:	4658      	mov	r0, fp
 800ab8c:	f000 fd08 	bl	800b5a0 <__lshift>
 800ab90:	4681      	mov	r9, r0
 800ab92:	9b08      	ldr	r3, [sp, #32]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	dd05      	ble.n	800aba4 <_dtoa_r+0x83c>
 800ab98:	4621      	mov	r1, r4
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	4658      	mov	r0, fp
 800ab9e:	f000 fcff 	bl	800b5a0 <__lshift>
 800aba2:	4604      	mov	r4, r0
 800aba4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d059      	beq.n	800ac5e <_dtoa_r+0x8f6>
 800abaa:	4621      	mov	r1, r4
 800abac:	4648      	mov	r0, r9
 800abae:	f000 fd63 	bl	800b678 <__mcmp>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	da53      	bge.n	800ac5e <_dtoa_r+0x8f6>
 800abb6:	1e7b      	subs	r3, r7, #1
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	4649      	mov	r1, r9
 800abbc:	2300      	movs	r3, #0
 800abbe:	220a      	movs	r2, #10
 800abc0:	4658      	mov	r0, fp
 800abc2:	f000 faf7 	bl	800b1b4 <__multadd>
 800abc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abc8:	4681      	mov	r9, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 8172 	beq.w	800aeb4 <_dtoa_r+0xb4c>
 800abd0:	2300      	movs	r3, #0
 800abd2:	4629      	mov	r1, r5
 800abd4:	220a      	movs	r2, #10
 800abd6:	4658      	mov	r0, fp
 800abd8:	f000 faec 	bl	800b1b4 <__multadd>
 800abdc:	9b00      	ldr	r3, [sp, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	4605      	mov	r5, r0
 800abe2:	dc67      	bgt.n	800acb4 <_dtoa_r+0x94c>
 800abe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	dc41      	bgt.n	800ac6e <_dtoa_r+0x906>
 800abea:	e063      	b.n	800acb4 <_dtoa_r+0x94c>
 800abec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800abee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800abf2:	e746      	b.n	800aa82 <_dtoa_r+0x71a>
 800abf4:	9b07      	ldr	r3, [sp, #28]
 800abf6:	1e5c      	subs	r4, r3, #1
 800abf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abfa:	42a3      	cmp	r3, r4
 800abfc:	bfbf      	itttt	lt
 800abfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ac00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ac02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ac04:	1ae3      	sublt	r3, r4, r3
 800ac06:	bfb4      	ite	lt
 800ac08:	18d2      	addlt	r2, r2, r3
 800ac0a:	1b1c      	subge	r4, r3, r4
 800ac0c:	9b07      	ldr	r3, [sp, #28]
 800ac0e:	bfbc      	itt	lt
 800ac10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ac12:	2400      	movlt	r4, #0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bfb5      	itete	lt
 800ac18:	eba8 0603 	sublt.w	r6, r8, r3
 800ac1c:	9b07      	ldrge	r3, [sp, #28]
 800ac1e:	2300      	movlt	r3, #0
 800ac20:	4646      	movge	r6, r8
 800ac22:	e730      	b.n	800aa86 <_dtoa_r+0x71e>
 800ac24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ac28:	4646      	mov	r6, r8
 800ac2a:	e735      	b.n	800aa98 <_dtoa_r+0x730>
 800ac2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac2e:	e75c      	b.n	800aaea <_dtoa_r+0x782>
 800ac30:	2300      	movs	r3, #0
 800ac32:	e788      	b.n	800ab46 <_dtoa_r+0x7de>
 800ac34:	3fe00000 	.word	0x3fe00000
 800ac38:	40240000 	.word	0x40240000
 800ac3c:	40140000 	.word	0x40140000
 800ac40:	9b02      	ldr	r3, [sp, #8]
 800ac42:	e780      	b.n	800ab46 <_dtoa_r+0x7de>
 800ac44:	2300      	movs	r3, #0
 800ac46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac48:	e782      	b.n	800ab50 <_dtoa_r+0x7e8>
 800ac4a:	d099      	beq.n	800ab80 <_dtoa_r+0x818>
 800ac4c:	9a08      	ldr	r2, [sp, #32]
 800ac4e:	331c      	adds	r3, #28
 800ac50:	441a      	add	r2, r3
 800ac52:	4498      	add	r8, r3
 800ac54:	441e      	add	r6, r3
 800ac56:	9208      	str	r2, [sp, #32]
 800ac58:	e792      	b.n	800ab80 <_dtoa_r+0x818>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	e7f6      	b.n	800ac4c <_dtoa_r+0x8e4>
 800ac5e:	9b07      	ldr	r3, [sp, #28]
 800ac60:	9704      	str	r7, [sp, #16]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dc20      	bgt.n	800aca8 <_dtoa_r+0x940>
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	dd1e      	ble.n	800acac <_dtoa_r+0x944>
 800ac6e:	9b00      	ldr	r3, [sp, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f47f aec0 	bne.w	800a9f6 <_dtoa_r+0x68e>
 800ac76:	4621      	mov	r1, r4
 800ac78:	2205      	movs	r2, #5
 800ac7a:	4658      	mov	r0, fp
 800ac7c:	f000 fa9a 	bl	800b1b4 <__multadd>
 800ac80:	4601      	mov	r1, r0
 800ac82:	4604      	mov	r4, r0
 800ac84:	4648      	mov	r0, r9
 800ac86:	f000 fcf7 	bl	800b678 <__mcmp>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f77f aeb3 	ble.w	800a9f6 <_dtoa_r+0x68e>
 800ac90:	4656      	mov	r6, sl
 800ac92:	2331      	movs	r3, #49	@ 0x31
 800ac94:	f806 3b01 	strb.w	r3, [r6], #1
 800ac98:	9b04      	ldr	r3, [sp, #16]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	e6ae      	b.n	800a9fe <_dtoa_r+0x696>
 800aca0:	9c07      	ldr	r4, [sp, #28]
 800aca2:	9704      	str	r7, [sp, #16]
 800aca4:	4625      	mov	r5, r4
 800aca6:	e7f3      	b.n	800ac90 <_dtoa_r+0x928>
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 8104 	beq.w	800aebc <_dtoa_r+0xb54>
 800acb4:	2e00      	cmp	r6, #0
 800acb6:	dd05      	ble.n	800acc4 <_dtoa_r+0x95c>
 800acb8:	4629      	mov	r1, r5
 800acba:	4632      	mov	r2, r6
 800acbc:	4658      	mov	r0, fp
 800acbe:	f000 fc6f 	bl	800b5a0 <__lshift>
 800acc2:	4605      	mov	r5, r0
 800acc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d05a      	beq.n	800ad80 <_dtoa_r+0xa18>
 800acca:	6869      	ldr	r1, [r5, #4]
 800accc:	4658      	mov	r0, fp
 800acce:	f000 fa0f 	bl	800b0f0 <_Balloc>
 800acd2:	4606      	mov	r6, r0
 800acd4:	b928      	cbnz	r0, 800ace2 <_dtoa_r+0x97a>
 800acd6:	4b84      	ldr	r3, [pc, #528]	@ (800aee8 <_dtoa_r+0xb80>)
 800acd8:	4602      	mov	r2, r0
 800acda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800acde:	f7ff bb5a 	b.w	800a396 <_dtoa_r+0x2e>
 800ace2:	692a      	ldr	r2, [r5, #16]
 800ace4:	3202      	adds	r2, #2
 800ace6:	0092      	lsls	r2, r2, #2
 800ace8:	f105 010c 	add.w	r1, r5, #12
 800acec:	300c      	adds	r0, #12
 800acee:	f7ff fa9c 	bl	800a22a <memcpy>
 800acf2:	2201      	movs	r2, #1
 800acf4:	4631      	mov	r1, r6
 800acf6:	4658      	mov	r0, fp
 800acf8:	f000 fc52 	bl	800b5a0 <__lshift>
 800acfc:	f10a 0301 	add.w	r3, sl, #1
 800ad00:	9307      	str	r3, [sp, #28]
 800ad02:	9b00      	ldr	r3, [sp, #0]
 800ad04:	4453      	add	r3, sl
 800ad06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad08:	9b02      	ldr	r3, [sp, #8]
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	462f      	mov	r7, r5
 800ad10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad12:	4605      	mov	r5, r0
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	4621      	mov	r1, r4
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	4648      	mov	r0, r9
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	f7ff fa99 	bl	800a254 <quorem>
 800ad22:	4639      	mov	r1, r7
 800ad24:	9002      	str	r0, [sp, #8]
 800ad26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f000 fca4 	bl	800b678 <__mcmp>
 800ad30:	462a      	mov	r2, r5
 800ad32:	9008      	str	r0, [sp, #32]
 800ad34:	4621      	mov	r1, r4
 800ad36:	4658      	mov	r0, fp
 800ad38:	f000 fcba 	bl	800b6b0 <__mdiff>
 800ad3c:	68c2      	ldr	r2, [r0, #12]
 800ad3e:	4606      	mov	r6, r0
 800ad40:	bb02      	cbnz	r2, 800ad84 <_dtoa_r+0xa1c>
 800ad42:	4601      	mov	r1, r0
 800ad44:	4648      	mov	r0, r9
 800ad46:	f000 fc97 	bl	800b678 <__mcmp>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4658      	mov	r0, fp
 800ad50:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad52:	f000 fa0d 	bl	800b170 <_Bfree>
 800ad56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad5a:	9e07      	ldr	r6, [sp, #28]
 800ad5c:	ea43 0102 	orr.w	r1, r3, r2
 800ad60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad62:	4319      	orrs	r1, r3
 800ad64:	d110      	bne.n	800ad88 <_dtoa_r+0xa20>
 800ad66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad6a:	d029      	beq.n	800adc0 <_dtoa_r+0xa58>
 800ad6c:	9b08      	ldr	r3, [sp, #32]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	dd02      	ble.n	800ad78 <_dtoa_r+0xa10>
 800ad72:	9b02      	ldr	r3, [sp, #8]
 800ad74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ad78:	9b00      	ldr	r3, [sp, #0]
 800ad7a:	f883 8000 	strb.w	r8, [r3]
 800ad7e:	e63f      	b.n	800aa00 <_dtoa_r+0x698>
 800ad80:	4628      	mov	r0, r5
 800ad82:	e7bb      	b.n	800acfc <_dtoa_r+0x994>
 800ad84:	2201      	movs	r2, #1
 800ad86:	e7e1      	b.n	800ad4c <_dtoa_r+0x9e4>
 800ad88:	9b08      	ldr	r3, [sp, #32]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	db04      	blt.n	800ad98 <_dtoa_r+0xa30>
 800ad8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad90:	430b      	orrs	r3, r1
 800ad92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad94:	430b      	orrs	r3, r1
 800ad96:	d120      	bne.n	800adda <_dtoa_r+0xa72>
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	dded      	ble.n	800ad78 <_dtoa_r+0xa10>
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4658      	mov	r0, fp
 800ada2:	f000 fbfd 	bl	800b5a0 <__lshift>
 800ada6:	4621      	mov	r1, r4
 800ada8:	4681      	mov	r9, r0
 800adaa:	f000 fc65 	bl	800b678 <__mcmp>
 800adae:	2800      	cmp	r0, #0
 800adb0:	dc03      	bgt.n	800adba <_dtoa_r+0xa52>
 800adb2:	d1e1      	bne.n	800ad78 <_dtoa_r+0xa10>
 800adb4:	f018 0f01 	tst.w	r8, #1
 800adb8:	d0de      	beq.n	800ad78 <_dtoa_r+0xa10>
 800adba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800adbe:	d1d8      	bne.n	800ad72 <_dtoa_r+0xa0a>
 800adc0:	9a00      	ldr	r2, [sp, #0]
 800adc2:	2339      	movs	r3, #57	@ 0x39
 800adc4:	7013      	strb	r3, [r2, #0]
 800adc6:	4633      	mov	r3, r6
 800adc8:	461e      	mov	r6, r3
 800adca:	3b01      	subs	r3, #1
 800adcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800add0:	2a39      	cmp	r2, #57	@ 0x39
 800add2:	d052      	beq.n	800ae7a <_dtoa_r+0xb12>
 800add4:	3201      	adds	r2, #1
 800add6:	701a      	strb	r2, [r3, #0]
 800add8:	e612      	b.n	800aa00 <_dtoa_r+0x698>
 800adda:	2a00      	cmp	r2, #0
 800addc:	dd07      	ble.n	800adee <_dtoa_r+0xa86>
 800adde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ade2:	d0ed      	beq.n	800adc0 <_dtoa_r+0xa58>
 800ade4:	9a00      	ldr	r2, [sp, #0]
 800ade6:	f108 0301 	add.w	r3, r8, #1
 800adea:	7013      	strb	r3, [r2, #0]
 800adec:	e608      	b.n	800aa00 <_dtoa_r+0x698>
 800adee:	9b07      	ldr	r3, [sp, #28]
 800adf0:	9a07      	ldr	r2, [sp, #28]
 800adf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800adf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d028      	beq.n	800ae4e <_dtoa_r+0xae6>
 800adfc:	4649      	mov	r1, r9
 800adfe:	2300      	movs	r3, #0
 800ae00:	220a      	movs	r2, #10
 800ae02:	4658      	mov	r0, fp
 800ae04:	f000 f9d6 	bl	800b1b4 <__multadd>
 800ae08:	42af      	cmp	r7, r5
 800ae0a:	4681      	mov	r9, r0
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	f04f 020a 	mov.w	r2, #10
 800ae14:	4639      	mov	r1, r7
 800ae16:	4658      	mov	r0, fp
 800ae18:	d107      	bne.n	800ae2a <_dtoa_r+0xac2>
 800ae1a:	f000 f9cb 	bl	800b1b4 <__multadd>
 800ae1e:	4607      	mov	r7, r0
 800ae20:	4605      	mov	r5, r0
 800ae22:	9b07      	ldr	r3, [sp, #28]
 800ae24:	3301      	adds	r3, #1
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	e774      	b.n	800ad14 <_dtoa_r+0x9ac>
 800ae2a:	f000 f9c3 	bl	800b1b4 <__multadd>
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4607      	mov	r7, r0
 800ae32:	2300      	movs	r3, #0
 800ae34:	220a      	movs	r2, #10
 800ae36:	4658      	mov	r0, fp
 800ae38:	f000 f9bc 	bl	800b1b4 <__multadd>
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	e7f0      	b.n	800ae22 <_dtoa_r+0xaba>
 800ae40:	9b00      	ldr	r3, [sp, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bfcc      	ite	gt
 800ae46:	461e      	movgt	r6, r3
 800ae48:	2601      	movle	r6, #1
 800ae4a:	4456      	add	r6, sl
 800ae4c:	2700      	movs	r7, #0
 800ae4e:	4649      	mov	r1, r9
 800ae50:	2201      	movs	r2, #1
 800ae52:	4658      	mov	r0, fp
 800ae54:	f000 fba4 	bl	800b5a0 <__lshift>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4681      	mov	r9, r0
 800ae5c:	f000 fc0c 	bl	800b678 <__mcmp>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	dcb0      	bgt.n	800adc6 <_dtoa_r+0xa5e>
 800ae64:	d102      	bne.n	800ae6c <_dtoa_r+0xb04>
 800ae66:	f018 0f01 	tst.w	r8, #1
 800ae6a:	d1ac      	bne.n	800adc6 <_dtoa_r+0xa5e>
 800ae6c:	4633      	mov	r3, r6
 800ae6e:	461e      	mov	r6, r3
 800ae70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae74:	2a30      	cmp	r2, #48	@ 0x30
 800ae76:	d0fa      	beq.n	800ae6e <_dtoa_r+0xb06>
 800ae78:	e5c2      	b.n	800aa00 <_dtoa_r+0x698>
 800ae7a:	459a      	cmp	sl, r3
 800ae7c:	d1a4      	bne.n	800adc8 <_dtoa_r+0xa60>
 800ae7e:	9b04      	ldr	r3, [sp, #16]
 800ae80:	3301      	adds	r3, #1
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	2331      	movs	r3, #49	@ 0x31
 800ae86:	f88a 3000 	strb.w	r3, [sl]
 800ae8a:	e5b9      	b.n	800aa00 <_dtoa_r+0x698>
 800ae8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aeec <_dtoa_r+0xb84>
 800ae92:	b11b      	cbz	r3, 800ae9c <_dtoa_r+0xb34>
 800ae94:	f10a 0308 	add.w	r3, sl, #8
 800ae98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	4650      	mov	r0, sl
 800ae9e:	b019      	add	sp, #100	@ 0x64
 800aea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	f77f ae37 	ble.w	800ab1a <_dtoa_r+0x7b2>
 800aeac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeae:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	e655      	b.n	800ab60 <_dtoa_r+0x7f8>
 800aeb4:	9b00      	ldr	r3, [sp, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f77f aed6 	ble.w	800ac68 <_dtoa_r+0x900>
 800aebc:	4656      	mov	r6, sl
 800aebe:	4621      	mov	r1, r4
 800aec0:	4648      	mov	r0, r9
 800aec2:	f7ff f9c7 	bl	800a254 <quorem>
 800aec6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aeca:	f806 8b01 	strb.w	r8, [r6], #1
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	eba6 020a 	sub.w	r2, r6, sl
 800aed4:	4293      	cmp	r3, r2
 800aed6:	ddb3      	ble.n	800ae40 <_dtoa_r+0xad8>
 800aed8:	4649      	mov	r1, r9
 800aeda:	2300      	movs	r3, #0
 800aedc:	220a      	movs	r2, #10
 800aede:	4658      	mov	r0, fp
 800aee0:	f000 f968 	bl	800b1b4 <__multadd>
 800aee4:	4681      	mov	r9, r0
 800aee6:	e7ea      	b.n	800aebe <_dtoa_r+0xb56>
 800aee8:	0800e3ad 	.word	0x0800e3ad
 800aeec:	0800e331 	.word	0x0800e331

0800aef0 <_free_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4605      	mov	r5, r0
 800aef4:	2900      	cmp	r1, #0
 800aef6:	d041      	beq.n	800af7c <_free_r+0x8c>
 800aef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aefc:	1f0c      	subs	r4, r1, #4
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bfb8      	it	lt
 800af02:	18e4      	addlt	r4, r4, r3
 800af04:	f000 f8e8 	bl	800b0d8 <__malloc_lock>
 800af08:	4a1d      	ldr	r2, [pc, #116]	@ (800af80 <_free_r+0x90>)
 800af0a:	6813      	ldr	r3, [r2, #0]
 800af0c:	b933      	cbnz	r3, 800af1c <_free_r+0x2c>
 800af0e:	6063      	str	r3, [r4, #4]
 800af10:	6014      	str	r4, [r2, #0]
 800af12:	4628      	mov	r0, r5
 800af14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af18:	f000 b8e4 	b.w	800b0e4 <__malloc_unlock>
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d908      	bls.n	800af32 <_free_r+0x42>
 800af20:	6820      	ldr	r0, [r4, #0]
 800af22:	1821      	adds	r1, r4, r0
 800af24:	428b      	cmp	r3, r1
 800af26:	bf01      	itttt	eq
 800af28:	6819      	ldreq	r1, [r3, #0]
 800af2a:	685b      	ldreq	r3, [r3, #4]
 800af2c:	1809      	addeq	r1, r1, r0
 800af2e:	6021      	streq	r1, [r4, #0]
 800af30:	e7ed      	b.n	800af0e <_free_r+0x1e>
 800af32:	461a      	mov	r2, r3
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	b10b      	cbz	r3, 800af3c <_free_r+0x4c>
 800af38:	42a3      	cmp	r3, r4
 800af3a:	d9fa      	bls.n	800af32 <_free_r+0x42>
 800af3c:	6811      	ldr	r1, [r2, #0]
 800af3e:	1850      	adds	r0, r2, r1
 800af40:	42a0      	cmp	r0, r4
 800af42:	d10b      	bne.n	800af5c <_free_r+0x6c>
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	4401      	add	r1, r0
 800af48:	1850      	adds	r0, r2, r1
 800af4a:	4283      	cmp	r3, r0
 800af4c:	6011      	str	r1, [r2, #0]
 800af4e:	d1e0      	bne.n	800af12 <_free_r+0x22>
 800af50:	6818      	ldr	r0, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	6053      	str	r3, [r2, #4]
 800af56:	4408      	add	r0, r1
 800af58:	6010      	str	r0, [r2, #0]
 800af5a:	e7da      	b.n	800af12 <_free_r+0x22>
 800af5c:	d902      	bls.n	800af64 <_free_r+0x74>
 800af5e:	230c      	movs	r3, #12
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	e7d6      	b.n	800af12 <_free_r+0x22>
 800af64:	6820      	ldr	r0, [r4, #0]
 800af66:	1821      	adds	r1, r4, r0
 800af68:	428b      	cmp	r3, r1
 800af6a:	bf04      	itt	eq
 800af6c:	6819      	ldreq	r1, [r3, #0]
 800af6e:	685b      	ldreq	r3, [r3, #4]
 800af70:	6063      	str	r3, [r4, #4]
 800af72:	bf04      	itt	eq
 800af74:	1809      	addeq	r1, r1, r0
 800af76:	6021      	streq	r1, [r4, #0]
 800af78:	6054      	str	r4, [r2, #4]
 800af7a:	e7ca      	b.n	800af12 <_free_r+0x22>
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	20002d60 	.word	0x20002d60

0800af84 <malloc>:
 800af84:	4b02      	ldr	r3, [pc, #8]	@ (800af90 <malloc+0xc>)
 800af86:	4601      	mov	r1, r0
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	f000 b825 	b.w	800afd8 <_malloc_r>
 800af8e:	bf00      	nop
 800af90:	200000a0 	.word	0x200000a0

0800af94 <sbrk_aligned>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4e0f      	ldr	r6, [pc, #60]	@ (800afd4 <sbrk_aligned+0x40>)
 800af98:	460c      	mov	r4, r1
 800af9a:	6831      	ldr	r1, [r6, #0]
 800af9c:	4605      	mov	r5, r0
 800af9e:	b911      	cbnz	r1, 800afa6 <sbrk_aligned+0x12>
 800afa0:	f001 fdf2 	bl	800cb88 <_sbrk_r>
 800afa4:	6030      	str	r0, [r6, #0]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f001 fded 	bl	800cb88 <_sbrk_r>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	d103      	bne.n	800afba <sbrk_aligned+0x26>
 800afb2:	f04f 34ff 	mov.w	r4, #4294967295
 800afb6:	4620      	mov	r0, r4
 800afb8:	bd70      	pop	{r4, r5, r6, pc}
 800afba:	1cc4      	adds	r4, r0, #3
 800afbc:	f024 0403 	bic.w	r4, r4, #3
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d0f8      	beq.n	800afb6 <sbrk_aligned+0x22>
 800afc4:	1a21      	subs	r1, r4, r0
 800afc6:	4628      	mov	r0, r5
 800afc8:	f001 fdde 	bl	800cb88 <_sbrk_r>
 800afcc:	3001      	adds	r0, #1
 800afce:	d1f2      	bne.n	800afb6 <sbrk_aligned+0x22>
 800afd0:	e7ef      	b.n	800afb2 <sbrk_aligned+0x1e>
 800afd2:	bf00      	nop
 800afd4:	20002d5c 	.word	0x20002d5c

0800afd8 <_malloc_r>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	1ccd      	adds	r5, r1, #3
 800afde:	f025 0503 	bic.w	r5, r5, #3
 800afe2:	3508      	adds	r5, #8
 800afe4:	2d0c      	cmp	r5, #12
 800afe6:	bf38      	it	cc
 800afe8:	250c      	movcc	r5, #12
 800afea:	2d00      	cmp	r5, #0
 800afec:	4606      	mov	r6, r0
 800afee:	db01      	blt.n	800aff4 <_malloc_r+0x1c>
 800aff0:	42a9      	cmp	r1, r5
 800aff2:	d904      	bls.n	800affe <_malloc_r+0x26>
 800aff4:	230c      	movs	r3, #12
 800aff6:	6033      	str	r3, [r6, #0]
 800aff8:	2000      	movs	r0, #0
 800affa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0d4 <_malloc_r+0xfc>
 800b002:	f000 f869 	bl	800b0d8 <__malloc_lock>
 800b006:	f8d8 3000 	ldr.w	r3, [r8]
 800b00a:	461c      	mov	r4, r3
 800b00c:	bb44      	cbnz	r4, 800b060 <_malloc_r+0x88>
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	f7ff ffbf 	bl	800af94 <sbrk_aligned>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	4604      	mov	r4, r0
 800b01a:	d158      	bne.n	800b0ce <_malloc_r+0xf6>
 800b01c:	f8d8 4000 	ldr.w	r4, [r8]
 800b020:	4627      	mov	r7, r4
 800b022:	2f00      	cmp	r7, #0
 800b024:	d143      	bne.n	800b0ae <_malloc_r+0xd6>
 800b026:	2c00      	cmp	r4, #0
 800b028:	d04b      	beq.n	800b0c2 <_malloc_r+0xea>
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	4639      	mov	r1, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	eb04 0903 	add.w	r9, r4, r3
 800b034:	f001 fda8 	bl	800cb88 <_sbrk_r>
 800b038:	4581      	cmp	r9, r0
 800b03a:	d142      	bne.n	800b0c2 <_malloc_r+0xea>
 800b03c:	6821      	ldr	r1, [r4, #0]
 800b03e:	1a6d      	subs	r5, r5, r1
 800b040:	4629      	mov	r1, r5
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ffa6 	bl	800af94 <sbrk_aligned>
 800b048:	3001      	adds	r0, #1
 800b04a:	d03a      	beq.n	800b0c2 <_malloc_r+0xea>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	442b      	add	r3, r5
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	f8d8 3000 	ldr.w	r3, [r8]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	bb62      	cbnz	r2, 800b0b4 <_malloc_r+0xdc>
 800b05a:	f8c8 7000 	str.w	r7, [r8]
 800b05e:	e00f      	b.n	800b080 <_malloc_r+0xa8>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	1b52      	subs	r2, r2, r5
 800b064:	d420      	bmi.n	800b0a8 <_malloc_r+0xd0>
 800b066:	2a0b      	cmp	r2, #11
 800b068:	d917      	bls.n	800b09a <_malloc_r+0xc2>
 800b06a:	1961      	adds	r1, r4, r5
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	6025      	str	r5, [r4, #0]
 800b070:	bf18      	it	ne
 800b072:	6059      	strne	r1, [r3, #4]
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	bf08      	it	eq
 800b078:	f8c8 1000 	streq.w	r1, [r8]
 800b07c:	5162      	str	r2, [r4, r5]
 800b07e:	604b      	str	r3, [r1, #4]
 800b080:	4630      	mov	r0, r6
 800b082:	f000 f82f 	bl	800b0e4 <__malloc_unlock>
 800b086:	f104 000b 	add.w	r0, r4, #11
 800b08a:	1d23      	adds	r3, r4, #4
 800b08c:	f020 0007 	bic.w	r0, r0, #7
 800b090:	1ac2      	subs	r2, r0, r3
 800b092:	bf1c      	itt	ne
 800b094:	1a1b      	subne	r3, r3, r0
 800b096:	50a3      	strne	r3, [r4, r2]
 800b098:	e7af      	b.n	800affa <_malloc_r+0x22>
 800b09a:	6862      	ldr	r2, [r4, #4]
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	bf0c      	ite	eq
 800b0a0:	f8c8 2000 	streq.w	r2, [r8]
 800b0a4:	605a      	strne	r2, [r3, #4]
 800b0a6:	e7eb      	b.n	800b080 <_malloc_r+0xa8>
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	6864      	ldr	r4, [r4, #4]
 800b0ac:	e7ae      	b.n	800b00c <_malloc_r+0x34>
 800b0ae:	463c      	mov	r4, r7
 800b0b0:	687f      	ldr	r7, [r7, #4]
 800b0b2:	e7b6      	b.n	800b022 <_malloc_r+0x4a>
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	d1fb      	bne.n	800b0b4 <_malloc_r+0xdc>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	6053      	str	r3, [r2, #4]
 800b0c0:	e7de      	b.n	800b080 <_malloc_r+0xa8>
 800b0c2:	230c      	movs	r3, #12
 800b0c4:	6033      	str	r3, [r6, #0]
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f000 f80c 	bl	800b0e4 <__malloc_unlock>
 800b0cc:	e794      	b.n	800aff8 <_malloc_r+0x20>
 800b0ce:	6005      	str	r5, [r0, #0]
 800b0d0:	e7d6      	b.n	800b080 <_malloc_r+0xa8>
 800b0d2:	bf00      	nop
 800b0d4:	20002d60 	.word	0x20002d60

0800b0d8 <__malloc_lock>:
 800b0d8:	4801      	ldr	r0, [pc, #4]	@ (800b0e0 <__malloc_lock+0x8>)
 800b0da:	f7ff b8a4 	b.w	800a226 <__retarget_lock_acquire_recursive>
 800b0de:	bf00      	nop
 800b0e0:	20002d58 	.word	0x20002d58

0800b0e4 <__malloc_unlock>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	@ (800b0ec <__malloc_unlock+0x8>)
 800b0e6:	f7ff b89f 	b.w	800a228 <__retarget_lock_release_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	20002d58 	.word	0x20002d58

0800b0f0 <_Balloc>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	69c6      	ldr	r6, [r0, #28]
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	b976      	cbnz	r6, 800b118 <_Balloc+0x28>
 800b0fa:	2010      	movs	r0, #16
 800b0fc:	f7ff ff42 	bl	800af84 <malloc>
 800b100:	4602      	mov	r2, r0
 800b102:	61e0      	str	r0, [r4, #28]
 800b104:	b920      	cbnz	r0, 800b110 <_Balloc+0x20>
 800b106:	4b18      	ldr	r3, [pc, #96]	@ (800b168 <_Balloc+0x78>)
 800b108:	4818      	ldr	r0, [pc, #96]	@ (800b16c <_Balloc+0x7c>)
 800b10a:	216b      	movs	r1, #107	@ 0x6b
 800b10c:	f001 fd54 	bl	800cbb8 <__assert_func>
 800b110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b114:	6006      	str	r6, [r0, #0]
 800b116:	60c6      	str	r6, [r0, #12]
 800b118:	69e6      	ldr	r6, [r4, #28]
 800b11a:	68f3      	ldr	r3, [r6, #12]
 800b11c:	b183      	cbz	r3, 800b140 <_Balloc+0x50>
 800b11e:	69e3      	ldr	r3, [r4, #28]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b126:	b9b8      	cbnz	r0, 800b158 <_Balloc+0x68>
 800b128:	2101      	movs	r1, #1
 800b12a:	fa01 f605 	lsl.w	r6, r1, r5
 800b12e:	1d72      	adds	r2, r6, #5
 800b130:	0092      	lsls	r2, r2, #2
 800b132:	4620      	mov	r0, r4
 800b134:	f001 fd5e 	bl	800cbf4 <_calloc_r>
 800b138:	b160      	cbz	r0, 800b154 <_Balloc+0x64>
 800b13a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b13e:	e00e      	b.n	800b15e <_Balloc+0x6e>
 800b140:	2221      	movs	r2, #33	@ 0x21
 800b142:	2104      	movs	r1, #4
 800b144:	4620      	mov	r0, r4
 800b146:	f001 fd55 	bl	800cbf4 <_calloc_r>
 800b14a:	69e3      	ldr	r3, [r4, #28]
 800b14c:	60f0      	str	r0, [r6, #12]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e4      	bne.n	800b11e <_Balloc+0x2e>
 800b154:	2000      	movs	r0, #0
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	6802      	ldr	r2, [r0, #0]
 800b15a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b15e:	2300      	movs	r3, #0
 800b160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b164:	e7f7      	b.n	800b156 <_Balloc+0x66>
 800b166:	bf00      	nop
 800b168:	0800e33e 	.word	0x0800e33e
 800b16c:	0800e3be 	.word	0x0800e3be

0800b170 <_Bfree>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	69c6      	ldr	r6, [r0, #28]
 800b174:	4605      	mov	r5, r0
 800b176:	460c      	mov	r4, r1
 800b178:	b976      	cbnz	r6, 800b198 <_Bfree+0x28>
 800b17a:	2010      	movs	r0, #16
 800b17c:	f7ff ff02 	bl	800af84 <malloc>
 800b180:	4602      	mov	r2, r0
 800b182:	61e8      	str	r0, [r5, #28]
 800b184:	b920      	cbnz	r0, 800b190 <_Bfree+0x20>
 800b186:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <_Bfree+0x3c>)
 800b188:	4809      	ldr	r0, [pc, #36]	@ (800b1b0 <_Bfree+0x40>)
 800b18a:	218f      	movs	r1, #143	@ 0x8f
 800b18c:	f001 fd14 	bl	800cbb8 <__assert_func>
 800b190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b194:	6006      	str	r6, [r0, #0]
 800b196:	60c6      	str	r6, [r0, #12]
 800b198:	b13c      	cbz	r4, 800b1aa <_Bfree+0x3a>
 800b19a:	69eb      	ldr	r3, [r5, #28]
 800b19c:	6862      	ldr	r2, [r4, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1a4:	6021      	str	r1, [r4, #0]
 800b1a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1aa:	bd70      	pop	{r4, r5, r6, pc}
 800b1ac:	0800e33e 	.word	0x0800e33e
 800b1b0:	0800e3be 	.word	0x0800e3be

0800b1b4 <__multadd>:
 800b1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b8:	690d      	ldr	r5, [r1, #16]
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	460c      	mov	r4, r1
 800b1be:	461e      	mov	r6, r3
 800b1c0:	f101 0c14 	add.w	ip, r1, #20
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b1ca:	b299      	uxth	r1, r3
 800b1cc:	fb02 6101 	mla	r1, r2, r1, r6
 800b1d0:	0c1e      	lsrs	r6, r3, #16
 800b1d2:	0c0b      	lsrs	r3, r1, #16
 800b1d4:	fb02 3306 	mla	r3, r2, r6, r3
 800b1d8:	b289      	uxth	r1, r1
 800b1da:	3001      	adds	r0, #1
 800b1dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1e0:	4285      	cmp	r5, r0
 800b1e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b1e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1ea:	dcec      	bgt.n	800b1c6 <__multadd+0x12>
 800b1ec:	b30e      	cbz	r6, 800b232 <__multadd+0x7e>
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	42ab      	cmp	r3, r5
 800b1f2:	dc19      	bgt.n	800b228 <__multadd+0x74>
 800b1f4:	6861      	ldr	r1, [r4, #4]
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	3101      	adds	r1, #1
 800b1fa:	f7ff ff79 	bl	800b0f0 <_Balloc>
 800b1fe:	4680      	mov	r8, r0
 800b200:	b928      	cbnz	r0, 800b20e <__multadd+0x5a>
 800b202:	4602      	mov	r2, r0
 800b204:	4b0c      	ldr	r3, [pc, #48]	@ (800b238 <__multadd+0x84>)
 800b206:	480d      	ldr	r0, [pc, #52]	@ (800b23c <__multadd+0x88>)
 800b208:	21ba      	movs	r1, #186	@ 0xba
 800b20a:	f001 fcd5 	bl	800cbb8 <__assert_func>
 800b20e:	6922      	ldr	r2, [r4, #16]
 800b210:	3202      	adds	r2, #2
 800b212:	f104 010c 	add.w	r1, r4, #12
 800b216:	0092      	lsls	r2, r2, #2
 800b218:	300c      	adds	r0, #12
 800b21a:	f7ff f806 	bl	800a22a <memcpy>
 800b21e:	4621      	mov	r1, r4
 800b220:	4638      	mov	r0, r7
 800b222:	f7ff ffa5 	bl	800b170 <_Bfree>
 800b226:	4644      	mov	r4, r8
 800b228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b22c:	3501      	adds	r5, #1
 800b22e:	615e      	str	r6, [r3, #20]
 800b230:	6125      	str	r5, [r4, #16]
 800b232:	4620      	mov	r0, r4
 800b234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b238:	0800e3ad 	.word	0x0800e3ad
 800b23c:	0800e3be 	.word	0x0800e3be

0800b240 <__s2b>:
 800b240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b244:	460c      	mov	r4, r1
 800b246:	4615      	mov	r5, r2
 800b248:	461f      	mov	r7, r3
 800b24a:	2209      	movs	r2, #9
 800b24c:	3308      	adds	r3, #8
 800b24e:	4606      	mov	r6, r0
 800b250:	fb93 f3f2 	sdiv	r3, r3, r2
 800b254:	2100      	movs	r1, #0
 800b256:	2201      	movs	r2, #1
 800b258:	429a      	cmp	r2, r3
 800b25a:	db09      	blt.n	800b270 <__s2b+0x30>
 800b25c:	4630      	mov	r0, r6
 800b25e:	f7ff ff47 	bl	800b0f0 <_Balloc>
 800b262:	b940      	cbnz	r0, 800b276 <__s2b+0x36>
 800b264:	4602      	mov	r2, r0
 800b266:	4b19      	ldr	r3, [pc, #100]	@ (800b2cc <__s2b+0x8c>)
 800b268:	4819      	ldr	r0, [pc, #100]	@ (800b2d0 <__s2b+0x90>)
 800b26a:	21d3      	movs	r1, #211	@ 0xd3
 800b26c:	f001 fca4 	bl	800cbb8 <__assert_func>
 800b270:	0052      	lsls	r2, r2, #1
 800b272:	3101      	adds	r1, #1
 800b274:	e7f0      	b.n	800b258 <__s2b+0x18>
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	6143      	str	r3, [r0, #20]
 800b27a:	2d09      	cmp	r5, #9
 800b27c:	f04f 0301 	mov.w	r3, #1
 800b280:	6103      	str	r3, [r0, #16]
 800b282:	dd16      	ble.n	800b2b2 <__s2b+0x72>
 800b284:	f104 0909 	add.w	r9, r4, #9
 800b288:	46c8      	mov	r8, r9
 800b28a:	442c      	add	r4, r5
 800b28c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b290:	4601      	mov	r1, r0
 800b292:	3b30      	subs	r3, #48	@ 0x30
 800b294:	220a      	movs	r2, #10
 800b296:	4630      	mov	r0, r6
 800b298:	f7ff ff8c 	bl	800b1b4 <__multadd>
 800b29c:	45a0      	cmp	r8, r4
 800b29e:	d1f5      	bne.n	800b28c <__s2b+0x4c>
 800b2a0:	f1a5 0408 	sub.w	r4, r5, #8
 800b2a4:	444c      	add	r4, r9
 800b2a6:	1b2d      	subs	r5, r5, r4
 800b2a8:	1963      	adds	r3, r4, r5
 800b2aa:	42bb      	cmp	r3, r7
 800b2ac:	db04      	blt.n	800b2b8 <__s2b+0x78>
 800b2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b2:	340a      	adds	r4, #10
 800b2b4:	2509      	movs	r5, #9
 800b2b6:	e7f6      	b.n	800b2a6 <__s2b+0x66>
 800b2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2bc:	4601      	mov	r1, r0
 800b2be:	3b30      	subs	r3, #48	@ 0x30
 800b2c0:	220a      	movs	r2, #10
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ff76 	bl	800b1b4 <__multadd>
 800b2c8:	e7ee      	b.n	800b2a8 <__s2b+0x68>
 800b2ca:	bf00      	nop
 800b2cc:	0800e3ad 	.word	0x0800e3ad
 800b2d0:	0800e3be 	.word	0x0800e3be

0800b2d4 <__hi0bits>:
 800b2d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b2d8:	4603      	mov	r3, r0
 800b2da:	bf36      	itet	cc
 800b2dc:	0403      	lslcc	r3, r0, #16
 800b2de:	2000      	movcs	r0, #0
 800b2e0:	2010      	movcc	r0, #16
 800b2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2e6:	bf3c      	itt	cc
 800b2e8:	021b      	lslcc	r3, r3, #8
 800b2ea:	3008      	addcc	r0, #8
 800b2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2f0:	bf3c      	itt	cc
 800b2f2:	011b      	lslcc	r3, r3, #4
 800b2f4:	3004      	addcc	r0, #4
 800b2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2fa:	bf3c      	itt	cc
 800b2fc:	009b      	lslcc	r3, r3, #2
 800b2fe:	3002      	addcc	r0, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	db05      	blt.n	800b310 <__hi0bits+0x3c>
 800b304:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b308:	f100 0001 	add.w	r0, r0, #1
 800b30c:	bf08      	it	eq
 800b30e:	2020      	moveq	r0, #32
 800b310:	4770      	bx	lr

0800b312 <__lo0bits>:
 800b312:	6803      	ldr	r3, [r0, #0]
 800b314:	4602      	mov	r2, r0
 800b316:	f013 0007 	ands.w	r0, r3, #7
 800b31a:	d00b      	beq.n	800b334 <__lo0bits+0x22>
 800b31c:	07d9      	lsls	r1, r3, #31
 800b31e:	d421      	bmi.n	800b364 <__lo0bits+0x52>
 800b320:	0798      	lsls	r0, r3, #30
 800b322:	bf49      	itett	mi
 800b324:	085b      	lsrmi	r3, r3, #1
 800b326:	089b      	lsrpl	r3, r3, #2
 800b328:	2001      	movmi	r0, #1
 800b32a:	6013      	strmi	r3, [r2, #0]
 800b32c:	bf5c      	itt	pl
 800b32e:	6013      	strpl	r3, [r2, #0]
 800b330:	2002      	movpl	r0, #2
 800b332:	4770      	bx	lr
 800b334:	b299      	uxth	r1, r3
 800b336:	b909      	cbnz	r1, 800b33c <__lo0bits+0x2a>
 800b338:	0c1b      	lsrs	r3, r3, #16
 800b33a:	2010      	movs	r0, #16
 800b33c:	b2d9      	uxtb	r1, r3
 800b33e:	b909      	cbnz	r1, 800b344 <__lo0bits+0x32>
 800b340:	3008      	adds	r0, #8
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	0719      	lsls	r1, r3, #28
 800b346:	bf04      	itt	eq
 800b348:	091b      	lsreq	r3, r3, #4
 800b34a:	3004      	addeq	r0, #4
 800b34c:	0799      	lsls	r1, r3, #30
 800b34e:	bf04      	itt	eq
 800b350:	089b      	lsreq	r3, r3, #2
 800b352:	3002      	addeq	r0, #2
 800b354:	07d9      	lsls	r1, r3, #31
 800b356:	d403      	bmi.n	800b360 <__lo0bits+0x4e>
 800b358:	085b      	lsrs	r3, r3, #1
 800b35a:	f100 0001 	add.w	r0, r0, #1
 800b35e:	d003      	beq.n	800b368 <__lo0bits+0x56>
 800b360:	6013      	str	r3, [r2, #0]
 800b362:	4770      	bx	lr
 800b364:	2000      	movs	r0, #0
 800b366:	4770      	bx	lr
 800b368:	2020      	movs	r0, #32
 800b36a:	4770      	bx	lr

0800b36c <__i2b>:
 800b36c:	b510      	push	{r4, lr}
 800b36e:	460c      	mov	r4, r1
 800b370:	2101      	movs	r1, #1
 800b372:	f7ff febd 	bl	800b0f0 <_Balloc>
 800b376:	4602      	mov	r2, r0
 800b378:	b928      	cbnz	r0, 800b386 <__i2b+0x1a>
 800b37a:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <__i2b+0x24>)
 800b37c:	4805      	ldr	r0, [pc, #20]	@ (800b394 <__i2b+0x28>)
 800b37e:	f240 1145 	movw	r1, #325	@ 0x145
 800b382:	f001 fc19 	bl	800cbb8 <__assert_func>
 800b386:	2301      	movs	r3, #1
 800b388:	6144      	str	r4, [r0, #20]
 800b38a:	6103      	str	r3, [r0, #16]
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	bf00      	nop
 800b390:	0800e3ad 	.word	0x0800e3ad
 800b394:	0800e3be 	.word	0x0800e3be

0800b398 <__multiply>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4614      	mov	r4, r2
 800b39e:	690a      	ldr	r2, [r1, #16]
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	bfa8      	it	ge
 800b3a6:	4623      	movge	r3, r4
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	bfa4      	itt	ge
 800b3ac:	460c      	movge	r4, r1
 800b3ae:	461f      	movge	r7, r3
 800b3b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b3b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b3b8:	68a3      	ldr	r3, [r4, #8]
 800b3ba:	6861      	ldr	r1, [r4, #4]
 800b3bc:	eb0a 0609 	add.w	r6, sl, r9
 800b3c0:	42b3      	cmp	r3, r6
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	bfb8      	it	lt
 800b3c6:	3101      	addlt	r1, #1
 800b3c8:	f7ff fe92 	bl	800b0f0 <_Balloc>
 800b3cc:	b930      	cbnz	r0, 800b3dc <__multiply+0x44>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	4b44      	ldr	r3, [pc, #272]	@ (800b4e4 <__multiply+0x14c>)
 800b3d2:	4845      	ldr	r0, [pc, #276]	@ (800b4e8 <__multiply+0x150>)
 800b3d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b3d8:	f001 fbee 	bl	800cbb8 <__assert_func>
 800b3dc:	f100 0514 	add.w	r5, r0, #20
 800b3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4543      	cmp	r3, r8
 800b3ea:	d321      	bcc.n	800b430 <__multiply+0x98>
 800b3ec:	f107 0114 	add.w	r1, r7, #20
 800b3f0:	f104 0214 	add.w	r2, r4, #20
 800b3f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b3f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b3fc:	9302      	str	r3, [sp, #8]
 800b3fe:	1b13      	subs	r3, r2, r4
 800b400:	3b15      	subs	r3, #21
 800b402:	f023 0303 	bic.w	r3, r3, #3
 800b406:	3304      	adds	r3, #4
 800b408:	f104 0715 	add.w	r7, r4, #21
 800b40c:	42ba      	cmp	r2, r7
 800b40e:	bf38      	it	cc
 800b410:	2304      	movcc	r3, #4
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	9b02      	ldr	r3, [sp, #8]
 800b416:	9103      	str	r1, [sp, #12]
 800b418:	428b      	cmp	r3, r1
 800b41a:	d80c      	bhi.n	800b436 <__multiply+0x9e>
 800b41c:	2e00      	cmp	r6, #0
 800b41e:	dd03      	ble.n	800b428 <__multiply+0x90>
 800b420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b424:	2b00      	cmp	r3, #0
 800b426:	d05b      	beq.n	800b4e0 <__multiply+0x148>
 800b428:	6106      	str	r6, [r0, #16]
 800b42a:	b005      	add	sp, #20
 800b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b430:	f843 2b04 	str.w	r2, [r3], #4
 800b434:	e7d8      	b.n	800b3e8 <__multiply+0x50>
 800b436:	f8b1 a000 	ldrh.w	sl, [r1]
 800b43a:	f1ba 0f00 	cmp.w	sl, #0
 800b43e:	d024      	beq.n	800b48a <__multiply+0xf2>
 800b440:	f104 0e14 	add.w	lr, r4, #20
 800b444:	46a9      	mov	r9, r5
 800b446:	f04f 0c00 	mov.w	ip, #0
 800b44a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b44e:	f8d9 3000 	ldr.w	r3, [r9]
 800b452:	fa1f fb87 	uxth.w	fp, r7
 800b456:	b29b      	uxth	r3, r3
 800b458:	fb0a 330b 	mla	r3, sl, fp, r3
 800b45c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b460:	f8d9 7000 	ldr.w	r7, [r9]
 800b464:	4463      	add	r3, ip
 800b466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b46a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b46e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b472:	b29b      	uxth	r3, r3
 800b474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b478:	4572      	cmp	r2, lr
 800b47a:	f849 3b04 	str.w	r3, [r9], #4
 800b47e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b482:	d8e2      	bhi.n	800b44a <__multiply+0xb2>
 800b484:	9b01      	ldr	r3, [sp, #4]
 800b486:	f845 c003 	str.w	ip, [r5, r3]
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b490:	3104      	adds	r1, #4
 800b492:	f1b9 0f00 	cmp.w	r9, #0
 800b496:	d021      	beq.n	800b4dc <__multiply+0x144>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	f104 0c14 	add.w	ip, r4, #20
 800b49e:	46ae      	mov	lr, r5
 800b4a0:	f04f 0a00 	mov.w	sl, #0
 800b4a4:	f8bc b000 	ldrh.w	fp, [ip]
 800b4a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b4ac:	fb09 770b 	mla	r7, r9, fp, r7
 800b4b0:	4457      	add	r7, sl
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4b8:	f84e 3b04 	str.w	r3, [lr], #4
 800b4bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4c4:	f8be 3000 	ldrh.w	r3, [lr]
 800b4c8:	fb09 330a 	mla	r3, r9, sl, r3
 800b4cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b4d0:	4562      	cmp	r2, ip
 800b4d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4d6:	d8e5      	bhi.n	800b4a4 <__multiply+0x10c>
 800b4d8:	9f01      	ldr	r7, [sp, #4]
 800b4da:	51eb      	str	r3, [r5, r7]
 800b4dc:	3504      	adds	r5, #4
 800b4de:	e799      	b.n	800b414 <__multiply+0x7c>
 800b4e0:	3e01      	subs	r6, #1
 800b4e2:	e79b      	b.n	800b41c <__multiply+0x84>
 800b4e4:	0800e3ad 	.word	0x0800e3ad
 800b4e8:	0800e3be 	.word	0x0800e3be

0800b4ec <__pow5mult>:
 800b4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	f012 0203 	ands.w	r2, r2, #3
 800b4f6:	4607      	mov	r7, r0
 800b4f8:	460e      	mov	r6, r1
 800b4fa:	d007      	beq.n	800b50c <__pow5mult+0x20>
 800b4fc:	4c25      	ldr	r4, [pc, #148]	@ (800b594 <__pow5mult+0xa8>)
 800b4fe:	3a01      	subs	r2, #1
 800b500:	2300      	movs	r3, #0
 800b502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b506:	f7ff fe55 	bl	800b1b4 <__multadd>
 800b50a:	4606      	mov	r6, r0
 800b50c:	10ad      	asrs	r5, r5, #2
 800b50e:	d03d      	beq.n	800b58c <__pow5mult+0xa0>
 800b510:	69fc      	ldr	r4, [r7, #28]
 800b512:	b97c      	cbnz	r4, 800b534 <__pow5mult+0x48>
 800b514:	2010      	movs	r0, #16
 800b516:	f7ff fd35 	bl	800af84 <malloc>
 800b51a:	4602      	mov	r2, r0
 800b51c:	61f8      	str	r0, [r7, #28]
 800b51e:	b928      	cbnz	r0, 800b52c <__pow5mult+0x40>
 800b520:	4b1d      	ldr	r3, [pc, #116]	@ (800b598 <__pow5mult+0xac>)
 800b522:	481e      	ldr	r0, [pc, #120]	@ (800b59c <__pow5mult+0xb0>)
 800b524:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b528:	f001 fb46 	bl	800cbb8 <__assert_func>
 800b52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b530:	6004      	str	r4, [r0, #0]
 800b532:	60c4      	str	r4, [r0, #12]
 800b534:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b53c:	b94c      	cbnz	r4, 800b552 <__pow5mult+0x66>
 800b53e:	f240 2171 	movw	r1, #625	@ 0x271
 800b542:	4638      	mov	r0, r7
 800b544:	f7ff ff12 	bl	800b36c <__i2b>
 800b548:	2300      	movs	r3, #0
 800b54a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b54e:	4604      	mov	r4, r0
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	f04f 0900 	mov.w	r9, #0
 800b556:	07eb      	lsls	r3, r5, #31
 800b558:	d50a      	bpl.n	800b570 <__pow5mult+0x84>
 800b55a:	4631      	mov	r1, r6
 800b55c:	4622      	mov	r2, r4
 800b55e:	4638      	mov	r0, r7
 800b560:	f7ff ff1a 	bl	800b398 <__multiply>
 800b564:	4631      	mov	r1, r6
 800b566:	4680      	mov	r8, r0
 800b568:	4638      	mov	r0, r7
 800b56a:	f7ff fe01 	bl	800b170 <_Bfree>
 800b56e:	4646      	mov	r6, r8
 800b570:	106d      	asrs	r5, r5, #1
 800b572:	d00b      	beq.n	800b58c <__pow5mult+0xa0>
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	b938      	cbnz	r0, 800b588 <__pow5mult+0x9c>
 800b578:	4622      	mov	r2, r4
 800b57a:	4621      	mov	r1, r4
 800b57c:	4638      	mov	r0, r7
 800b57e:	f7ff ff0b 	bl	800b398 <__multiply>
 800b582:	6020      	str	r0, [r4, #0]
 800b584:	f8c0 9000 	str.w	r9, [r0]
 800b588:	4604      	mov	r4, r0
 800b58a:	e7e4      	b.n	800b556 <__pow5mult+0x6a>
 800b58c:	4630      	mov	r0, r6
 800b58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b592:	bf00      	nop
 800b594:	0800e418 	.word	0x0800e418
 800b598:	0800e33e 	.word	0x0800e33e
 800b59c:	0800e3be 	.word	0x0800e3be

0800b5a0 <__lshift>:
 800b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	6849      	ldr	r1, [r1, #4]
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	4607      	mov	r7, r0
 800b5b2:	4691      	mov	r9, r2
 800b5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5b8:	f108 0601 	add.w	r6, r8, #1
 800b5bc:	42b3      	cmp	r3, r6
 800b5be:	db0b      	blt.n	800b5d8 <__lshift+0x38>
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f7ff fd95 	bl	800b0f0 <_Balloc>
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	b948      	cbnz	r0, 800b5de <__lshift+0x3e>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b28      	ldr	r3, [pc, #160]	@ (800b670 <__lshift+0xd0>)
 800b5ce:	4829      	ldr	r0, [pc, #164]	@ (800b674 <__lshift+0xd4>)
 800b5d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b5d4:	f001 faf0 	bl	800cbb8 <__assert_func>
 800b5d8:	3101      	adds	r1, #1
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	e7ee      	b.n	800b5bc <__lshift+0x1c>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f100 0114 	add.w	r1, r0, #20
 800b5e4:	f100 0210 	add.w	r2, r0, #16
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	4553      	cmp	r3, sl
 800b5ec:	db33      	blt.n	800b656 <__lshift+0xb6>
 800b5ee:	6920      	ldr	r0, [r4, #16]
 800b5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5f4:	f104 0314 	add.w	r3, r4, #20
 800b5f8:	f019 091f 	ands.w	r9, r9, #31
 800b5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b604:	d02b      	beq.n	800b65e <__lshift+0xbe>
 800b606:	f1c9 0e20 	rsb	lr, r9, #32
 800b60a:	468a      	mov	sl, r1
 800b60c:	2200      	movs	r2, #0
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	fa00 f009 	lsl.w	r0, r0, r9
 800b614:	4310      	orrs	r0, r2
 800b616:	f84a 0b04 	str.w	r0, [sl], #4
 800b61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61e:	459c      	cmp	ip, r3
 800b620:	fa22 f20e 	lsr.w	r2, r2, lr
 800b624:	d8f3      	bhi.n	800b60e <__lshift+0x6e>
 800b626:	ebac 0304 	sub.w	r3, ip, r4
 800b62a:	3b15      	subs	r3, #21
 800b62c:	f023 0303 	bic.w	r3, r3, #3
 800b630:	3304      	adds	r3, #4
 800b632:	f104 0015 	add.w	r0, r4, #21
 800b636:	4584      	cmp	ip, r0
 800b638:	bf38      	it	cc
 800b63a:	2304      	movcc	r3, #4
 800b63c:	50ca      	str	r2, [r1, r3]
 800b63e:	b10a      	cbz	r2, 800b644 <__lshift+0xa4>
 800b640:	f108 0602 	add.w	r6, r8, #2
 800b644:	3e01      	subs	r6, #1
 800b646:	4638      	mov	r0, r7
 800b648:	612e      	str	r6, [r5, #16]
 800b64a:	4621      	mov	r1, r4
 800b64c:	f7ff fd90 	bl	800b170 <_Bfree>
 800b650:	4628      	mov	r0, r5
 800b652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b656:	f842 0f04 	str.w	r0, [r2, #4]!
 800b65a:	3301      	adds	r3, #1
 800b65c:	e7c5      	b.n	800b5ea <__lshift+0x4a>
 800b65e:	3904      	subs	r1, #4
 800b660:	f853 2b04 	ldr.w	r2, [r3], #4
 800b664:	f841 2f04 	str.w	r2, [r1, #4]!
 800b668:	459c      	cmp	ip, r3
 800b66a:	d8f9      	bhi.n	800b660 <__lshift+0xc0>
 800b66c:	e7ea      	b.n	800b644 <__lshift+0xa4>
 800b66e:	bf00      	nop
 800b670:	0800e3ad 	.word	0x0800e3ad
 800b674:	0800e3be 	.word	0x0800e3be

0800b678 <__mcmp>:
 800b678:	690a      	ldr	r2, [r1, #16]
 800b67a:	4603      	mov	r3, r0
 800b67c:	6900      	ldr	r0, [r0, #16]
 800b67e:	1a80      	subs	r0, r0, r2
 800b680:	b530      	push	{r4, r5, lr}
 800b682:	d10e      	bne.n	800b6a2 <__mcmp+0x2a>
 800b684:	3314      	adds	r3, #20
 800b686:	3114      	adds	r1, #20
 800b688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b68c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b698:	4295      	cmp	r5, r2
 800b69a:	d003      	beq.n	800b6a4 <__mcmp+0x2c>
 800b69c:	d205      	bcs.n	800b6aa <__mcmp+0x32>
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	bd30      	pop	{r4, r5, pc}
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	d3f3      	bcc.n	800b690 <__mcmp+0x18>
 800b6a8:	e7fb      	b.n	800b6a2 <__mcmp+0x2a>
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	e7f9      	b.n	800b6a2 <__mcmp+0x2a>
	...

0800b6b0 <__mdiff>:
 800b6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4689      	mov	r9, r1
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4648      	mov	r0, r9
 800b6bc:	4614      	mov	r4, r2
 800b6be:	f7ff ffdb 	bl	800b678 <__mcmp>
 800b6c2:	1e05      	subs	r5, r0, #0
 800b6c4:	d112      	bne.n	800b6ec <__mdiff+0x3c>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff fd11 	bl	800b0f0 <_Balloc>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	b928      	cbnz	r0, 800b6de <__mdiff+0x2e>
 800b6d2:	4b3f      	ldr	r3, [pc, #252]	@ (800b7d0 <__mdiff+0x120>)
 800b6d4:	f240 2137 	movw	r1, #567	@ 0x237
 800b6d8:	483e      	ldr	r0, [pc, #248]	@ (800b7d4 <__mdiff+0x124>)
 800b6da:	f001 fa6d 	bl	800cbb8 <__assert_func>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	b003      	add	sp, #12
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	bfbc      	itt	lt
 800b6ee:	464b      	movlt	r3, r9
 800b6f0:	46a1      	movlt	r9, r4
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b6f8:	bfba      	itte	lt
 800b6fa:	461c      	movlt	r4, r3
 800b6fc:	2501      	movlt	r5, #1
 800b6fe:	2500      	movge	r5, #0
 800b700:	f7ff fcf6 	bl	800b0f0 <_Balloc>
 800b704:	4602      	mov	r2, r0
 800b706:	b918      	cbnz	r0, 800b710 <__mdiff+0x60>
 800b708:	4b31      	ldr	r3, [pc, #196]	@ (800b7d0 <__mdiff+0x120>)
 800b70a:	f240 2145 	movw	r1, #581	@ 0x245
 800b70e:	e7e3      	b.n	800b6d8 <__mdiff+0x28>
 800b710:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b714:	6926      	ldr	r6, [r4, #16]
 800b716:	60c5      	str	r5, [r0, #12]
 800b718:	f109 0310 	add.w	r3, r9, #16
 800b71c:	f109 0514 	add.w	r5, r9, #20
 800b720:	f104 0e14 	add.w	lr, r4, #20
 800b724:	f100 0b14 	add.w	fp, r0, #20
 800b728:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b72c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	46d9      	mov	r9, fp
 800b734:	f04f 0c00 	mov.w	ip, #0
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b73e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	fa1f f38a 	uxth.w	r3, sl
 800b748:	4619      	mov	r1, r3
 800b74a:	b283      	uxth	r3, r0
 800b74c:	1acb      	subs	r3, r1, r3
 800b74e:	0c00      	lsrs	r0, r0, #16
 800b750:	4463      	add	r3, ip
 800b752:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b756:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b760:	4576      	cmp	r6, lr
 800b762:	f849 3b04 	str.w	r3, [r9], #4
 800b766:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b76a:	d8e5      	bhi.n	800b738 <__mdiff+0x88>
 800b76c:	1b33      	subs	r3, r6, r4
 800b76e:	3b15      	subs	r3, #21
 800b770:	f023 0303 	bic.w	r3, r3, #3
 800b774:	3415      	adds	r4, #21
 800b776:	3304      	adds	r3, #4
 800b778:	42a6      	cmp	r6, r4
 800b77a:	bf38      	it	cc
 800b77c:	2304      	movcc	r3, #4
 800b77e:	441d      	add	r5, r3
 800b780:	445b      	add	r3, fp
 800b782:	461e      	mov	r6, r3
 800b784:	462c      	mov	r4, r5
 800b786:	4544      	cmp	r4, r8
 800b788:	d30e      	bcc.n	800b7a8 <__mdiff+0xf8>
 800b78a:	f108 0103 	add.w	r1, r8, #3
 800b78e:	1b49      	subs	r1, r1, r5
 800b790:	f021 0103 	bic.w	r1, r1, #3
 800b794:	3d03      	subs	r5, #3
 800b796:	45a8      	cmp	r8, r5
 800b798:	bf38      	it	cc
 800b79a:	2100      	movcc	r1, #0
 800b79c:	440b      	add	r3, r1
 800b79e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7a2:	b191      	cbz	r1, 800b7ca <__mdiff+0x11a>
 800b7a4:	6117      	str	r7, [r2, #16]
 800b7a6:	e79d      	b.n	800b6e4 <__mdiff+0x34>
 800b7a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7ac:	46e6      	mov	lr, ip
 800b7ae:	0c08      	lsrs	r0, r1, #16
 800b7b0:	fa1c fc81 	uxtah	ip, ip, r1
 800b7b4:	4471      	add	r1, lr
 800b7b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7ba:	b289      	uxth	r1, r1
 800b7bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7c0:	f846 1b04 	str.w	r1, [r6], #4
 800b7c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7c8:	e7dd      	b.n	800b786 <__mdiff+0xd6>
 800b7ca:	3f01      	subs	r7, #1
 800b7cc:	e7e7      	b.n	800b79e <__mdiff+0xee>
 800b7ce:	bf00      	nop
 800b7d0:	0800e3ad 	.word	0x0800e3ad
 800b7d4:	0800e3be 	.word	0x0800e3be

0800b7d8 <__ulp>:
 800b7d8:	b082      	sub	sp, #8
 800b7da:	ed8d 0b00 	vstr	d0, [sp]
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b820 <__ulp+0x48>)
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dc08      	bgt.n	800b7fe <__ulp+0x26>
 800b7ec:	425b      	negs	r3, r3
 800b7ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b7f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7f6:	da04      	bge.n	800b802 <__ulp+0x2a>
 800b7f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b7fc:	4113      	asrs	r3, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	e008      	b.n	800b814 <__ulp+0x3c>
 800b802:	f1a2 0314 	sub.w	r3, r2, #20
 800b806:	2b1e      	cmp	r3, #30
 800b808:	bfda      	itte	le
 800b80a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b80e:	40da      	lsrle	r2, r3
 800b810:	2201      	movgt	r2, #1
 800b812:	2300      	movs	r3, #0
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	ec41 0b10 	vmov	d0, r0, r1
 800b81c:	b002      	add	sp, #8
 800b81e:	4770      	bx	lr
 800b820:	7ff00000 	.word	0x7ff00000

0800b824 <__b2d>:
 800b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b828:	6906      	ldr	r6, [r0, #16]
 800b82a:	f100 0814 	add.w	r8, r0, #20
 800b82e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b832:	1f37      	subs	r7, r6, #4
 800b834:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b838:	4610      	mov	r0, r2
 800b83a:	f7ff fd4b 	bl	800b2d4 <__hi0bits>
 800b83e:	f1c0 0320 	rsb	r3, r0, #32
 800b842:	280a      	cmp	r0, #10
 800b844:	600b      	str	r3, [r1, #0]
 800b846:	491b      	ldr	r1, [pc, #108]	@ (800b8b4 <__b2d+0x90>)
 800b848:	dc15      	bgt.n	800b876 <__b2d+0x52>
 800b84a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b84e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b852:	45b8      	cmp	r8, r7
 800b854:	ea43 0501 	orr.w	r5, r3, r1
 800b858:	bf34      	ite	cc
 800b85a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b85e:	2300      	movcs	r3, #0
 800b860:	3015      	adds	r0, #21
 800b862:	fa02 f000 	lsl.w	r0, r2, r0
 800b866:	fa23 f30c 	lsr.w	r3, r3, ip
 800b86a:	4303      	orrs	r3, r0
 800b86c:	461c      	mov	r4, r3
 800b86e:	ec45 4b10 	vmov	d0, r4, r5
 800b872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b876:	45b8      	cmp	r8, r7
 800b878:	bf3a      	itte	cc
 800b87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b87e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b882:	2300      	movcs	r3, #0
 800b884:	380b      	subs	r0, #11
 800b886:	d012      	beq.n	800b8ae <__b2d+0x8a>
 800b888:	f1c0 0120 	rsb	r1, r0, #32
 800b88c:	fa23 f401 	lsr.w	r4, r3, r1
 800b890:	4082      	lsls	r2, r0
 800b892:	4322      	orrs	r2, r4
 800b894:	4547      	cmp	r7, r8
 800b896:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b89a:	bf8c      	ite	hi
 800b89c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b8a0:	2200      	movls	r2, #0
 800b8a2:	4083      	lsls	r3, r0
 800b8a4:	40ca      	lsrs	r2, r1
 800b8a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	e7de      	b.n	800b86c <__b2d+0x48>
 800b8ae:	ea42 0501 	orr.w	r5, r2, r1
 800b8b2:	e7db      	b.n	800b86c <__b2d+0x48>
 800b8b4:	3ff00000 	.word	0x3ff00000

0800b8b8 <__d2b>:
 800b8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	460f      	mov	r7, r1
 800b8be:	2101      	movs	r1, #1
 800b8c0:	ec59 8b10 	vmov	r8, r9, d0
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	f7ff fc13 	bl	800b0f0 <_Balloc>
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	b930      	cbnz	r0, 800b8dc <__d2b+0x24>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	4b23      	ldr	r3, [pc, #140]	@ (800b960 <__d2b+0xa8>)
 800b8d2:	4824      	ldr	r0, [pc, #144]	@ (800b964 <__d2b+0xac>)
 800b8d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8d8:	f001 f96e 	bl	800cbb8 <__assert_func>
 800b8dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8e4:	b10d      	cbz	r5, 800b8ea <__d2b+0x32>
 800b8e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8ea:	9301      	str	r3, [sp, #4]
 800b8ec:	f1b8 0300 	subs.w	r3, r8, #0
 800b8f0:	d023      	beq.n	800b93a <__d2b+0x82>
 800b8f2:	4668      	mov	r0, sp
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	f7ff fd0c 	bl	800b312 <__lo0bits>
 800b8fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8fe:	b1d0      	cbz	r0, 800b936 <__d2b+0x7e>
 800b900:	f1c0 0320 	rsb	r3, r0, #32
 800b904:	fa02 f303 	lsl.w	r3, r2, r3
 800b908:	430b      	orrs	r3, r1
 800b90a:	40c2      	lsrs	r2, r0
 800b90c:	6163      	str	r3, [r4, #20]
 800b90e:	9201      	str	r2, [sp, #4]
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	61a3      	str	r3, [r4, #24]
 800b914:	2b00      	cmp	r3, #0
 800b916:	bf0c      	ite	eq
 800b918:	2201      	moveq	r2, #1
 800b91a:	2202      	movne	r2, #2
 800b91c:	6122      	str	r2, [r4, #16]
 800b91e:	b1a5      	cbz	r5, 800b94a <__d2b+0x92>
 800b920:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b924:	4405      	add	r5, r0
 800b926:	603d      	str	r5, [r7, #0]
 800b928:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b92c:	6030      	str	r0, [r6, #0]
 800b92e:	4620      	mov	r0, r4
 800b930:	b003      	add	sp, #12
 800b932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b936:	6161      	str	r1, [r4, #20]
 800b938:	e7ea      	b.n	800b910 <__d2b+0x58>
 800b93a:	a801      	add	r0, sp, #4
 800b93c:	f7ff fce9 	bl	800b312 <__lo0bits>
 800b940:	9b01      	ldr	r3, [sp, #4]
 800b942:	6163      	str	r3, [r4, #20]
 800b944:	3020      	adds	r0, #32
 800b946:	2201      	movs	r2, #1
 800b948:	e7e8      	b.n	800b91c <__d2b+0x64>
 800b94a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b94e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b952:	6038      	str	r0, [r7, #0]
 800b954:	6918      	ldr	r0, [r3, #16]
 800b956:	f7ff fcbd 	bl	800b2d4 <__hi0bits>
 800b95a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b95e:	e7e5      	b.n	800b92c <__d2b+0x74>
 800b960:	0800e3ad 	.word	0x0800e3ad
 800b964:	0800e3be 	.word	0x0800e3be

0800b968 <__ratio>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	b085      	sub	sp, #20
 800b96e:	e9cd 1000 	strd	r1, r0, [sp]
 800b972:	a902      	add	r1, sp, #8
 800b974:	f7ff ff56 	bl	800b824 <__b2d>
 800b978:	9800      	ldr	r0, [sp, #0]
 800b97a:	a903      	add	r1, sp, #12
 800b97c:	ec55 4b10 	vmov	r4, r5, d0
 800b980:	f7ff ff50 	bl	800b824 <__b2d>
 800b984:	9b01      	ldr	r3, [sp, #4]
 800b986:	6919      	ldr	r1, [r3, #16]
 800b988:	9b00      	ldr	r3, [sp, #0]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	1ac9      	subs	r1, r1, r3
 800b98e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b992:	1a9b      	subs	r3, r3, r2
 800b994:	ec5b ab10 	vmov	sl, fp, d0
 800b998:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	bfce      	itee	gt
 800b9a0:	462a      	movgt	r2, r5
 800b9a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9a6:	465a      	movle	r2, fp
 800b9a8:	462f      	mov	r7, r5
 800b9aa:	46d9      	mov	r9, fp
 800b9ac:	bfcc      	ite	gt
 800b9ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	4652      	mov	r2, sl
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	4639      	mov	r1, r7
 800b9be:	f7f4 ff4d 	bl	800085c <__aeabi_ddiv>
 800b9c2:	ec41 0b10 	vmov	d0, r0, r1
 800b9c6:	b005      	add	sp, #20
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9cc <__copybits>:
 800b9cc:	3901      	subs	r1, #1
 800b9ce:	b570      	push	{r4, r5, r6, lr}
 800b9d0:	1149      	asrs	r1, r1, #5
 800b9d2:	6914      	ldr	r4, [r2, #16]
 800b9d4:	3101      	adds	r1, #1
 800b9d6:	f102 0314 	add.w	r3, r2, #20
 800b9da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b9e2:	1f05      	subs	r5, r0, #4
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	d30c      	bcc.n	800ba02 <__copybits+0x36>
 800b9e8:	1aa3      	subs	r3, r4, r2
 800b9ea:	3b11      	subs	r3, #17
 800b9ec:	f023 0303 	bic.w	r3, r3, #3
 800b9f0:	3211      	adds	r2, #17
 800b9f2:	42a2      	cmp	r2, r4
 800b9f4:	bf88      	it	hi
 800b9f6:	2300      	movhi	r3, #0
 800b9f8:	4418      	add	r0, r3
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4288      	cmp	r0, r1
 800b9fe:	d305      	bcc.n	800ba0c <__copybits+0x40>
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba06:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba0a:	e7eb      	b.n	800b9e4 <__copybits+0x18>
 800ba0c:	f840 3b04 	str.w	r3, [r0], #4
 800ba10:	e7f4      	b.n	800b9fc <__copybits+0x30>

0800ba12 <__any_on>:
 800ba12:	f100 0214 	add.w	r2, r0, #20
 800ba16:	6900      	ldr	r0, [r0, #16]
 800ba18:	114b      	asrs	r3, r1, #5
 800ba1a:	4298      	cmp	r0, r3
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	db11      	blt.n	800ba44 <__any_on+0x32>
 800ba20:	dd0a      	ble.n	800ba38 <__any_on+0x26>
 800ba22:	f011 011f 	ands.w	r1, r1, #31
 800ba26:	d007      	beq.n	800ba38 <__any_on+0x26>
 800ba28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba2c:	fa24 f001 	lsr.w	r0, r4, r1
 800ba30:	fa00 f101 	lsl.w	r1, r0, r1
 800ba34:	428c      	cmp	r4, r1
 800ba36:	d10b      	bne.n	800ba50 <__any_on+0x3e>
 800ba38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d803      	bhi.n	800ba48 <__any_on+0x36>
 800ba40:	2000      	movs	r0, #0
 800ba42:	bd10      	pop	{r4, pc}
 800ba44:	4603      	mov	r3, r0
 800ba46:	e7f7      	b.n	800ba38 <__any_on+0x26>
 800ba48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	d0f5      	beq.n	800ba3c <__any_on+0x2a>
 800ba50:	2001      	movs	r0, #1
 800ba52:	e7f6      	b.n	800ba42 <__any_on+0x30>

0800ba54 <sulp>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	4604      	mov	r4, r0
 800ba58:	460d      	mov	r5, r1
 800ba5a:	ec45 4b10 	vmov	d0, r4, r5
 800ba5e:	4616      	mov	r6, r2
 800ba60:	f7ff feba 	bl	800b7d8 <__ulp>
 800ba64:	ec51 0b10 	vmov	r0, r1, d0
 800ba68:	b17e      	cbz	r6, 800ba8a <sulp+0x36>
 800ba6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	dd09      	ble.n	800ba8a <sulp+0x36>
 800ba76:	051b      	lsls	r3, r3, #20
 800ba78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ba7c:	2400      	movs	r4, #0
 800ba7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ba82:	4622      	mov	r2, r4
 800ba84:	462b      	mov	r3, r5
 800ba86:	f7f4 fdbf 	bl	8000608 <__aeabi_dmul>
 800ba8a:	ec41 0b10 	vmov	d0, r0, r1
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}

0800ba90 <_strtod_l>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	b09f      	sub	sp, #124	@ 0x7c
 800ba96:	460c      	mov	r4, r1
 800ba98:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ba9e:	9005      	str	r0, [sp, #20]
 800baa0:	f04f 0a00 	mov.w	sl, #0
 800baa4:	f04f 0b00 	mov.w	fp, #0
 800baa8:	460a      	mov	r2, r1
 800baaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800baac:	7811      	ldrb	r1, [r2, #0]
 800baae:	292b      	cmp	r1, #43	@ 0x2b
 800bab0:	d04a      	beq.n	800bb48 <_strtod_l+0xb8>
 800bab2:	d838      	bhi.n	800bb26 <_strtod_l+0x96>
 800bab4:	290d      	cmp	r1, #13
 800bab6:	d832      	bhi.n	800bb1e <_strtod_l+0x8e>
 800bab8:	2908      	cmp	r1, #8
 800baba:	d832      	bhi.n	800bb22 <_strtod_l+0x92>
 800babc:	2900      	cmp	r1, #0
 800babe:	d03b      	beq.n	800bb38 <_strtod_l+0xa8>
 800bac0:	2200      	movs	r2, #0
 800bac2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bac4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bac6:	782a      	ldrb	r2, [r5, #0]
 800bac8:	2a30      	cmp	r2, #48	@ 0x30
 800baca:	f040 80b3 	bne.w	800bc34 <_strtod_l+0x1a4>
 800bace:	786a      	ldrb	r2, [r5, #1]
 800bad0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bad4:	2a58      	cmp	r2, #88	@ 0x58
 800bad6:	d16e      	bne.n	800bbb6 <_strtod_l+0x126>
 800bad8:	9302      	str	r3, [sp, #8]
 800bada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	ab1a      	add	r3, sp, #104	@ 0x68
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	4a8e      	ldr	r2, [pc, #568]	@ (800bd1c <_strtod_l+0x28c>)
 800bae4:	9805      	ldr	r0, [sp, #20]
 800bae6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bae8:	a919      	add	r1, sp, #100	@ 0x64
 800baea:	f001 f8ff 	bl	800ccec <__gethex>
 800baee:	f010 060f 	ands.w	r6, r0, #15
 800baf2:	4604      	mov	r4, r0
 800baf4:	d005      	beq.n	800bb02 <_strtod_l+0x72>
 800baf6:	2e06      	cmp	r6, #6
 800baf8:	d128      	bne.n	800bb4c <_strtod_l+0xbc>
 800bafa:	3501      	adds	r5, #1
 800bafc:	2300      	movs	r3, #0
 800bafe:	9519      	str	r5, [sp, #100]	@ 0x64
 800bb00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f040 858e 	bne.w	800c626 <_strtod_l+0xb96>
 800bb0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb0c:	b1cb      	cbz	r3, 800bb42 <_strtod_l+0xb2>
 800bb0e:	4652      	mov	r2, sl
 800bb10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bb14:	ec43 2b10 	vmov	d0, r2, r3
 800bb18:	b01f      	add	sp, #124	@ 0x7c
 800bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1e:	2920      	cmp	r1, #32
 800bb20:	d1ce      	bne.n	800bac0 <_strtod_l+0x30>
 800bb22:	3201      	adds	r2, #1
 800bb24:	e7c1      	b.n	800baaa <_strtod_l+0x1a>
 800bb26:	292d      	cmp	r1, #45	@ 0x2d
 800bb28:	d1ca      	bne.n	800bac0 <_strtod_l+0x30>
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bb2e:	1c51      	adds	r1, r2, #1
 800bb30:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb32:	7852      	ldrb	r2, [r2, #1]
 800bb34:	2a00      	cmp	r2, #0
 800bb36:	d1c5      	bne.n	800bac4 <_strtod_l+0x34>
 800bb38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f040 8570 	bne.w	800c622 <_strtod_l+0xb92>
 800bb42:	4652      	mov	r2, sl
 800bb44:	465b      	mov	r3, fp
 800bb46:	e7e5      	b.n	800bb14 <_strtod_l+0x84>
 800bb48:	2100      	movs	r1, #0
 800bb4a:	e7ef      	b.n	800bb2c <_strtod_l+0x9c>
 800bb4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb4e:	b13a      	cbz	r2, 800bb60 <_strtod_l+0xd0>
 800bb50:	2135      	movs	r1, #53	@ 0x35
 800bb52:	a81c      	add	r0, sp, #112	@ 0x70
 800bb54:	f7ff ff3a 	bl	800b9cc <__copybits>
 800bb58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb5a:	9805      	ldr	r0, [sp, #20]
 800bb5c:	f7ff fb08 	bl	800b170 <_Bfree>
 800bb60:	3e01      	subs	r6, #1
 800bb62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bb64:	2e04      	cmp	r6, #4
 800bb66:	d806      	bhi.n	800bb76 <_strtod_l+0xe6>
 800bb68:	e8df f006 	tbb	[pc, r6]
 800bb6c:	201d0314 	.word	0x201d0314
 800bb70:	14          	.byte	0x14
 800bb71:	00          	.byte	0x00
 800bb72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bb76:	05e1      	lsls	r1, r4, #23
 800bb78:	bf48      	it	mi
 800bb7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bb7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb82:	0d1b      	lsrs	r3, r3, #20
 800bb84:	051b      	lsls	r3, r3, #20
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1bb      	bne.n	800bb02 <_strtod_l+0x72>
 800bb8a:	f7fe fb21 	bl	800a1d0 <__errno>
 800bb8e:	2322      	movs	r3, #34	@ 0x22
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	e7b6      	b.n	800bb02 <_strtod_l+0x72>
 800bb94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bb98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bb9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bba0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bba4:	e7e7      	b.n	800bb76 <_strtod_l+0xe6>
 800bba6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bd24 <_strtod_l+0x294>
 800bbaa:	e7e4      	b.n	800bb76 <_strtod_l+0xe6>
 800bbac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bbb0:	f04f 3aff 	mov.w	sl, #4294967295
 800bbb4:	e7df      	b.n	800bb76 <_strtod_l+0xe6>
 800bbb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	9219      	str	r2, [sp, #100]	@ 0x64
 800bbbc:	785b      	ldrb	r3, [r3, #1]
 800bbbe:	2b30      	cmp	r3, #48	@ 0x30
 800bbc0:	d0f9      	beq.n	800bbb6 <_strtod_l+0x126>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d09d      	beq.n	800bb02 <_strtod_l+0x72>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbcc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bbce:	2300      	movs	r3, #0
 800bbd0:	9308      	str	r3, [sp, #32]
 800bbd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbd4:	461f      	mov	r7, r3
 800bbd6:	220a      	movs	r2, #10
 800bbd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bbda:	7805      	ldrb	r5, [r0, #0]
 800bbdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bbe0:	b2d9      	uxtb	r1, r3
 800bbe2:	2909      	cmp	r1, #9
 800bbe4:	d928      	bls.n	800bc38 <_strtod_l+0x1a8>
 800bbe6:	494e      	ldr	r1, [pc, #312]	@ (800bd20 <_strtod_l+0x290>)
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f000 ffbb 	bl	800cb64 <strncmp>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d032      	beq.n	800bc58 <_strtod_l+0x1c8>
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	462a      	mov	r2, r5
 800bbf6:	4681      	mov	r9, r0
 800bbf8:	463d      	mov	r5, r7
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2a65      	cmp	r2, #101	@ 0x65
 800bbfe:	d001      	beq.n	800bc04 <_strtod_l+0x174>
 800bc00:	2a45      	cmp	r2, #69	@ 0x45
 800bc02:	d114      	bne.n	800bc2e <_strtod_l+0x19e>
 800bc04:	b91d      	cbnz	r5, 800bc0e <_strtod_l+0x17e>
 800bc06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc08:	4302      	orrs	r2, r0
 800bc0a:	d095      	beq.n	800bb38 <_strtod_l+0xa8>
 800bc0c:	2500      	movs	r5, #0
 800bc0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bc10:	1c62      	adds	r2, r4, #1
 800bc12:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc14:	7862      	ldrb	r2, [r4, #1]
 800bc16:	2a2b      	cmp	r2, #43	@ 0x2b
 800bc18:	d077      	beq.n	800bd0a <_strtod_l+0x27a>
 800bc1a:	2a2d      	cmp	r2, #45	@ 0x2d
 800bc1c:	d07b      	beq.n	800bd16 <_strtod_l+0x286>
 800bc1e:	f04f 0c00 	mov.w	ip, #0
 800bc22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bc26:	2909      	cmp	r1, #9
 800bc28:	f240 8082 	bls.w	800bd30 <_strtod_l+0x2a0>
 800bc2c:	9419      	str	r4, [sp, #100]	@ 0x64
 800bc2e:	f04f 0800 	mov.w	r8, #0
 800bc32:	e0a2      	b.n	800bd7a <_strtod_l+0x2ea>
 800bc34:	2300      	movs	r3, #0
 800bc36:	e7c7      	b.n	800bbc8 <_strtod_l+0x138>
 800bc38:	2f08      	cmp	r7, #8
 800bc3a:	bfd5      	itete	le
 800bc3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bc3e:	9908      	ldrgt	r1, [sp, #32]
 800bc40:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc44:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bc48:	f100 0001 	add.w	r0, r0, #1
 800bc4c:	bfd4      	ite	le
 800bc4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bc50:	9308      	strgt	r3, [sp, #32]
 800bc52:	3701      	adds	r7, #1
 800bc54:	9019      	str	r0, [sp, #100]	@ 0x64
 800bc56:	e7bf      	b.n	800bbd8 <_strtod_l+0x148>
 800bc58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc5e:	785a      	ldrb	r2, [r3, #1]
 800bc60:	b37f      	cbz	r7, 800bcc2 <_strtod_l+0x232>
 800bc62:	4681      	mov	r9, r0
 800bc64:	463d      	mov	r5, r7
 800bc66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bc6a:	2b09      	cmp	r3, #9
 800bc6c:	d912      	bls.n	800bc94 <_strtod_l+0x204>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e7c4      	b.n	800bbfc <_strtod_l+0x16c>
 800bc72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc78:	785a      	ldrb	r2, [r3, #1]
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	2a30      	cmp	r2, #48	@ 0x30
 800bc7e:	d0f8      	beq.n	800bc72 <_strtod_l+0x1e2>
 800bc80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bc84:	2b08      	cmp	r3, #8
 800bc86:	f200 84d3 	bhi.w	800c630 <_strtod_l+0xba0>
 800bc8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc8e:	4681      	mov	r9, r0
 800bc90:	2000      	movs	r0, #0
 800bc92:	4605      	mov	r5, r0
 800bc94:	3a30      	subs	r2, #48	@ 0x30
 800bc96:	f100 0301 	add.w	r3, r0, #1
 800bc9a:	d02a      	beq.n	800bcf2 <_strtod_l+0x262>
 800bc9c:	4499      	add	r9, r3
 800bc9e:	eb00 0c05 	add.w	ip, r0, r5
 800bca2:	462b      	mov	r3, r5
 800bca4:	210a      	movs	r1, #10
 800bca6:	4563      	cmp	r3, ip
 800bca8:	d10d      	bne.n	800bcc6 <_strtod_l+0x236>
 800bcaa:	1c69      	adds	r1, r5, #1
 800bcac:	4401      	add	r1, r0
 800bcae:	4428      	add	r0, r5
 800bcb0:	2808      	cmp	r0, #8
 800bcb2:	dc16      	bgt.n	800bce2 <_strtod_l+0x252>
 800bcb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bcb6:	230a      	movs	r3, #10
 800bcb8:	fb03 2300 	mla	r3, r3, r0, r2
 800bcbc:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	e018      	b.n	800bcf4 <_strtod_l+0x264>
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	e7da      	b.n	800bc7c <_strtod_l+0x1ec>
 800bcc6:	2b08      	cmp	r3, #8
 800bcc8:	f103 0301 	add.w	r3, r3, #1
 800bccc:	dc03      	bgt.n	800bcd6 <_strtod_l+0x246>
 800bcce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bcd0:	434e      	muls	r6, r1
 800bcd2:	960a      	str	r6, [sp, #40]	@ 0x28
 800bcd4:	e7e7      	b.n	800bca6 <_strtod_l+0x216>
 800bcd6:	2b10      	cmp	r3, #16
 800bcd8:	bfde      	ittt	le
 800bcda:	9e08      	ldrle	r6, [sp, #32]
 800bcdc:	434e      	mulle	r6, r1
 800bcde:	9608      	strle	r6, [sp, #32]
 800bce0:	e7e1      	b.n	800bca6 <_strtod_l+0x216>
 800bce2:	280f      	cmp	r0, #15
 800bce4:	dceb      	bgt.n	800bcbe <_strtod_l+0x22e>
 800bce6:	9808      	ldr	r0, [sp, #32]
 800bce8:	230a      	movs	r3, #10
 800bcea:	fb03 2300 	mla	r3, r3, r0, r2
 800bcee:	9308      	str	r3, [sp, #32]
 800bcf0:	e7e5      	b.n	800bcbe <_strtod_l+0x22e>
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bcf6:	1c50      	adds	r0, r2, #1
 800bcf8:	9019      	str	r0, [sp, #100]	@ 0x64
 800bcfa:	7852      	ldrb	r2, [r2, #1]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	460d      	mov	r5, r1
 800bd00:	e7b1      	b.n	800bc66 <_strtod_l+0x1d6>
 800bd02:	f04f 0900 	mov.w	r9, #0
 800bd06:	2301      	movs	r3, #1
 800bd08:	e77d      	b.n	800bc06 <_strtod_l+0x176>
 800bd0a:	f04f 0c00 	mov.w	ip, #0
 800bd0e:	1ca2      	adds	r2, r4, #2
 800bd10:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd12:	78a2      	ldrb	r2, [r4, #2]
 800bd14:	e785      	b.n	800bc22 <_strtod_l+0x192>
 800bd16:	f04f 0c01 	mov.w	ip, #1
 800bd1a:	e7f8      	b.n	800bd0e <_strtod_l+0x27e>
 800bd1c:	0800e530 	.word	0x0800e530
 800bd20:	0800e518 	.word	0x0800e518
 800bd24:	7ff00000 	.word	0x7ff00000
 800bd28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd2a:	1c51      	adds	r1, r2, #1
 800bd2c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bd2e:	7852      	ldrb	r2, [r2, #1]
 800bd30:	2a30      	cmp	r2, #48	@ 0x30
 800bd32:	d0f9      	beq.n	800bd28 <_strtod_l+0x298>
 800bd34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bd38:	2908      	cmp	r1, #8
 800bd3a:	f63f af78 	bhi.w	800bc2e <_strtod_l+0x19e>
 800bd3e:	3a30      	subs	r2, #48	@ 0x30
 800bd40:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd44:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bd46:	f04f 080a 	mov.w	r8, #10
 800bd4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd4c:	1c56      	adds	r6, r2, #1
 800bd4e:	9619      	str	r6, [sp, #100]	@ 0x64
 800bd50:	7852      	ldrb	r2, [r2, #1]
 800bd52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bd56:	f1be 0f09 	cmp.w	lr, #9
 800bd5a:	d939      	bls.n	800bdd0 <_strtod_l+0x340>
 800bd5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bd5e:	1a76      	subs	r6, r6, r1
 800bd60:	2e08      	cmp	r6, #8
 800bd62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bd66:	dc03      	bgt.n	800bd70 <_strtod_l+0x2e0>
 800bd68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bd6a:	4588      	cmp	r8, r1
 800bd6c:	bfa8      	it	ge
 800bd6e:	4688      	movge	r8, r1
 800bd70:	f1bc 0f00 	cmp.w	ip, #0
 800bd74:	d001      	beq.n	800bd7a <_strtod_l+0x2ea>
 800bd76:	f1c8 0800 	rsb	r8, r8, #0
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	d14e      	bne.n	800be1c <_strtod_l+0x38c>
 800bd7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd80:	4308      	orrs	r0, r1
 800bd82:	f47f aebe 	bne.w	800bb02 <_strtod_l+0x72>
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f47f aed6 	bne.w	800bb38 <_strtod_l+0xa8>
 800bd8c:	2a69      	cmp	r2, #105	@ 0x69
 800bd8e:	d028      	beq.n	800bde2 <_strtod_l+0x352>
 800bd90:	dc25      	bgt.n	800bdde <_strtod_l+0x34e>
 800bd92:	2a49      	cmp	r2, #73	@ 0x49
 800bd94:	d025      	beq.n	800bde2 <_strtod_l+0x352>
 800bd96:	2a4e      	cmp	r2, #78	@ 0x4e
 800bd98:	f47f aece 	bne.w	800bb38 <_strtod_l+0xa8>
 800bd9c:	499b      	ldr	r1, [pc, #620]	@ (800c00c <_strtod_l+0x57c>)
 800bd9e:	a819      	add	r0, sp, #100	@ 0x64
 800bda0:	f001 f9c6 	bl	800d130 <__match>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f43f aec7 	beq.w	800bb38 <_strtod_l+0xa8>
 800bdaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b28      	cmp	r3, #40	@ 0x28
 800bdb0:	d12e      	bne.n	800be10 <_strtod_l+0x380>
 800bdb2:	4997      	ldr	r1, [pc, #604]	@ (800c010 <_strtod_l+0x580>)
 800bdb4:	aa1c      	add	r2, sp, #112	@ 0x70
 800bdb6:	a819      	add	r0, sp, #100	@ 0x64
 800bdb8:	f001 f9ce 	bl	800d158 <__hexnan>
 800bdbc:	2805      	cmp	r0, #5
 800bdbe:	d127      	bne.n	800be10 <_strtod_l+0x380>
 800bdc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bdc2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bdc6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bdca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bdce:	e698      	b.n	800bb02 <_strtod_l+0x72>
 800bdd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bdd2:	fb08 2101 	mla	r1, r8, r1, r2
 800bdd6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bdda:	920e      	str	r2, [sp, #56]	@ 0x38
 800bddc:	e7b5      	b.n	800bd4a <_strtod_l+0x2ba>
 800bdde:	2a6e      	cmp	r2, #110	@ 0x6e
 800bde0:	e7da      	b.n	800bd98 <_strtod_l+0x308>
 800bde2:	498c      	ldr	r1, [pc, #560]	@ (800c014 <_strtod_l+0x584>)
 800bde4:	a819      	add	r0, sp, #100	@ 0x64
 800bde6:	f001 f9a3 	bl	800d130 <__match>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	f43f aea4 	beq.w	800bb38 <_strtod_l+0xa8>
 800bdf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdf2:	4989      	ldr	r1, [pc, #548]	@ (800c018 <_strtod_l+0x588>)
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	a819      	add	r0, sp, #100	@ 0x64
 800bdf8:	9319      	str	r3, [sp, #100]	@ 0x64
 800bdfa:	f001 f999 	bl	800d130 <__match>
 800bdfe:	b910      	cbnz	r0, 800be06 <_strtod_l+0x376>
 800be00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be02:	3301      	adds	r3, #1
 800be04:	9319      	str	r3, [sp, #100]	@ 0x64
 800be06:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c028 <_strtod_l+0x598>
 800be0a:	f04f 0a00 	mov.w	sl, #0
 800be0e:	e678      	b.n	800bb02 <_strtod_l+0x72>
 800be10:	4882      	ldr	r0, [pc, #520]	@ (800c01c <_strtod_l+0x58c>)
 800be12:	f000 fec9 	bl	800cba8 <nan>
 800be16:	ec5b ab10 	vmov	sl, fp, d0
 800be1a:	e672      	b.n	800bb02 <_strtod_l+0x72>
 800be1c:	eba8 0309 	sub.w	r3, r8, r9
 800be20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be22:	9309      	str	r3, [sp, #36]	@ 0x24
 800be24:	2f00      	cmp	r7, #0
 800be26:	bf08      	it	eq
 800be28:	462f      	moveq	r7, r5
 800be2a:	2d10      	cmp	r5, #16
 800be2c:	462c      	mov	r4, r5
 800be2e:	bfa8      	it	ge
 800be30:	2410      	movge	r4, #16
 800be32:	f7f4 fb6f 	bl	8000514 <__aeabi_ui2d>
 800be36:	2d09      	cmp	r5, #9
 800be38:	4682      	mov	sl, r0
 800be3a:	468b      	mov	fp, r1
 800be3c:	dc13      	bgt.n	800be66 <_strtod_l+0x3d6>
 800be3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be40:	2b00      	cmp	r3, #0
 800be42:	f43f ae5e 	beq.w	800bb02 <_strtod_l+0x72>
 800be46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be48:	dd78      	ble.n	800bf3c <_strtod_l+0x4ac>
 800be4a:	2b16      	cmp	r3, #22
 800be4c:	dc5f      	bgt.n	800bf0e <_strtod_l+0x47e>
 800be4e:	4974      	ldr	r1, [pc, #464]	@ (800c020 <_strtod_l+0x590>)
 800be50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be58:	4652      	mov	r2, sl
 800be5a:	465b      	mov	r3, fp
 800be5c:	f7f4 fbd4 	bl	8000608 <__aeabi_dmul>
 800be60:	4682      	mov	sl, r0
 800be62:	468b      	mov	fp, r1
 800be64:	e64d      	b.n	800bb02 <_strtod_l+0x72>
 800be66:	4b6e      	ldr	r3, [pc, #440]	@ (800c020 <_strtod_l+0x590>)
 800be68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800be70:	f7f4 fbca 	bl	8000608 <__aeabi_dmul>
 800be74:	4682      	mov	sl, r0
 800be76:	9808      	ldr	r0, [sp, #32]
 800be78:	468b      	mov	fp, r1
 800be7a:	f7f4 fb4b 	bl	8000514 <__aeabi_ui2d>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	4650      	mov	r0, sl
 800be84:	4659      	mov	r1, fp
 800be86:	f7f4 fa09 	bl	800029c <__adddf3>
 800be8a:	2d0f      	cmp	r5, #15
 800be8c:	4682      	mov	sl, r0
 800be8e:	468b      	mov	fp, r1
 800be90:	ddd5      	ble.n	800be3e <_strtod_l+0x3ae>
 800be92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be94:	1b2c      	subs	r4, r5, r4
 800be96:	441c      	add	r4, r3
 800be98:	2c00      	cmp	r4, #0
 800be9a:	f340 8096 	ble.w	800bfca <_strtod_l+0x53a>
 800be9e:	f014 030f 	ands.w	r3, r4, #15
 800bea2:	d00a      	beq.n	800beba <_strtod_l+0x42a>
 800bea4:	495e      	ldr	r1, [pc, #376]	@ (800c020 <_strtod_l+0x590>)
 800bea6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800beaa:	4652      	mov	r2, sl
 800beac:	465b      	mov	r3, fp
 800beae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beb2:	f7f4 fba9 	bl	8000608 <__aeabi_dmul>
 800beb6:	4682      	mov	sl, r0
 800beb8:	468b      	mov	fp, r1
 800beba:	f034 040f 	bics.w	r4, r4, #15
 800bebe:	d073      	beq.n	800bfa8 <_strtod_l+0x518>
 800bec0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bec4:	dd48      	ble.n	800bf58 <_strtod_l+0x4c8>
 800bec6:	2400      	movs	r4, #0
 800bec8:	46a0      	mov	r8, r4
 800beca:	940a      	str	r4, [sp, #40]	@ 0x28
 800becc:	46a1      	mov	r9, r4
 800bece:	9a05      	ldr	r2, [sp, #20]
 800bed0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c028 <_strtod_l+0x598>
 800bed4:	2322      	movs	r3, #34	@ 0x22
 800bed6:	6013      	str	r3, [r2, #0]
 800bed8:	f04f 0a00 	mov.w	sl, #0
 800bedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f43f ae0f 	beq.w	800bb02 <_strtod_l+0x72>
 800bee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bee6:	9805      	ldr	r0, [sp, #20]
 800bee8:	f7ff f942 	bl	800b170 <_Bfree>
 800beec:	9805      	ldr	r0, [sp, #20]
 800beee:	4649      	mov	r1, r9
 800bef0:	f7ff f93e 	bl	800b170 <_Bfree>
 800bef4:	9805      	ldr	r0, [sp, #20]
 800bef6:	4641      	mov	r1, r8
 800bef8:	f7ff f93a 	bl	800b170 <_Bfree>
 800befc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800befe:	9805      	ldr	r0, [sp, #20]
 800bf00:	f7ff f936 	bl	800b170 <_Bfree>
 800bf04:	9805      	ldr	r0, [sp, #20]
 800bf06:	4621      	mov	r1, r4
 800bf08:	f7ff f932 	bl	800b170 <_Bfree>
 800bf0c:	e5f9      	b.n	800bb02 <_strtod_l+0x72>
 800bf0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bf14:	4293      	cmp	r3, r2
 800bf16:	dbbc      	blt.n	800be92 <_strtod_l+0x402>
 800bf18:	4c41      	ldr	r4, [pc, #260]	@ (800c020 <_strtod_l+0x590>)
 800bf1a:	f1c5 050f 	rsb	r5, r5, #15
 800bf1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bf22:	4652      	mov	r2, sl
 800bf24:	465b      	mov	r3, fp
 800bf26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf2a:	f7f4 fb6d 	bl	8000608 <__aeabi_dmul>
 800bf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf30:	1b5d      	subs	r5, r3, r5
 800bf32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bf36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bf3a:	e78f      	b.n	800be5c <_strtod_l+0x3cc>
 800bf3c:	3316      	adds	r3, #22
 800bf3e:	dba8      	blt.n	800be92 <_strtod_l+0x402>
 800bf40:	4b37      	ldr	r3, [pc, #220]	@ (800c020 <_strtod_l+0x590>)
 800bf42:	eba9 0808 	sub.w	r8, r9, r8
 800bf46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bf4a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bf4e:	4650      	mov	r0, sl
 800bf50:	4659      	mov	r1, fp
 800bf52:	f7f4 fc83 	bl	800085c <__aeabi_ddiv>
 800bf56:	e783      	b.n	800be60 <_strtod_l+0x3d0>
 800bf58:	4b32      	ldr	r3, [pc, #200]	@ (800c024 <_strtod_l+0x594>)
 800bf5a:	9308      	str	r3, [sp, #32]
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	1124      	asrs	r4, r4, #4
 800bf60:	4650      	mov	r0, sl
 800bf62:	4659      	mov	r1, fp
 800bf64:	461e      	mov	r6, r3
 800bf66:	2c01      	cmp	r4, #1
 800bf68:	dc21      	bgt.n	800bfae <_strtod_l+0x51e>
 800bf6a:	b10b      	cbz	r3, 800bf70 <_strtod_l+0x4e0>
 800bf6c:	4682      	mov	sl, r0
 800bf6e:	468b      	mov	fp, r1
 800bf70:	492c      	ldr	r1, [pc, #176]	@ (800c024 <_strtod_l+0x594>)
 800bf72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bf76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bf7a:	4652      	mov	r2, sl
 800bf7c:	465b      	mov	r3, fp
 800bf7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf82:	f7f4 fb41 	bl	8000608 <__aeabi_dmul>
 800bf86:	4b28      	ldr	r3, [pc, #160]	@ (800c028 <_strtod_l+0x598>)
 800bf88:	460a      	mov	r2, r1
 800bf8a:	400b      	ands	r3, r1
 800bf8c:	4927      	ldr	r1, [pc, #156]	@ (800c02c <_strtod_l+0x59c>)
 800bf8e:	428b      	cmp	r3, r1
 800bf90:	4682      	mov	sl, r0
 800bf92:	d898      	bhi.n	800bec6 <_strtod_l+0x436>
 800bf94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bf98:	428b      	cmp	r3, r1
 800bf9a:	bf86      	itte	hi
 800bf9c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c030 <_strtod_l+0x5a0>
 800bfa0:	f04f 3aff 	movhi.w	sl, #4294967295
 800bfa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9308      	str	r3, [sp, #32]
 800bfac:	e07a      	b.n	800c0a4 <_strtod_l+0x614>
 800bfae:	07e2      	lsls	r2, r4, #31
 800bfb0:	d505      	bpl.n	800bfbe <_strtod_l+0x52e>
 800bfb2:	9b08      	ldr	r3, [sp, #32]
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f7f4 fb26 	bl	8000608 <__aeabi_dmul>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	9a08      	ldr	r2, [sp, #32]
 800bfc0:	3208      	adds	r2, #8
 800bfc2:	3601      	adds	r6, #1
 800bfc4:	1064      	asrs	r4, r4, #1
 800bfc6:	9208      	str	r2, [sp, #32]
 800bfc8:	e7cd      	b.n	800bf66 <_strtod_l+0x4d6>
 800bfca:	d0ed      	beq.n	800bfa8 <_strtod_l+0x518>
 800bfcc:	4264      	negs	r4, r4
 800bfce:	f014 020f 	ands.w	r2, r4, #15
 800bfd2:	d00a      	beq.n	800bfea <_strtod_l+0x55a>
 800bfd4:	4b12      	ldr	r3, [pc, #72]	@ (800c020 <_strtod_l+0x590>)
 800bfd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfda:	4650      	mov	r0, sl
 800bfdc:	4659      	mov	r1, fp
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 fc3b 	bl	800085c <__aeabi_ddiv>
 800bfe6:	4682      	mov	sl, r0
 800bfe8:	468b      	mov	fp, r1
 800bfea:	1124      	asrs	r4, r4, #4
 800bfec:	d0dc      	beq.n	800bfa8 <_strtod_l+0x518>
 800bfee:	2c1f      	cmp	r4, #31
 800bff0:	dd20      	ble.n	800c034 <_strtod_l+0x5a4>
 800bff2:	2400      	movs	r4, #0
 800bff4:	46a0      	mov	r8, r4
 800bff6:	940a      	str	r4, [sp, #40]	@ 0x28
 800bff8:	46a1      	mov	r9, r4
 800bffa:	9a05      	ldr	r2, [sp, #20]
 800bffc:	2322      	movs	r3, #34	@ 0x22
 800bffe:	f04f 0a00 	mov.w	sl, #0
 800c002:	f04f 0b00 	mov.w	fp, #0
 800c006:	6013      	str	r3, [r2, #0]
 800c008:	e768      	b.n	800bedc <_strtod_l+0x44c>
 800c00a:	bf00      	nop
 800c00c:	0800e305 	.word	0x0800e305
 800c010:	0800e51c 	.word	0x0800e51c
 800c014:	0800e2fd 	.word	0x0800e2fd
 800c018:	0800e334 	.word	0x0800e334
 800c01c:	0800e6c5 	.word	0x0800e6c5
 800c020:	0800e450 	.word	0x0800e450
 800c024:	0800e428 	.word	0x0800e428
 800c028:	7ff00000 	.word	0x7ff00000
 800c02c:	7ca00000 	.word	0x7ca00000
 800c030:	7fefffff 	.word	0x7fefffff
 800c034:	f014 0310 	ands.w	r3, r4, #16
 800c038:	bf18      	it	ne
 800c03a:	236a      	movne	r3, #106	@ 0x6a
 800c03c:	4ea9      	ldr	r6, [pc, #676]	@ (800c2e4 <_strtod_l+0x854>)
 800c03e:	9308      	str	r3, [sp, #32]
 800c040:	4650      	mov	r0, sl
 800c042:	4659      	mov	r1, fp
 800c044:	2300      	movs	r3, #0
 800c046:	07e2      	lsls	r2, r4, #31
 800c048:	d504      	bpl.n	800c054 <_strtod_l+0x5c4>
 800c04a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c04e:	f7f4 fadb 	bl	8000608 <__aeabi_dmul>
 800c052:	2301      	movs	r3, #1
 800c054:	1064      	asrs	r4, r4, #1
 800c056:	f106 0608 	add.w	r6, r6, #8
 800c05a:	d1f4      	bne.n	800c046 <_strtod_l+0x5b6>
 800c05c:	b10b      	cbz	r3, 800c062 <_strtod_l+0x5d2>
 800c05e:	4682      	mov	sl, r0
 800c060:	468b      	mov	fp, r1
 800c062:	9b08      	ldr	r3, [sp, #32]
 800c064:	b1b3      	cbz	r3, 800c094 <_strtod_l+0x604>
 800c066:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c06a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c06e:	2b00      	cmp	r3, #0
 800c070:	4659      	mov	r1, fp
 800c072:	dd0f      	ble.n	800c094 <_strtod_l+0x604>
 800c074:	2b1f      	cmp	r3, #31
 800c076:	dd55      	ble.n	800c124 <_strtod_l+0x694>
 800c078:	2b34      	cmp	r3, #52	@ 0x34
 800c07a:	bfde      	ittt	le
 800c07c:	f04f 33ff 	movle.w	r3, #4294967295
 800c080:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c084:	4093      	lslle	r3, r2
 800c086:	f04f 0a00 	mov.w	sl, #0
 800c08a:	bfcc      	ite	gt
 800c08c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c090:	ea03 0b01 	andle.w	fp, r3, r1
 800c094:	2200      	movs	r2, #0
 800c096:	2300      	movs	r3, #0
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	f7f4 fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d1a6      	bne.n	800bff2 <_strtod_l+0x562>
 800c0a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c0aa:	9805      	ldr	r0, [sp, #20]
 800c0ac:	462b      	mov	r3, r5
 800c0ae:	463a      	mov	r2, r7
 800c0b0:	f7ff f8c6 	bl	800b240 <__s2b>
 800c0b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f43f af05 	beq.w	800bec6 <_strtod_l+0x436>
 800c0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0be:	2a00      	cmp	r2, #0
 800c0c0:	eba9 0308 	sub.w	r3, r9, r8
 800c0c4:	bfa8      	it	ge
 800c0c6:	2300      	movge	r3, #0
 800c0c8:	9312      	str	r3, [sp, #72]	@ 0x48
 800c0ca:	2400      	movs	r4, #0
 800c0cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c0d0:	9316      	str	r3, [sp, #88]	@ 0x58
 800c0d2:	46a0      	mov	r8, r4
 800c0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0d6:	9805      	ldr	r0, [sp, #20]
 800c0d8:	6859      	ldr	r1, [r3, #4]
 800c0da:	f7ff f809 	bl	800b0f0 <_Balloc>
 800c0de:	4681      	mov	r9, r0
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	f43f aef4 	beq.w	800bece <_strtod_l+0x43e>
 800c0e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0e8:	691a      	ldr	r2, [r3, #16]
 800c0ea:	3202      	adds	r2, #2
 800c0ec:	f103 010c 	add.w	r1, r3, #12
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	300c      	adds	r0, #12
 800c0f4:	f7fe f899 	bl	800a22a <memcpy>
 800c0f8:	ec4b ab10 	vmov	d0, sl, fp
 800c0fc:	9805      	ldr	r0, [sp, #20]
 800c0fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800c100:	a91b      	add	r1, sp, #108	@ 0x6c
 800c102:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c106:	f7ff fbd7 	bl	800b8b8 <__d2b>
 800c10a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c10c:	2800      	cmp	r0, #0
 800c10e:	f43f aede 	beq.w	800bece <_strtod_l+0x43e>
 800c112:	9805      	ldr	r0, [sp, #20]
 800c114:	2101      	movs	r1, #1
 800c116:	f7ff f929 	bl	800b36c <__i2b>
 800c11a:	4680      	mov	r8, r0
 800c11c:	b948      	cbnz	r0, 800c132 <_strtod_l+0x6a2>
 800c11e:	f04f 0800 	mov.w	r8, #0
 800c122:	e6d4      	b.n	800bece <_strtod_l+0x43e>
 800c124:	f04f 32ff 	mov.w	r2, #4294967295
 800c128:	fa02 f303 	lsl.w	r3, r2, r3
 800c12c:	ea03 0a0a 	and.w	sl, r3, sl
 800c130:	e7b0      	b.n	800c094 <_strtod_l+0x604>
 800c132:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c134:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c136:	2d00      	cmp	r5, #0
 800c138:	bfab      	itete	ge
 800c13a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c13c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c13e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c140:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c142:	bfac      	ite	ge
 800c144:	18ef      	addge	r7, r5, r3
 800c146:	1b5e      	sublt	r6, r3, r5
 800c148:	9b08      	ldr	r3, [sp, #32]
 800c14a:	1aed      	subs	r5, r5, r3
 800c14c:	4415      	add	r5, r2
 800c14e:	4b66      	ldr	r3, [pc, #408]	@ (800c2e8 <_strtod_l+0x858>)
 800c150:	3d01      	subs	r5, #1
 800c152:	429d      	cmp	r5, r3
 800c154:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c158:	da50      	bge.n	800c1fc <_strtod_l+0x76c>
 800c15a:	1b5b      	subs	r3, r3, r5
 800c15c:	2b1f      	cmp	r3, #31
 800c15e:	eba2 0203 	sub.w	r2, r2, r3
 800c162:	f04f 0101 	mov.w	r1, #1
 800c166:	dc3d      	bgt.n	800c1e4 <_strtod_l+0x754>
 800c168:	fa01 f303 	lsl.w	r3, r1, r3
 800c16c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c16e:	2300      	movs	r3, #0
 800c170:	9310      	str	r3, [sp, #64]	@ 0x40
 800c172:	18bd      	adds	r5, r7, r2
 800c174:	9b08      	ldr	r3, [sp, #32]
 800c176:	42af      	cmp	r7, r5
 800c178:	4416      	add	r6, r2
 800c17a:	441e      	add	r6, r3
 800c17c:	463b      	mov	r3, r7
 800c17e:	bfa8      	it	ge
 800c180:	462b      	movge	r3, r5
 800c182:	42b3      	cmp	r3, r6
 800c184:	bfa8      	it	ge
 800c186:	4633      	movge	r3, r6
 800c188:	2b00      	cmp	r3, #0
 800c18a:	bfc2      	ittt	gt
 800c18c:	1aed      	subgt	r5, r5, r3
 800c18e:	1af6      	subgt	r6, r6, r3
 800c190:	1aff      	subgt	r7, r7, r3
 800c192:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c194:	2b00      	cmp	r3, #0
 800c196:	dd16      	ble.n	800c1c6 <_strtod_l+0x736>
 800c198:	4641      	mov	r1, r8
 800c19a:	9805      	ldr	r0, [sp, #20]
 800c19c:	461a      	mov	r2, r3
 800c19e:	f7ff f9a5 	bl	800b4ec <__pow5mult>
 800c1a2:	4680      	mov	r8, r0
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d0ba      	beq.n	800c11e <_strtod_l+0x68e>
 800c1a8:	4601      	mov	r1, r0
 800c1aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1ac:	9805      	ldr	r0, [sp, #20]
 800c1ae:	f7ff f8f3 	bl	800b398 <__multiply>
 800c1b2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f43f ae8a 	beq.w	800bece <_strtod_l+0x43e>
 800c1ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1bc:	9805      	ldr	r0, [sp, #20]
 800c1be:	f7fe ffd7 	bl	800b170 <_Bfree>
 800c1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1c6:	2d00      	cmp	r5, #0
 800c1c8:	dc1d      	bgt.n	800c206 <_strtod_l+0x776>
 800c1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	dd23      	ble.n	800c218 <_strtod_l+0x788>
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c1d4:	9805      	ldr	r0, [sp, #20]
 800c1d6:	f7ff f989 	bl	800b4ec <__pow5mult>
 800c1da:	4681      	mov	r9, r0
 800c1dc:	b9e0      	cbnz	r0, 800c218 <_strtod_l+0x788>
 800c1de:	f04f 0900 	mov.w	r9, #0
 800c1e2:	e674      	b.n	800bece <_strtod_l+0x43e>
 800c1e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c1e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c1ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c1f0:	35e2      	adds	r5, #226	@ 0xe2
 800c1f2:	fa01 f305 	lsl.w	r3, r1, r5
 800c1f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c1f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c1fa:	e7ba      	b.n	800c172 <_strtod_l+0x6e2>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800c200:	2301      	movs	r3, #1
 800c202:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c204:	e7b5      	b.n	800c172 <_strtod_l+0x6e2>
 800c206:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c208:	9805      	ldr	r0, [sp, #20]
 800c20a:	462a      	mov	r2, r5
 800c20c:	f7ff f9c8 	bl	800b5a0 <__lshift>
 800c210:	901a      	str	r0, [sp, #104]	@ 0x68
 800c212:	2800      	cmp	r0, #0
 800c214:	d1d9      	bne.n	800c1ca <_strtod_l+0x73a>
 800c216:	e65a      	b.n	800bece <_strtod_l+0x43e>
 800c218:	2e00      	cmp	r6, #0
 800c21a:	dd07      	ble.n	800c22c <_strtod_l+0x79c>
 800c21c:	4649      	mov	r1, r9
 800c21e:	9805      	ldr	r0, [sp, #20]
 800c220:	4632      	mov	r2, r6
 800c222:	f7ff f9bd 	bl	800b5a0 <__lshift>
 800c226:	4681      	mov	r9, r0
 800c228:	2800      	cmp	r0, #0
 800c22a:	d0d8      	beq.n	800c1de <_strtod_l+0x74e>
 800c22c:	2f00      	cmp	r7, #0
 800c22e:	dd08      	ble.n	800c242 <_strtod_l+0x7b2>
 800c230:	4641      	mov	r1, r8
 800c232:	9805      	ldr	r0, [sp, #20]
 800c234:	463a      	mov	r2, r7
 800c236:	f7ff f9b3 	bl	800b5a0 <__lshift>
 800c23a:	4680      	mov	r8, r0
 800c23c:	2800      	cmp	r0, #0
 800c23e:	f43f ae46 	beq.w	800bece <_strtod_l+0x43e>
 800c242:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c244:	9805      	ldr	r0, [sp, #20]
 800c246:	464a      	mov	r2, r9
 800c248:	f7ff fa32 	bl	800b6b0 <__mdiff>
 800c24c:	4604      	mov	r4, r0
 800c24e:	2800      	cmp	r0, #0
 800c250:	f43f ae3d 	beq.w	800bece <_strtod_l+0x43e>
 800c254:	68c3      	ldr	r3, [r0, #12]
 800c256:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c258:	2300      	movs	r3, #0
 800c25a:	60c3      	str	r3, [r0, #12]
 800c25c:	4641      	mov	r1, r8
 800c25e:	f7ff fa0b 	bl	800b678 <__mcmp>
 800c262:	2800      	cmp	r0, #0
 800c264:	da46      	bge.n	800c2f4 <_strtod_l+0x864>
 800c266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c268:	ea53 030a 	orrs.w	r3, r3, sl
 800c26c:	d16c      	bne.n	800c348 <_strtod_l+0x8b8>
 800c26e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c272:	2b00      	cmp	r3, #0
 800c274:	d168      	bne.n	800c348 <_strtod_l+0x8b8>
 800c276:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c27a:	0d1b      	lsrs	r3, r3, #20
 800c27c:	051b      	lsls	r3, r3, #20
 800c27e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c282:	d961      	bls.n	800c348 <_strtod_l+0x8b8>
 800c284:	6963      	ldr	r3, [r4, #20]
 800c286:	b913      	cbnz	r3, 800c28e <_strtod_l+0x7fe>
 800c288:	6923      	ldr	r3, [r4, #16]
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	dd5c      	ble.n	800c348 <_strtod_l+0x8b8>
 800c28e:	4621      	mov	r1, r4
 800c290:	2201      	movs	r2, #1
 800c292:	9805      	ldr	r0, [sp, #20]
 800c294:	f7ff f984 	bl	800b5a0 <__lshift>
 800c298:	4641      	mov	r1, r8
 800c29a:	4604      	mov	r4, r0
 800c29c:	f7ff f9ec 	bl	800b678 <__mcmp>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	dd51      	ble.n	800c348 <_strtod_l+0x8b8>
 800c2a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2a8:	9a08      	ldr	r2, [sp, #32]
 800c2aa:	0d1b      	lsrs	r3, r3, #20
 800c2ac:	051b      	lsls	r3, r3, #20
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	d06b      	beq.n	800c38a <_strtod_l+0x8fa>
 800c2b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c2b6:	d868      	bhi.n	800c38a <_strtod_l+0x8fa>
 800c2b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c2bc:	f67f ae9d 	bls.w	800bffa <_strtod_l+0x56a>
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ec <_strtod_l+0x85c>)
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	4659      	mov	r1, fp
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f7f4 f99e 	bl	8000608 <__aeabi_dmul>
 800c2cc:	4b08      	ldr	r3, [pc, #32]	@ (800c2f0 <_strtod_l+0x860>)
 800c2ce:	400b      	ands	r3, r1
 800c2d0:	4682      	mov	sl, r0
 800c2d2:	468b      	mov	fp, r1
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f47f ae05 	bne.w	800bee4 <_strtod_l+0x454>
 800c2da:	9a05      	ldr	r2, [sp, #20]
 800c2dc:	2322      	movs	r3, #34	@ 0x22
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	e600      	b.n	800bee4 <_strtod_l+0x454>
 800c2e2:	bf00      	nop
 800c2e4:	0800e548 	.word	0x0800e548
 800c2e8:	fffffc02 	.word	0xfffffc02
 800c2ec:	39500000 	.word	0x39500000
 800c2f0:	7ff00000 	.word	0x7ff00000
 800c2f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c2f8:	d165      	bne.n	800c3c6 <_strtod_l+0x936>
 800c2fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c2fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c300:	b35a      	cbz	r2, 800c35a <_strtod_l+0x8ca>
 800c302:	4a9f      	ldr	r2, [pc, #636]	@ (800c580 <_strtod_l+0xaf0>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d12b      	bne.n	800c360 <_strtod_l+0x8d0>
 800c308:	9b08      	ldr	r3, [sp, #32]
 800c30a:	4651      	mov	r1, sl
 800c30c:	b303      	cbz	r3, 800c350 <_strtod_l+0x8c0>
 800c30e:	4b9d      	ldr	r3, [pc, #628]	@ (800c584 <_strtod_l+0xaf4>)
 800c310:	465a      	mov	r2, fp
 800c312:	4013      	ands	r3, r2
 800c314:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c318:	f04f 32ff 	mov.w	r2, #4294967295
 800c31c:	d81b      	bhi.n	800c356 <_strtod_l+0x8c6>
 800c31e:	0d1b      	lsrs	r3, r3, #20
 800c320:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c324:	fa02 f303 	lsl.w	r3, r2, r3
 800c328:	4299      	cmp	r1, r3
 800c32a:	d119      	bne.n	800c360 <_strtod_l+0x8d0>
 800c32c:	4b96      	ldr	r3, [pc, #600]	@ (800c588 <_strtod_l+0xaf8>)
 800c32e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c330:	429a      	cmp	r2, r3
 800c332:	d102      	bne.n	800c33a <_strtod_l+0x8aa>
 800c334:	3101      	adds	r1, #1
 800c336:	f43f adca 	beq.w	800bece <_strtod_l+0x43e>
 800c33a:	4b92      	ldr	r3, [pc, #584]	@ (800c584 <_strtod_l+0xaf4>)
 800c33c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c33e:	401a      	ands	r2, r3
 800c340:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c344:	f04f 0a00 	mov.w	sl, #0
 800c348:	9b08      	ldr	r3, [sp, #32]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1b8      	bne.n	800c2c0 <_strtod_l+0x830>
 800c34e:	e5c9      	b.n	800bee4 <_strtod_l+0x454>
 800c350:	f04f 33ff 	mov.w	r3, #4294967295
 800c354:	e7e8      	b.n	800c328 <_strtod_l+0x898>
 800c356:	4613      	mov	r3, r2
 800c358:	e7e6      	b.n	800c328 <_strtod_l+0x898>
 800c35a:	ea53 030a 	orrs.w	r3, r3, sl
 800c35e:	d0a1      	beq.n	800c2a4 <_strtod_l+0x814>
 800c360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c362:	b1db      	cbz	r3, 800c39c <_strtod_l+0x90c>
 800c364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c366:	4213      	tst	r3, r2
 800c368:	d0ee      	beq.n	800c348 <_strtod_l+0x8b8>
 800c36a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c36c:	9a08      	ldr	r2, [sp, #32]
 800c36e:	4650      	mov	r0, sl
 800c370:	4659      	mov	r1, fp
 800c372:	b1bb      	cbz	r3, 800c3a4 <_strtod_l+0x914>
 800c374:	f7ff fb6e 	bl	800ba54 <sulp>
 800c378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c37c:	ec53 2b10 	vmov	r2, r3, d0
 800c380:	f7f3 ff8c 	bl	800029c <__adddf3>
 800c384:	4682      	mov	sl, r0
 800c386:	468b      	mov	fp, r1
 800c388:	e7de      	b.n	800c348 <_strtod_l+0x8b8>
 800c38a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c38e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c392:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c396:	f04f 3aff 	mov.w	sl, #4294967295
 800c39a:	e7d5      	b.n	800c348 <_strtod_l+0x8b8>
 800c39c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c39e:	ea13 0f0a 	tst.w	r3, sl
 800c3a2:	e7e1      	b.n	800c368 <_strtod_l+0x8d8>
 800c3a4:	f7ff fb56 	bl	800ba54 <sulp>
 800c3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3ac:	ec53 2b10 	vmov	r2, r3, d0
 800c3b0:	f7f3 ff72 	bl	8000298 <__aeabi_dsub>
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	4682      	mov	sl, r0
 800c3ba:	468b      	mov	fp, r1
 800c3bc:	f7f4 fb8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d0c1      	beq.n	800c348 <_strtod_l+0x8b8>
 800c3c4:	e619      	b.n	800bffa <_strtod_l+0x56a>
 800c3c6:	4641      	mov	r1, r8
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff facd 	bl	800b968 <__ratio>
 800c3ce:	ec57 6b10 	vmov	r6, r7, d0
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 fb90 	bl	8000b00 <__aeabi_dcmple>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d06f      	beq.n	800c4c4 <_strtod_l+0xa34>
 800c3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d17a      	bne.n	800c4e0 <_strtod_l+0xa50>
 800c3ea:	f1ba 0f00 	cmp.w	sl, #0
 800c3ee:	d158      	bne.n	800c4a2 <_strtod_l+0xa12>
 800c3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d15a      	bne.n	800c4b0 <_strtod_l+0xa20>
 800c3fa:	4b64      	ldr	r3, [pc, #400]	@ (800c58c <_strtod_l+0xafc>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4630      	mov	r0, r6
 800c400:	4639      	mov	r1, r7
 800c402:	f7f4 fb73 	bl	8000aec <__aeabi_dcmplt>
 800c406:	2800      	cmp	r0, #0
 800c408:	d159      	bne.n	800c4be <_strtod_l+0xa2e>
 800c40a:	4630      	mov	r0, r6
 800c40c:	4639      	mov	r1, r7
 800c40e:	4b60      	ldr	r3, [pc, #384]	@ (800c590 <_strtod_l+0xb00>)
 800c410:	2200      	movs	r2, #0
 800c412:	f7f4 f8f9 	bl	8000608 <__aeabi_dmul>
 800c416:	4606      	mov	r6, r0
 800c418:	460f      	mov	r7, r1
 800c41a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c41e:	9606      	str	r6, [sp, #24]
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c426:	4d57      	ldr	r5, [pc, #348]	@ (800c584 <_strtod_l+0xaf4>)
 800c428:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c42e:	401d      	ands	r5, r3
 800c430:	4b58      	ldr	r3, [pc, #352]	@ (800c594 <_strtod_l+0xb04>)
 800c432:	429d      	cmp	r5, r3
 800c434:	f040 80b2 	bne.w	800c59c <_strtod_l+0xb0c>
 800c438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c43a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c43e:	ec4b ab10 	vmov	d0, sl, fp
 800c442:	f7ff f9c9 	bl	800b7d8 <__ulp>
 800c446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c44a:	ec51 0b10 	vmov	r0, r1, d0
 800c44e:	f7f4 f8db 	bl	8000608 <__aeabi_dmul>
 800c452:	4652      	mov	r2, sl
 800c454:	465b      	mov	r3, fp
 800c456:	f7f3 ff21 	bl	800029c <__adddf3>
 800c45a:	460b      	mov	r3, r1
 800c45c:	4949      	ldr	r1, [pc, #292]	@ (800c584 <_strtod_l+0xaf4>)
 800c45e:	4a4e      	ldr	r2, [pc, #312]	@ (800c598 <_strtod_l+0xb08>)
 800c460:	4019      	ands	r1, r3
 800c462:	4291      	cmp	r1, r2
 800c464:	4682      	mov	sl, r0
 800c466:	d942      	bls.n	800c4ee <_strtod_l+0xa5e>
 800c468:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c46a:	4b47      	ldr	r3, [pc, #284]	@ (800c588 <_strtod_l+0xaf8>)
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d103      	bne.n	800c478 <_strtod_l+0x9e8>
 800c470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c472:	3301      	adds	r3, #1
 800c474:	f43f ad2b 	beq.w	800bece <_strtod_l+0x43e>
 800c478:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c588 <_strtod_l+0xaf8>
 800c47c:	f04f 3aff 	mov.w	sl, #4294967295
 800c480:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c482:	9805      	ldr	r0, [sp, #20]
 800c484:	f7fe fe74 	bl	800b170 <_Bfree>
 800c488:	9805      	ldr	r0, [sp, #20]
 800c48a:	4649      	mov	r1, r9
 800c48c:	f7fe fe70 	bl	800b170 <_Bfree>
 800c490:	9805      	ldr	r0, [sp, #20]
 800c492:	4641      	mov	r1, r8
 800c494:	f7fe fe6c 	bl	800b170 <_Bfree>
 800c498:	9805      	ldr	r0, [sp, #20]
 800c49a:	4621      	mov	r1, r4
 800c49c:	f7fe fe68 	bl	800b170 <_Bfree>
 800c4a0:	e618      	b.n	800c0d4 <_strtod_l+0x644>
 800c4a2:	f1ba 0f01 	cmp.w	sl, #1
 800c4a6:	d103      	bne.n	800c4b0 <_strtod_l+0xa20>
 800c4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f43f ada5 	beq.w	800bffa <_strtod_l+0x56a>
 800c4b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c560 <_strtod_l+0xad0>
 800c4b4:	4f35      	ldr	r7, [pc, #212]	@ (800c58c <_strtod_l+0xafc>)
 800c4b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4ba:	2600      	movs	r6, #0
 800c4bc:	e7b1      	b.n	800c422 <_strtod_l+0x992>
 800c4be:	4f34      	ldr	r7, [pc, #208]	@ (800c590 <_strtod_l+0xb00>)
 800c4c0:	2600      	movs	r6, #0
 800c4c2:	e7aa      	b.n	800c41a <_strtod_l+0x98a>
 800c4c4:	4b32      	ldr	r3, [pc, #200]	@ (800c590 <_strtod_l+0xb00>)
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f7f4 f89c 	bl	8000608 <__aeabi_dmul>
 800c4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460f      	mov	r7, r1
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d09f      	beq.n	800c41a <_strtod_l+0x98a>
 800c4da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c4de:	e7a0      	b.n	800c422 <_strtod_l+0x992>
 800c4e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c568 <_strtod_l+0xad8>
 800c4e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4e8:	ec57 6b17 	vmov	r6, r7, d7
 800c4ec:	e799      	b.n	800c422 <_strtod_l+0x992>
 800c4ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c4f2:	9b08      	ldr	r3, [sp, #32]
 800c4f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1c1      	bne.n	800c480 <_strtod_l+0x9f0>
 800c4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c500:	0d1b      	lsrs	r3, r3, #20
 800c502:	051b      	lsls	r3, r3, #20
 800c504:	429d      	cmp	r5, r3
 800c506:	d1bb      	bne.n	800c480 <_strtod_l+0x9f0>
 800c508:	4630      	mov	r0, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	f7f4 fbdc 	bl	8000cc8 <__aeabi_d2lz>
 800c510:	f7f4 f84c 	bl	80005ac <__aeabi_l2d>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4630      	mov	r0, r6
 800c51a:	4639      	mov	r1, r7
 800c51c:	f7f3 febc 	bl	8000298 <__aeabi_dsub>
 800c520:	460b      	mov	r3, r1
 800c522:	4602      	mov	r2, r0
 800c524:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c528:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c52e:	ea46 060a 	orr.w	r6, r6, sl
 800c532:	431e      	orrs	r6, r3
 800c534:	d06f      	beq.n	800c616 <_strtod_l+0xb86>
 800c536:	a30e      	add	r3, pc, #56	@ (adr r3, 800c570 <_strtod_l+0xae0>)
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	f7f4 fad6 	bl	8000aec <__aeabi_dcmplt>
 800c540:	2800      	cmp	r0, #0
 800c542:	f47f accf 	bne.w	800bee4 <_strtod_l+0x454>
 800c546:	a30c      	add	r3, pc, #48	@ (adr r3, 800c578 <_strtod_l+0xae8>)
 800c548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c550:	f7f4 faea 	bl	8000b28 <__aeabi_dcmpgt>
 800c554:	2800      	cmp	r0, #0
 800c556:	d093      	beq.n	800c480 <_strtod_l+0x9f0>
 800c558:	e4c4      	b.n	800bee4 <_strtod_l+0x454>
 800c55a:	bf00      	nop
 800c55c:	f3af 8000 	nop.w
 800c560:	00000000 	.word	0x00000000
 800c564:	bff00000 	.word	0xbff00000
 800c568:	00000000 	.word	0x00000000
 800c56c:	3ff00000 	.word	0x3ff00000
 800c570:	94a03595 	.word	0x94a03595
 800c574:	3fdfffff 	.word	0x3fdfffff
 800c578:	35afe535 	.word	0x35afe535
 800c57c:	3fe00000 	.word	0x3fe00000
 800c580:	000fffff 	.word	0x000fffff
 800c584:	7ff00000 	.word	0x7ff00000
 800c588:	7fefffff 	.word	0x7fefffff
 800c58c:	3ff00000 	.word	0x3ff00000
 800c590:	3fe00000 	.word	0x3fe00000
 800c594:	7fe00000 	.word	0x7fe00000
 800c598:	7c9fffff 	.word	0x7c9fffff
 800c59c:	9b08      	ldr	r3, [sp, #32]
 800c59e:	b323      	cbz	r3, 800c5ea <_strtod_l+0xb5a>
 800c5a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c5a4:	d821      	bhi.n	800c5ea <_strtod_l+0xb5a>
 800c5a6:	a328      	add	r3, pc, #160	@ (adr r3, 800c648 <_strtod_l+0xbb8>)
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	f7f4 faa6 	bl	8000b00 <__aeabi_dcmple>
 800c5b4:	b1a0      	cbz	r0, 800c5e0 <_strtod_l+0xb50>
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7f4 fafd 	bl	8000bb8 <__aeabi_d2uiz>
 800c5be:	2801      	cmp	r0, #1
 800c5c0:	bf38      	it	cc
 800c5c2:	2001      	movcc	r0, #1
 800c5c4:	f7f3 ffa6 	bl	8000514 <__aeabi_ui2d>
 800c5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	460f      	mov	r7, r1
 800c5ce:	b9fb      	cbnz	r3, 800c610 <_strtod_l+0xb80>
 800c5d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c5d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c5d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c5dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c5e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c5e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c5e6:	1b5b      	subs	r3, r3, r5
 800c5e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c5ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c5ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c5f2:	f7ff f8f1 	bl	800b7d8 <__ulp>
 800c5f6:	4650      	mov	r0, sl
 800c5f8:	ec53 2b10 	vmov	r2, r3, d0
 800c5fc:	4659      	mov	r1, fp
 800c5fe:	f7f4 f803 	bl	8000608 <__aeabi_dmul>
 800c602:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c606:	f7f3 fe49 	bl	800029c <__adddf3>
 800c60a:	4682      	mov	sl, r0
 800c60c:	468b      	mov	fp, r1
 800c60e:	e770      	b.n	800c4f2 <_strtod_l+0xa62>
 800c610:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c614:	e7e0      	b.n	800c5d8 <_strtod_l+0xb48>
 800c616:	a30e      	add	r3, pc, #56	@ (adr r3, 800c650 <_strtod_l+0xbc0>)
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f7f4 fa66 	bl	8000aec <__aeabi_dcmplt>
 800c620:	e798      	b.n	800c554 <_strtod_l+0xac4>
 800c622:	2300      	movs	r3, #0
 800c624:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c626:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c62a:	6013      	str	r3, [r2, #0]
 800c62c:	f7ff ba6d 	b.w	800bb0a <_strtod_l+0x7a>
 800c630:	2a65      	cmp	r2, #101	@ 0x65
 800c632:	f43f ab66 	beq.w	800bd02 <_strtod_l+0x272>
 800c636:	2a45      	cmp	r2, #69	@ 0x45
 800c638:	f43f ab63 	beq.w	800bd02 <_strtod_l+0x272>
 800c63c:	2301      	movs	r3, #1
 800c63e:	f7ff bb9e 	b.w	800bd7e <_strtod_l+0x2ee>
 800c642:	bf00      	nop
 800c644:	f3af 8000 	nop.w
 800c648:	ffc00000 	.word	0xffc00000
 800c64c:	41dfffff 	.word	0x41dfffff
 800c650:	94a03595 	.word	0x94a03595
 800c654:	3fcfffff 	.word	0x3fcfffff

0800c658 <_strtod_r>:
 800c658:	4b01      	ldr	r3, [pc, #4]	@ (800c660 <_strtod_r+0x8>)
 800c65a:	f7ff ba19 	b.w	800ba90 <_strtod_l>
 800c65e:	bf00      	nop
 800c660:	200000f0 	.word	0x200000f0

0800c664 <_strtol_l.constprop.0>:
 800c664:	2b24      	cmp	r3, #36	@ 0x24
 800c666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c66a:	4686      	mov	lr, r0
 800c66c:	4690      	mov	r8, r2
 800c66e:	d801      	bhi.n	800c674 <_strtol_l.constprop.0+0x10>
 800c670:	2b01      	cmp	r3, #1
 800c672:	d106      	bne.n	800c682 <_strtol_l.constprop.0+0x1e>
 800c674:	f7fd fdac 	bl	800a1d0 <__errno>
 800c678:	2316      	movs	r3, #22
 800c67a:	6003      	str	r3, [r0, #0]
 800c67c:	2000      	movs	r0, #0
 800c67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c682:	4834      	ldr	r0, [pc, #208]	@ (800c754 <_strtol_l.constprop.0+0xf0>)
 800c684:	460d      	mov	r5, r1
 800c686:	462a      	mov	r2, r5
 800c688:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c68c:	5d06      	ldrb	r6, [r0, r4]
 800c68e:	f016 0608 	ands.w	r6, r6, #8
 800c692:	d1f8      	bne.n	800c686 <_strtol_l.constprop.0+0x22>
 800c694:	2c2d      	cmp	r4, #45	@ 0x2d
 800c696:	d12d      	bne.n	800c6f4 <_strtol_l.constprop.0+0x90>
 800c698:	782c      	ldrb	r4, [r5, #0]
 800c69a:	2601      	movs	r6, #1
 800c69c:	1c95      	adds	r5, r2, #2
 800c69e:	f033 0210 	bics.w	r2, r3, #16
 800c6a2:	d109      	bne.n	800c6b8 <_strtol_l.constprop.0+0x54>
 800c6a4:	2c30      	cmp	r4, #48	@ 0x30
 800c6a6:	d12a      	bne.n	800c6fe <_strtol_l.constprop.0+0x9a>
 800c6a8:	782a      	ldrb	r2, [r5, #0]
 800c6aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c6ae:	2a58      	cmp	r2, #88	@ 0x58
 800c6b0:	d125      	bne.n	800c6fe <_strtol_l.constprop.0+0x9a>
 800c6b2:	786c      	ldrb	r4, [r5, #1]
 800c6b4:	2310      	movs	r3, #16
 800c6b6:	3502      	adds	r5, #2
 800c6b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c6bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	fbbc f9f3 	udiv	r9, ip, r3
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c6cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c6d0:	2f09      	cmp	r7, #9
 800c6d2:	d81b      	bhi.n	800c70c <_strtol_l.constprop.0+0xa8>
 800c6d4:	463c      	mov	r4, r7
 800c6d6:	42a3      	cmp	r3, r4
 800c6d8:	dd27      	ble.n	800c72a <_strtol_l.constprop.0+0xc6>
 800c6da:	1c57      	adds	r7, r2, #1
 800c6dc:	d007      	beq.n	800c6ee <_strtol_l.constprop.0+0x8a>
 800c6de:	4581      	cmp	r9, r0
 800c6e0:	d320      	bcc.n	800c724 <_strtol_l.constprop.0+0xc0>
 800c6e2:	d101      	bne.n	800c6e8 <_strtol_l.constprop.0+0x84>
 800c6e4:	45a2      	cmp	sl, r4
 800c6e6:	db1d      	blt.n	800c724 <_strtol_l.constprop.0+0xc0>
 800c6e8:	fb00 4003 	mla	r0, r0, r3, r4
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6f2:	e7eb      	b.n	800c6cc <_strtol_l.constprop.0+0x68>
 800c6f4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c6f6:	bf04      	itt	eq
 800c6f8:	782c      	ldrbeq	r4, [r5, #0]
 800c6fa:	1c95      	addeq	r5, r2, #2
 800c6fc:	e7cf      	b.n	800c69e <_strtol_l.constprop.0+0x3a>
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1da      	bne.n	800c6b8 <_strtol_l.constprop.0+0x54>
 800c702:	2c30      	cmp	r4, #48	@ 0x30
 800c704:	bf0c      	ite	eq
 800c706:	2308      	moveq	r3, #8
 800c708:	230a      	movne	r3, #10
 800c70a:	e7d5      	b.n	800c6b8 <_strtol_l.constprop.0+0x54>
 800c70c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c710:	2f19      	cmp	r7, #25
 800c712:	d801      	bhi.n	800c718 <_strtol_l.constprop.0+0xb4>
 800c714:	3c37      	subs	r4, #55	@ 0x37
 800c716:	e7de      	b.n	800c6d6 <_strtol_l.constprop.0+0x72>
 800c718:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c71c:	2f19      	cmp	r7, #25
 800c71e:	d804      	bhi.n	800c72a <_strtol_l.constprop.0+0xc6>
 800c720:	3c57      	subs	r4, #87	@ 0x57
 800c722:	e7d8      	b.n	800c6d6 <_strtol_l.constprop.0+0x72>
 800c724:	f04f 32ff 	mov.w	r2, #4294967295
 800c728:	e7e1      	b.n	800c6ee <_strtol_l.constprop.0+0x8a>
 800c72a:	1c53      	adds	r3, r2, #1
 800c72c:	d108      	bne.n	800c740 <_strtol_l.constprop.0+0xdc>
 800c72e:	2322      	movs	r3, #34	@ 0x22
 800c730:	f8ce 3000 	str.w	r3, [lr]
 800c734:	4660      	mov	r0, ip
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	d0a0      	beq.n	800c67e <_strtol_l.constprop.0+0x1a>
 800c73c:	1e69      	subs	r1, r5, #1
 800c73e:	e006      	b.n	800c74e <_strtol_l.constprop.0+0xea>
 800c740:	b106      	cbz	r6, 800c744 <_strtol_l.constprop.0+0xe0>
 800c742:	4240      	negs	r0, r0
 800c744:	f1b8 0f00 	cmp.w	r8, #0
 800c748:	d099      	beq.n	800c67e <_strtol_l.constprop.0+0x1a>
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	d1f6      	bne.n	800c73c <_strtol_l.constprop.0+0xd8>
 800c74e:	f8c8 1000 	str.w	r1, [r8]
 800c752:	e794      	b.n	800c67e <_strtol_l.constprop.0+0x1a>
 800c754:	0800e571 	.word	0x0800e571

0800c758 <_strtol_r>:
 800c758:	f7ff bf84 	b.w	800c664 <_strtol_l.constprop.0>

0800c75c <__ssputs_r>:
 800c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	688e      	ldr	r6, [r1, #8]
 800c762:	461f      	mov	r7, r3
 800c764:	42be      	cmp	r6, r7
 800c766:	680b      	ldr	r3, [r1, #0]
 800c768:	4682      	mov	sl, r0
 800c76a:	460c      	mov	r4, r1
 800c76c:	4690      	mov	r8, r2
 800c76e:	d82d      	bhi.n	800c7cc <__ssputs_r+0x70>
 800c770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c778:	d026      	beq.n	800c7c8 <__ssputs_r+0x6c>
 800c77a:	6965      	ldr	r5, [r4, #20]
 800c77c:	6909      	ldr	r1, [r1, #16]
 800c77e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c782:	eba3 0901 	sub.w	r9, r3, r1
 800c786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c78a:	1c7b      	adds	r3, r7, #1
 800c78c:	444b      	add	r3, r9
 800c78e:	106d      	asrs	r5, r5, #1
 800c790:	429d      	cmp	r5, r3
 800c792:	bf38      	it	cc
 800c794:	461d      	movcc	r5, r3
 800c796:	0553      	lsls	r3, r2, #21
 800c798:	d527      	bpl.n	800c7ea <__ssputs_r+0x8e>
 800c79a:	4629      	mov	r1, r5
 800c79c:	f7fe fc1c 	bl	800afd8 <_malloc_r>
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	b360      	cbz	r0, 800c7fe <__ssputs_r+0xa2>
 800c7a4:	6921      	ldr	r1, [r4, #16]
 800c7a6:	464a      	mov	r2, r9
 800c7a8:	f7fd fd3f 	bl	800a22a <memcpy>
 800c7ac:	89a3      	ldrh	r3, [r4, #12]
 800c7ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b6:	81a3      	strh	r3, [r4, #12]
 800c7b8:	6126      	str	r6, [r4, #16]
 800c7ba:	6165      	str	r5, [r4, #20]
 800c7bc:	444e      	add	r6, r9
 800c7be:	eba5 0509 	sub.w	r5, r5, r9
 800c7c2:	6026      	str	r6, [r4, #0]
 800c7c4:	60a5      	str	r5, [r4, #8]
 800c7c6:	463e      	mov	r6, r7
 800c7c8:	42be      	cmp	r6, r7
 800c7ca:	d900      	bls.n	800c7ce <__ssputs_r+0x72>
 800c7cc:	463e      	mov	r6, r7
 800c7ce:	6820      	ldr	r0, [r4, #0]
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4641      	mov	r1, r8
 800c7d4:	f7fd fc8f 	bl	800a0f6 <memmove>
 800c7d8:	68a3      	ldr	r3, [r4, #8]
 800c7da:	1b9b      	subs	r3, r3, r6
 800c7dc:	60a3      	str	r3, [r4, #8]
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	4433      	add	r3, r6
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	f000 fd61 	bl	800d2b2 <_realloc_r>
 800c7f0:	4606      	mov	r6, r0
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d1e0      	bne.n	800c7b8 <__ssputs_r+0x5c>
 800c7f6:	6921      	ldr	r1, [r4, #16]
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	f7fe fb79 	bl	800aef0 <_free_r>
 800c7fe:	230c      	movs	r3, #12
 800c800:	f8ca 3000 	str.w	r3, [sl]
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c80a:	81a3      	strh	r3, [r4, #12]
 800c80c:	f04f 30ff 	mov.w	r0, #4294967295
 800c810:	e7e9      	b.n	800c7e6 <__ssputs_r+0x8a>
	...

0800c814 <_svfiprintf_r>:
 800c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	4698      	mov	r8, r3
 800c81a:	898b      	ldrh	r3, [r1, #12]
 800c81c:	061b      	lsls	r3, r3, #24
 800c81e:	b09d      	sub	sp, #116	@ 0x74
 800c820:	4607      	mov	r7, r0
 800c822:	460d      	mov	r5, r1
 800c824:	4614      	mov	r4, r2
 800c826:	d510      	bpl.n	800c84a <_svfiprintf_r+0x36>
 800c828:	690b      	ldr	r3, [r1, #16]
 800c82a:	b973      	cbnz	r3, 800c84a <_svfiprintf_r+0x36>
 800c82c:	2140      	movs	r1, #64	@ 0x40
 800c82e:	f7fe fbd3 	bl	800afd8 <_malloc_r>
 800c832:	6028      	str	r0, [r5, #0]
 800c834:	6128      	str	r0, [r5, #16]
 800c836:	b930      	cbnz	r0, 800c846 <_svfiprintf_r+0x32>
 800c838:	230c      	movs	r3, #12
 800c83a:	603b      	str	r3, [r7, #0]
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	b01d      	add	sp, #116	@ 0x74
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c846:	2340      	movs	r3, #64	@ 0x40
 800c848:	616b      	str	r3, [r5, #20]
 800c84a:	2300      	movs	r3, #0
 800c84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c84e:	2320      	movs	r3, #32
 800c850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c854:	f8cd 800c 	str.w	r8, [sp, #12]
 800c858:	2330      	movs	r3, #48	@ 0x30
 800c85a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c9f8 <_svfiprintf_r+0x1e4>
 800c85e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c862:	f04f 0901 	mov.w	r9, #1
 800c866:	4623      	mov	r3, r4
 800c868:	469a      	mov	sl, r3
 800c86a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c86e:	b10a      	cbz	r2, 800c874 <_svfiprintf_r+0x60>
 800c870:	2a25      	cmp	r2, #37	@ 0x25
 800c872:	d1f9      	bne.n	800c868 <_svfiprintf_r+0x54>
 800c874:	ebba 0b04 	subs.w	fp, sl, r4
 800c878:	d00b      	beq.n	800c892 <_svfiprintf_r+0x7e>
 800c87a:	465b      	mov	r3, fp
 800c87c:	4622      	mov	r2, r4
 800c87e:	4629      	mov	r1, r5
 800c880:	4638      	mov	r0, r7
 800c882:	f7ff ff6b 	bl	800c75c <__ssputs_r>
 800c886:	3001      	adds	r0, #1
 800c888:	f000 80a7 	beq.w	800c9da <_svfiprintf_r+0x1c6>
 800c88c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c88e:	445a      	add	r2, fp
 800c890:	9209      	str	r2, [sp, #36]	@ 0x24
 800c892:	f89a 3000 	ldrb.w	r3, [sl]
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 809f 	beq.w	800c9da <_svfiprintf_r+0x1c6>
 800c89c:	2300      	movs	r3, #0
 800c89e:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8a6:	f10a 0a01 	add.w	sl, sl, #1
 800c8aa:	9304      	str	r3, [sp, #16]
 800c8ac:	9307      	str	r3, [sp, #28]
 800c8ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8b4:	4654      	mov	r4, sl
 800c8b6:	2205      	movs	r2, #5
 800c8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8bc:	484e      	ldr	r0, [pc, #312]	@ (800c9f8 <_svfiprintf_r+0x1e4>)
 800c8be:	f7f3 fc8f 	bl	80001e0 <memchr>
 800c8c2:	9a04      	ldr	r2, [sp, #16]
 800c8c4:	b9d8      	cbnz	r0, 800c8fe <_svfiprintf_r+0xea>
 800c8c6:	06d0      	lsls	r0, r2, #27
 800c8c8:	bf44      	itt	mi
 800c8ca:	2320      	movmi	r3, #32
 800c8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8d0:	0711      	lsls	r1, r2, #28
 800c8d2:	bf44      	itt	mi
 800c8d4:	232b      	movmi	r3, #43	@ 0x2b
 800c8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8da:	f89a 3000 	ldrb.w	r3, [sl]
 800c8de:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8e0:	d015      	beq.n	800c90e <_svfiprintf_r+0xfa>
 800c8e2:	9a07      	ldr	r2, [sp, #28]
 800c8e4:	4654      	mov	r4, sl
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	f04f 0c0a 	mov.w	ip, #10
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8f2:	3b30      	subs	r3, #48	@ 0x30
 800c8f4:	2b09      	cmp	r3, #9
 800c8f6:	d94b      	bls.n	800c990 <_svfiprintf_r+0x17c>
 800c8f8:	b1b0      	cbz	r0, 800c928 <_svfiprintf_r+0x114>
 800c8fa:	9207      	str	r2, [sp, #28]
 800c8fc:	e014      	b.n	800c928 <_svfiprintf_r+0x114>
 800c8fe:	eba0 0308 	sub.w	r3, r0, r8
 800c902:	fa09 f303 	lsl.w	r3, r9, r3
 800c906:	4313      	orrs	r3, r2
 800c908:	9304      	str	r3, [sp, #16]
 800c90a:	46a2      	mov	sl, r4
 800c90c:	e7d2      	b.n	800c8b4 <_svfiprintf_r+0xa0>
 800c90e:	9b03      	ldr	r3, [sp, #12]
 800c910:	1d19      	adds	r1, r3, #4
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	9103      	str	r1, [sp, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	bfbb      	ittet	lt
 800c91a:	425b      	neglt	r3, r3
 800c91c:	f042 0202 	orrlt.w	r2, r2, #2
 800c920:	9307      	strge	r3, [sp, #28]
 800c922:	9307      	strlt	r3, [sp, #28]
 800c924:	bfb8      	it	lt
 800c926:	9204      	strlt	r2, [sp, #16]
 800c928:	7823      	ldrb	r3, [r4, #0]
 800c92a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c92c:	d10a      	bne.n	800c944 <_svfiprintf_r+0x130>
 800c92e:	7863      	ldrb	r3, [r4, #1]
 800c930:	2b2a      	cmp	r3, #42	@ 0x2a
 800c932:	d132      	bne.n	800c99a <_svfiprintf_r+0x186>
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	1d1a      	adds	r2, r3, #4
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	9203      	str	r2, [sp, #12]
 800c93c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c940:	3402      	adds	r4, #2
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca08 <_svfiprintf_r+0x1f4>
 800c948:	7821      	ldrb	r1, [r4, #0]
 800c94a:	2203      	movs	r2, #3
 800c94c:	4650      	mov	r0, sl
 800c94e:	f7f3 fc47 	bl	80001e0 <memchr>
 800c952:	b138      	cbz	r0, 800c964 <_svfiprintf_r+0x150>
 800c954:	9b04      	ldr	r3, [sp, #16]
 800c956:	eba0 000a 	sub.w	r0, r0, sl
 800c95a:	2240      	movs	r2, #64	@ 0x40
 800c95c:	4082      	lsls	r2, r0
 800c95e:	4313      	orrs	r3, r2
 800c960:	3401      	adds	r4, #1
 800c962:	9304      	str	r3, [sp, #16]
 800c964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c968:	4824      	ldr	r0, [pc, #144]	@ (800c9fc <_svfiprintf_r+0x1e8>)
 800c96a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c96e:	2206      	movs	r2, #6
 800c970:	f7f3 fc36 	bl	80001e0 <memchr>
 800c974:	2800      	cmp	r0, #0
 800c976:	d036      	beq.n	800c9e6 <_svfiprintf_r+0x1d2>
 800c978:	4b21      	ldr	r3, [pc, #132]	@ (800ca00 <_svfiprintf_r+0x1ec>)
 800c97a:	bb1b      	cbnz	r3, 800c9c4 <_svfiprintf_r+0x1b0>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	3307      	adds	r3, #7
 800c980:	f023 0307 	bic.w	r3, r3, #7
 800c984:	3308      	adds	r3, #8
 800c986:	9303      	str	r3, [sp, #12]
 800c988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c98a:	4433      	add	r3, r6
 800c98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c98e:	e76a      	b.n	800c866 <_svfiprintf_r+0x52>
 800c990:	fb0c 3202 	mla	r2, ip, r2, r3
 800c994:	460c      	mov	r4, r1
 800c996:	2001      	movs	r0, #1
 800c998:	e7a8      	b.n	800c8ec <_svfiprintf_r+0xd8>
 800c99a:	2300      	movs	r3, #0
 800c99c:	3401      	adds	r4, #1
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f04f 0c0a 	mov.w	ip, #10
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ac:	3a30      	subs	r2, #48	@ 0x30
 800c9ae:	2a09      	cmp	r2, #9
 800c9b0:	d903      	bls.n	800c9ba <_svfiprintf_r+0x1a6>
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0c6      	beq.n	800c944 <_svfiprintf_r+0x130>
 800c9b6:	9105      	str	r1, [sp, #20]
 800c9b8:	e7c4      	b.n	800c944 <_svfiprintf_r+0x130>
 800c9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9be:	4604      	mov	r4, r0
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e7f0      	b.n	800c9a6 <_svfiprintf_r+0x192>
 800c9c4:	ab03      	add	r3, sp, #12
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	462a      	mov	r2, r5
 800c9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800ca04 <_svfiprintf_r+0x1f0>)
 800c9cc:	a904      	add	r1, sp, #16
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	f7fc fca0 	bl	8009314 <_printf_float>
 800c9d4:	1c42      	adds	r2, r0, #1
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	d1d6      	bne.n	800c988 <_svfiprintf_r+0x174>
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	065b      	lsls	r3, r3, #25
 800c9de:	f53f af2d 	bmi.w	800c83c <_svfiprintf_r+0x28>
 800c9e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9e4:	e72c      	b.n	800c840 <_svfiprintf_r+0x2c>
 800c9e6:	ab03      	add	r3, sp, #12
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	462a      	mov	r2, r5
 800c9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ca04 <_svfiprintf_r+0x1f0>)
 800c9ee:	a904      	add	r1, sp, #16
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7fc ff27 	bl	8009844 <_printf_i>
 800c9f6:	e7ed      	b.n	800c9d4 <_svfiprintf_r+0x1c0>
 800c9f8:	0800e671 	.word	0x0800e671
 800c9fc:	0800e67b 	.word	0x0800e67b
 800ca00:	08009315 	.word	0x08009315
 800ca04:	0800c75d 	.word	0x0800c75d
 800ca08:	0800e677 	.word	0x0800e677

0800ca0c <__sflush_r>:
 800ca0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca14:	0716      	lsls	r6, r2, #28
 800ca16:	4605      	mov	r5, r0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	d454      	bmi.n	800cac6 <__sflush_r+0xba>
 800ca1c:	684b      	ldr	r3, [r1, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	dc02      	bgt.n	800ca28 <__sflush_r+0x1c>
 800ca22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dd48      	ble.n	800caba <__sflush_r+0xae>
 800ca28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	d045      	beq.n	800caba <__sflush_r+0xae>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca34:	682f      	ldr	r7, [r5, #0]
 800ca36:	6a21      	ldr	r1, [r4, #32]
 800ca38:	602b      	str	r3, [r5, #0]
 800ca3a:	d030      	beq.n	800ca9e <__sflush_r+0x92>
 800ca3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	0759      	lsls	r1, r3, #29
 800ca42:	d505      	bpl.n	800ca50 <__sflush_r+0x44>
 800ca44:	6863      	ldr	r3, [r4, #4]
 800ca46:	1ad2      	subs	r2, r2, r3
 800ca48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca4a:	b10b      	cbz	r3, 800ca50 <__sflush_r+0x44>
 800ca4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	2300      	movs	r3, #0
 800ca52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca54:	6a21      	ldr	r1, [r4, #32]
 800ca56:	4628      	mov	r0, r5
 800ca58:	47b0      	blx	r6
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	89a3      	ldrh	r3, [r4, #12]
 800ca5e:	d106      	bne.n	800ca6e <__sflush_r+0x62>
 800ca60:	6829      	ldr	r1, [r5, #0]
 800ca62:	291d      	cmp	r1, #29
 800ca64:	d82b      	bhi.n	800cabe <__sflush_r+0xb2>
 800ca66:	4a2a      	ldr	r2, [pc, #168]	@ (800cb10 <__sflush_r+0x104>)
 800ca68:	410a      	asrs	r2, r1
 800ca6a:	07d6      	lsls	r6, r2, #31
 800ca6c:	d427      	bmi.n	800cabe <__sflush_r+0xb2>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	6062      	str	r2, [r4, #4]
 800ca72:	04d9      	lsls	r1, r3, #19
 800ca74:	6922      	ldr	r2, [r4, #16]
 800ca76:	6022      	str	r2, [r4, #0]
 800ca78:	d504      	bpl.n	800ca84 <__sflush_r+0x78>
 800ca7a:	1c42      	adds	r2, r0, #1
 800ca7c:	d101      	bne.n	800ca82 <__sflush_r+0x76>
 800ca7e:	682b      	ldr	r3, [r5, #0]
 800ca80:	b903      	cbnz	r3, 800ca84 <__sflush_r+0x78>
 800ca82:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca86:	602f      	str	r7, [r5, #0]
 800ca88:	b1b9      	cbz	r1, 800caba <__sflush_r+0xae>
 800ca8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca8e:	4299      	cmp	r1, r3
 800ca90:	d002      	beq.n	800ca98 <__sflush_r+0x8c>
 800ca92:	4628      	mov	r0, r5
 800ca94:	f7fe fa2c 	bl	800aef0 <_free_r>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca9c:	e00d      	b.n	800caba <__sflush_r+0xae>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4628      	mov	r0, r5
 800caa2:	47b0      	blx	r6
 800caa4:	4602      	mov	r2, r0
 800caa6:	1c50      	adds	r0, r2, #1
 800caa8:	d1c9      	bne.n	800ca3e <__sflush_r+0x32>
 800caaa:	682b      	ldr	r3, [r5, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d0c6      	beq.n	800ca3e <__sflush_r+0x32>
 800cab0:	2b1d      	cmp	r3, #29
 800cab2:	d001      	beq.n	800cab8 <__sflush_r+0xac>
 800cab4:	2b16      	cmp	r3, #22
 800cab6:	d11e      	bne.n	800caf6 <__sflush_r+0xea>
 800cab8:	602f      	str	r7, [r5, #0]
 800caba:	2000      	movs	r0, #0
 800cabc:	e022      	b.n	800cb04 <__sflush_r+0xf8>
 800cabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cac2:	b21b      	sxth	r3, r3
 800cac4:	e01b      	b.n	800cafe <__sflush_r+0xf2>
 800cac6:	690f      	ldr	r7, [r1, #16]
 800cac8:	2f00      	cmp	r7, #0
 800caca:	d0f6      	beq.n	800caba <__sflush_r+0xae>
 800cacc:	0793      	lsls	r3, r2, #30
 800cace:	680e      	ldr	r6, [r1, #0]
 800cad0:	bf08      	it	eq
 800cad2:	694b      	ldreq	r3, [r1, #20]
 800cad4:	600f      	str	r7, [r1, #0]
 800cad6:	bf18      	it	ne
 800cad8:	2300      	movne	r3, #0
 800cada:	eba6 0807 	sub.w	r8, r6, r7
 800cade:	608b      	str	r3, [r1, #8]
 800cae0:	f1b8 0f00 	cmp.w	r8, #0
 800cae4:	dde9      	ble.n	800caba <__sflush_r+0xae>
 800cae6:	6a21      	ldr	r1, [r4, #32]
 800cae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800caea:	4643      	mov	r3, r8
 800caec:	463a      	mov	r2, r7
 800caee:	4628      	mov	r0, r5
 800caf0:	47b0      	blx	r6
 800caf2:	2800      	cmp	r0, #0
 800caf4:	dc08      	bgt.n	800cb08 <__sflush_r+0xfc>
 800caf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cafe:	81a3      	strh	r3, [r4, #12]
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295
 800cb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb08:	4407      	add	r7, r0
 800cb0a:	eba8 0800 	sub.w	r8, r8, r0
 800cb0e:	e7e7      	b.n	800cae0 <__sflush_r+0xd4>
 800cb10:	dfbffffe 	.word	0xdfbffffe

0800cb14 <_fflush_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	690b      	ldr	r3, [r1, #16]
 800cb18:	4605      	mov	r5, r0
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	b913      	cbnz	r3, 800cb24 <_fflush_r+0x10>
 800cb1e:	2500      	movs	r5, #0
 800cb20:	4628      	mov	r0, r5
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	b118      	cbz	r0, 800cb2e <_fflush_r+0x1a>
 800cb26:	6a03      	ldr	r3, [r0, #32]
 800cb28:	b90b      	cbnz	r3, 800cb2e <_fflush_r+0x1a>
 800cb2a:	f7fd fa4b 	bl	8009fc4 <__sinit>
 800cb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0f3      	beq.n	800cb1e <_fflush_r+0xa>
 800cb36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb38:	07d0      	lsls	r0, r2, #31
 800cb3a:	d404      	bmi.n	800cb46 <_fflush_r+0x32>
 800cb3c:	0599      	lsls	r1, r3, #22
 800cb3e:	d402      	bmi.n	800cb46 <_fflush_r+0x32>
 800cb40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb42:	f7fd fb70 	bl	800a226 <__retarget_lock_acquire_recursive>
 800cb46:	4628      	mov	r0, r5
 800cb48:	4621      	mov	r1, r4
 800cb4a:	f7ff ff5f 	bl	800ca0c <__sflush_r>
 800cb4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb50:	07da      	lsls	r2, r3, #31
 800cb52:	4605      	mov	r5, r0
 800cb54:	d4e4      	bmi.n	800cb20 <_fflush_r+0xc>
 800cb56:	89a3      	ldrh	r3, [r4, #12]
 800cb58:	059b      	lsls	r3, r3, #22
 800cb5a:	d4e1      	bmi.n	800cb20 <_fflush_r+0xc>
 800cb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb5e:	f7fd fb63 	bl	800a228 <__retarget_lock_release_recursive>
 800cb62:	e7dd      	b.n	800cb20 <_fflush_r+0xc>

0800cb64 <strncmp>:
 800cb64:	b510      	push	{r4, lr}
 800cb66:	b16a      	cbz	r2, 800cb84 <strncmp+0x20>
 800cb68:	3901      	subs	r1, #1
 800cb6a:	1884      	adds	r4, r0, r2
 800cb6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d103      	bne.n	800cb80 <strncmp+0x1c>
 800cb78:	42a0      	cmp	r0, r4
 800cb7a:	d001      	beq.n	800cb80 <strncmp+0x1c>
 800cb7c:	2a00      	cmp	r2, #0
 800cb7e:	d1f5      	bne.n	800cb6c <strncmp+0x8>
 800cb80:	1ad0      	subs	r0, r2, r3
 800cb82:	bd10      	pop	{r4, pc}
 800cb84:	4610      	mov	r0, r2
 800cb86:	e7fc      	b.n	800cb82 <strncmp+0x1e>

0800cb88 <_sbrk_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4d06      	ldr	r5, [pc, #24]	@ (800cba4 <_sbrk_r+0x1c>)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4604      	mov	r4, r0
 800cb90:	4608      	mov	r0, r1
 800cb92:	602b      	str	r3, [r5, #0]
 800cb94:	f7f6 ffa4 	bl	8003ae0 <_sbrk>
 800cb98:	1c43      	adds	r3, r0, #1
 800cb9a:	d102      	bne.n	800cba2 <_sbrk_r+0x1a>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	b103      	cbz	r3, 800cba2 <_sbrk_r+0x1a>
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	20002d54 	.word	0x20002d54

0800cba8 <nan>:
 800cba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cbb0 <nan+0x8>
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	00000000 	.word	0x00000000
 800cbb4:	7ff80000 	.word	0x7ff80000

0800cbb8 <__assert_func>:
 800cbb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbba:	4614      	mov	r4, r2
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	4b09      	ldr	r3, [pc, #36]	@ (800cbe4 <__assert_func+0x2c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	68d8      	ldr	r0, [r3, #12]
 800cbc6:	b954      	cbnz	r4, 800cbde <__assert_func+0x26>
 800cbc8:	4b07      	ldr	r3, [pc, #28]	@ (800cbe8 <__assert_func+0x30>)
 800cbca:	461c      	mov	r4, r3
 800cbcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbd0:	9100      	str	r1, [sp, #0]
 800cbd2:	462b      	mov	r3, r5
 800cbd4:	4905      	ldr	r1, [pc, #20]	@ (800cbec <__assert_func+0x34>)
 800cbd6:	f000 fba7 	bl	800d328 <fiprintf>
 800cbda:	f000 fbb7 	bl	800d34c <abort>
 800cbde:	4b04      	ldr	r3, [pc, #16]	@ (800cbf0 <__assert_func+0x38>)
 800cbe0:	e7f4      	b.n	800cbcc <__assert_func+0x14>
 800cbe2:	bf00      	nop
 800cbe4:	200000a0 	.word	0x200000a0
 800cbe8:	0800e6c5 	.word	0x0800e6c5
 800cbec:	0800e697 	.word	0x0800e697
 800cbf0:	0800e68a 	.word	0x0800e68a

0800cbf4 <_calloc_r>:
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	fba1 5402 	umull	r5, r4, r1, r2
 800cbfa:	b93c      	cbnz	r4, 800cc0c <_calloc_r+0x18>
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	f7fe f9eb 	bl	800afd8 <_malloc_r>
 800cc02:	4606      	mov	r6, r0
 800cc04:	b928      	cbnz	r0, 800cc12 <_calloc_r+0x1e>
 800cc06:	2600      	movs	r6, #0
 800cc08:	4630      	mov	r0, r6
 800cc0a:	bd70      	pop	{r4, r5, r6, pc}
 800cc0c:	220c      	movs	r2, #12
 800cc0e:	6002      	str	r2, [r0, #0]
 800cc10:	e7f9      	b.n	800cc06 <_calloc_r+0x12>
 800cc12:	462a      	mov	r2, r5
 800cc14:	4621      	mov	r1, r4
 800cc16:	f7fd fa88 	bl	800a12a <memset>
 800cc1a:	e7f5      	b.n	800cc08 <_calloc_r+0x14>

0800cc1c <rshift>:
 800cc1c:	6903      	ldr	r3, [r0, #16]
 800cc1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc2a:	f100 0414 	add.w	r4, r0, #20
 800cc2e:	dd45      	ble.n	800ccbc <rshift+0xa0>
 800cc30:	f011 011f 	ands.w	r1, r1, #31
 800cc34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc3c:	d10c      	bne.n	800cc58 <rshift+0x3c>
 800cc3e:	f100 0710 	add.w	r7, r0, #16
 800cc42:	4629      	mov	r1, r5
 800cc44:	42b1      	cmp	r1, r6
 800cc46:	d334      	bcc.n	800ccb2 <rshift+0x96>
 800cc48:	1a9b      	subs	r3, r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	1eea      	subs	r2, r5, #3
 800cc4e:	4296      	cmp	r6, r2
 800cc50:	bf38      	it	cc
 800cc52:	2300      	movcc	r3, #0
 800cc54:	4423      	add	r3, r4
 800cc56:	e015      	b.n	800cc84 <rshift+0x68>
 800cc58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc5c:	f1c1 0820 	rsb	r8, r1, #32
 800cc60:	40cf      	lsrs	r7, r1
 800cc62:	f105 0e04 	add.w	lr, r5, #4
 800cc66:	46a1      	mov	r9, r4
 800cc68:	4576      	cmp	r6, lr
 800cc6a:	46f4      	mov	ip, lr
 800cc6c:	d815      	bhi.n	800cc9a <rshift+0x7e>
 800cc6e:	1a9a      	subs	r2, r3, r2
 800cc70:	0092      	lsls	r2, r2, #2
 800cc72:	3a04      	subs	r2, #4
 800cc74:	3501      	adds	r5, #1
 800cc76:	42ae      	cmp	r6, r5
 800cc78:	bf38      	it	cc
 800cc7a:	2200      	movcc	r2, #0
 800cc7c:	18a3      	adds	r3, r4, r2
 800cc7e:	50a7      	str	r7, [r4, r2]
 800cc80:	b107      	cbz	r7, 800cc84 <rshift+0x68>
 800cc82:	3304      	adds	r3, #4
 800cc84:	1b1a      	subs	r2, r3, r4
 800cc86:	42a3      	cmp	r3, r4
 800cc88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc8c:	bf08      	it	eq
 800cc8e:	2300      	moveq	r3, #0
 800cc90:	6102      	str	r2, [r0, #16]
 800cc92:	bf08      	it	eq
 800cc94:	6143      	streq	r3, [r0, #20]
 800cc96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc9a:	f8dc c000 	ldr.w	ip, [ip]
 800cc9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cca2:	ea4c 0707 	orr.w	r7, ip, r7
 800cca6:	f849 7b04 	str.w	r7, [r9], #4
 800ccaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccae:	40cf      	lsrs	r7, r1
 800ccb0:	e7da      	b.n	800cc68 <rshift+0x4c>
 800ccb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ccb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ccba:	e7c3      	b.n	800cc44 <rshift+0x28>
 800ccbc:	4623      	mov	r3, r4
 800ccbe:	e7e1      	b.n	800cc84 <rshift+0x68>

0800ccc0 <__hexdig_fun>:
 800ccc0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ccc4:	2b09      	cmp	r3, #9
 800ccc6:	d802      	bhi.n	800ccce <__hexdig_fun+0xe>
 800ccc8:	3820      	subs	r0, #32
 800ccca:	b2c0      	uxtb	r0, r0
 800cccc:	4770      	bx	lr
 800ccce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	d801      	bhi.n	800ccda <__hexdig_fun+0x1a>
 800ccd6:	3847      	subs	r0, #71	@ 0x47
 800ccd8:	e7f7      	b.n	800ccca <__hexdig_fun+0xa>
 800ccda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ccde:	2b05      	cmp	r3, #5
 800cce0:	d801      	bhi.n	800cce6 <__hexdig_fun+0x26>
 800cce2:	3827      	subs	r0, #39	@ 0x27
 800cce4:	e7f1      	b.n	800ccca <__hexdig_fun+0xa>
 800cce6:	2000      	movs	r0, #0
 800cce8:	4770      	bx	lr
	...

0800ccec <__gethex>:
 800ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	b085      	sub	sp, #20
 800ccf2:	468a      	mov	sl, r1
 800ccf4:	9302      	str	r3, [sp, #8]
 800ccf6:	680b      	ldr	r3, [r1, #0]
 800ccf8:	9001      	str	r0, [sp, #4]
 800ccfa:	4690      	mov	r8, r2
 800ccfc:	1c9c      	adds	r4, r3, #2
 800ccfe:	46a1      	mov	r9, r4
 800cd00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cd04:	2830      	cmp	r0, #48	@ 0x30
 800cd06:	d0fa      	beq.n	800ccfe <__gethex+0x12>
 800cd08:	eba9 0303 	sub.w	r3, r9, r3
 800cd0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cd10:	f7ff ffd6 	bl	800ccc0 <__hexdig_fun>
 800cd14:	4605      	mov	r5, r0
 800cd16:	2800      	cmp	r0, #0
 800cd18:	d168      	bne.n	800cdec <__gethex+0x100>
 800cd1a:	49a0      	ldr	r1, [pc, #640]	@ (800cf9c <__gethex+0x2b0>)
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	4648      	mov	r0, r9
 800cd20:	f7ff ff20 	bl	800cb64 <strncmp>
 800cd24:	4607      	mov	r7, r0
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d167      	bne.n	800cdfa <__gethex+0x10e>
 800cd2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cd2e:	4626      	mov	r6, r4
 800cd30:	f7ff ffc6 	bl	800ccc0 <__hexdig_fun>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d062      	beq.n	800cdfe <__gethex+0x112>
 800cd38:	4623      	mov	r3, r4
 800cd3a:	7818      	ldrb	r0, [r3, #0]
 800cd3c:	2830      	cmp	r0, #48	@ 0x30
 800cd3e:	4699      	mov	r9, r3
 800cd40:	f103 0301 	add.w	r3, r3, #1
 800cd44:	d0f9      	beq.n	800cd3a <__gethex+0x4e>
 800cd46:	f7ff ffbb 	bl	800ccc0 <__hexdig_fun>
 800cd4a:	fab0 f580 	clz	r5, r0
 800cd4e:	096d      	lsrs	r5, r5, #5
 800cd50:	f04f 0b01 	mov.w	fp, #1
 800cd54:	464a      	mov	r2, r9
 800cd56:	4616      	mov	r6, r2
 800cd58:	3201      	adds	r2, #1
 800cd5a:	7830      	ldrb	r0, [r6, #0]
 800cd5c:	f7ff ffb0 	bl	800ccc0 <__hexdig_fun>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d1f8      	bne.n	800cd56 <__gethex+0x6a>
 800cd64:	498d      	ldr	r1, [pc, #564]	@ (800cf9c <__gethex+0x2b0>)
 800cd66:	2201      	movs	r2, #1
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7ff fefb 	bl	800cb64 <strncmp>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d13f      	bne.n	800cdf2 <__gethex+0x106>
 800cd72:	b944      	cbnz	r4, 800cd86 <__gethex+0x9a>
 800cd74:	1c74      	adds	r4, r6, #1
 800cd76:	4622      	mov	r2, r4
 800cd78:	4616      	mov	r6, r2
 800cd7a:	3201      	adds	r2, #1
 800cd7c:	7830      	ldrb	r0, [r6, #0]
 800cd7e:	f7ff ff9f 	bl	800ccc0 <__hexdig_fun>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d1f8      	bne.n	800cd78 <__gethex+0x8c>
 800cd86:	1ba4      	subs	r4, r4, r6
 800cd88:	00a7      	lsls	r7, r4, #2
 800cd8a:	7833      	ldrb	r3, [r6, #0]
 800cd8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cd90:	2b50      	cmp	r3, #80	@ 0x50
 800cd92:	d13e      	bne.n	800ce12 <__gethex+0x126>
 800cd94:	7873      	ldrb	r3, [r6, #1]
 800cd96:	2b2b      	cmp	r3, #43	@ 0x2b
 800cd98:	d033      	beq.n	800ce02 <__gethex+0x116>
 800cd9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cd9c:	d034      	beq.n	800ce08 <__gethex+0x11c>
 800cd9e:	1c71      	adds	r1, r6, #1
 800cda0:	2400      	movs	r4, #0
 800cda2:	7808      	ldrb	r0, [r1, #0]
 800cda4:	f7ff ff8c 	bl	800ccc0 <__hexdig_fun>
 800cda8:	1e43      	subs	r3, r0, #1
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b18      	cmp	r3, #24
 800cdae:	d830      	bhi.n	800ce12 <__gethex+0x126>
 800cdb0:	f1a0 0210 	sub.w	r2, r0, #16
 800cdb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cdb8:	f7ff ff82 	bl	800ccc0 <__hexdig_fun>
 800cdbc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cdc0:	fa5f fc8c 	uxtb.w	ip, ip
 800cdc4:	f1bc 0f18 	cmp.w	ip, #24
 800cdc8:	f04f 030a 	mov.w	r3, #10
 800cdcc:	d91e      	bls.n	800ce0c <__gethex+0x120>
 800cdce:	b104      	cbz	r4, 800cdd2 <__gethex+0xe6>
 800cdd0:	4252      	negs	r2, r2
 800cdd2:	4417      	add	r7, r2
 800cdd4:	f8ca 1000 	str.w	r1, [sl]
 800cdd8:	b1ed      	cbz	r5, 800ce16 <__gethex+0x12a>
 800cdda:	f1bb 0f00 	cmp.w	fp, #0
 800cdde:	bf0c      	ite	eq
 800cde0:	2506      	moveq	r5, #6
 800cde2:	2500      	movne	r5, #0
 800cde4:	4628      	mov	r0, r5
 800cde6:	b005      	add	sp, #20
 800cde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdec:	2500      	movs	r5, #0
 800cdee:	462c      	mov	r4, r5
 800cdf0:	e7b0      	b.n	800cd54 <__gethex+0x68>
 800cdf2:	2c00      	cmp	r4, #0
 800cdf4:	d1c7      	bne.n	800cd86 <__gethex+0x9a>
 800cdf6:	4627      	mov	r7, r4
 800cdf8:	e7c7      	b.n	800cd8a <__gethex+0x9e>
 800cdfa:	464e      	mov	r6, r9
 800cdfc:	462f      	mov	r7, r5
 800cdfe:	2501      	movs	r5, #1
 800ce00:	e7c3      	b.n	800cd8a <__gethex+0x9e>
 800ce02:	2400      	movs	r4, #0
 800ce04:	1cb1      	adds	r1, r6, #2
 800ce06:	e7cc      	b.n	800cda2 <__gethex+0xb6>
 800ce08:	2401      	movs	r4, #1
 800ce0a:	e7fb      	b.n	800ce04 <__gethex+0x118>
 800ce0c:	fb03 0002 	mla	r0, r3, r2, r0
 800ce10:	e7ce      	b.n	800cdb0 <__gethex+0xc4>
 800ce12:	4631      	mov	r1, r6
 800ce14:	e7de      	b.n	800cdd4 <__gethex+0xe8>
 800ce16:	eba6 0309 	sub.w	r3, r6, r9
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	2b07      	cmp	r3, #7
 800ce20:	dc0a      	bgt.n	800ce38 <__gethex+0x14c>
 800ce22:	9801      	ldr	r0, [sp, #4]
 800ce24:	f7fe f964 	bl	800b0f0 <_Balloc>
 800ce28:	4604      	mov	r4, r0
 800ce2a:	b940      	cbnz	r0, 800ce3e <__gethex+0x152>
 800ce2c:	4b5c      	ldr	r3, [pc, #368]	@ (800cfa0 <__gethex+0x2b4>)
 800ce2e:	4602      	mov	r2, r0
 800ce30:	21e4      	movs	r1, #228	@ 0xe4
 800ce32:	485c      	ldr	r0, [pc, #368]	@ (800cfa4 <__gethex+0x2b8>)
 800ce34:	f7ff fec0 	bl	800cbb8 <__assert_func>
 800ce38:	3101      	adds	r1, #1
 800ce3a:	105b      	asrs	r3, r3, #1
 800ce3c:	e7ef      	b.n	800ce1e <__gethex+0x132>
 800ce3e:	f100 0a14 	add.w	sl, r0, #20
 800ce42:	2300      	movs	r3, #0
 800ce44:	4655      	mov	r5, sl
 800ce46:	469b      	mov	fp, r3
 800ce48:	45b1      	cmp	r9, r6
 800ce4a:	d337      	bcc.n	800cebc <__gethex+0x1d0>
 800ce4c:	f845 bb04 	str.w	fp, [r5], #4
 800ce50:	eba5 050a 	sub.w	r5, r5, sl
 800ce54:	10ad      	asrs	r5, r5, #2
 800ce56:	6125      	str	r5, [r4, #16]
 800ce58:	4658      	mov	r0, fp
 800ce5a:	f7fe fa3b 	bl	800b2d4 <__hi0bits>
 800ce5e:	016d      	lsls	r5, r5, #5
 800ce60:	f8d8 6000 	ldr.w	r6, [r8]
 800ce64:	1a2d      	subs	r5, r5, r0
 800ce66:	42b5      	cmp	r5, r6
 800ce68:	dd54      	ble.n	800cf14 <__gethex+0x228>
 800ce6a:	1bad      	subs	r5, r5, r6
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f7fe fdcf 	bl	800ba12 <__any_on>
 800ce74:	4681      	mov	r9, r0
 800ce76:	b178      	cbz	r0, 800ce98 <__gethex+0x1ac>
 800ce78:	1e6b      	subs	r3, r5, #1
 800ce7a:	1159      	asrs	r1, r3, #5
 800ce7c:	f003 021f 	and.w	r2, r3, #31
 800ce80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ce84:	f04f 0901 	mov.w	r9, #1
 800ce88:	fa09 f202 	lsl.w	r2, r9, r2
 800ce8c:	420a      	tst	r2, r1
 800ce8e:	d003      	beq.n	800ce98 <__gethex+0x1ac>
 800ce90:	454b      	cmp	r3, r9
 800ce92:	dc36      	bgt.n	800cf02 <__gethex+0x216>
 800ce94:	f04f 0902 	mov.w	r9, #2
 800ce98:	4629      	mov	r1, r5
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f7ff febe 	bl	800cc1c <rshift>
 800cea0:	442f      	add	r7, r5
 800cea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cea6:	42bb      	cmp	r3, r7
 800cea8:	da42      	bge.n	800cf30 <__gethex+0x244>
 800ceaa:	9801      	ldr	r0, [sp, #4]
 800ceac:	4621      	mov	r1, r4
 800ceae:	f7fe f95f 	bl	800b170 <_Bfree>
 800ceb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	6013      	str	r3, [r2, #0]
 800ceb8:	25a3      	movs	r5, #163	@ 0xa3
 800ceba:	e793      	b.n	800cde4 <__gethex+0xf8>
 800cebc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cec0:	2a2e      	cmp	r2, #46	@ 0x2e
 800cec2:	d012      	beq.n	800ceea <__gethex+0x1fe>
 800cec4:	2b20      	cmp	r3, #32
 800cec6:	d104      	bne.n	800ced2 <__gethex+0x1e6>
 800cec8:	f845 bb04 	str.w	fp, [r5], #4
 800cecc:	f04f 0b00 	mov.w	fp, #0
 800ced0:	465b      	mov	r3, fp
 800ced2:	7830      	ldrb	r0, [r6, #0]
 800ced4:	9303      	str	r3, [sp, #12]
 800ced6:	f7ff fef3 	bl	800ccc0 <__hexdig_fun>
 800ceda:	9b03      	ldr	r3, [sp, #12]
 800cedc:	f000 000f 	and.w	r0, r0, #15
 800cee0:	4098      	lsls	r0, r3
 800cee2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cee6:	3304      	adds	r3, #4
 800cee8:	e7ae      	b.n	800ce48 <__gethex+0x15c>
 800ceea:	45b1      	cmp	r9, r6
 800ceec:	d8ea      	bhi.n	800cec4 <__gethex+0x1d8>
 800ceee:	492b      	ldr	r1, [pc, #172]	@ (800cf9c <__gethex+0x2b0>)
 800cef0:	9303      	str	r3, [sp, #12]
 800cef2:	2201      	movs	r2, #1
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7ff fe35 	bl	800cb64 <strncmp>
 800cefa:	9b03      	ldr	r3, [sp, #12]
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d1e1      	bne.n	800cec4 <__gethex+0x1d8>
 800cf00:	e7a2      	b.n	800ce48 <__gethex+0x15c>
 800cf02:	1ea9      	subs	r1, r5, #2
 800cf04:	4620      	mov	r0, r4
 800cf06:	f7fe fd84 	bl	800ba12 <__any_on>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d0c2      	beq.n	800ce94 <__gethex+0x1a8>
 800cf0e:	f04f 0903 	mov.w	r9, #3
 800cf12:	e7c1      	b.n	800ce98 <__gethex+0x1ac>
 800cf14:	da09      	bge.n	800cf2a <__gethex+0x23e>
 800cf16:	1b75      	subs	r5, r6, r5
 800cf18:	4621      	mov	r1, r4
 800cf1a:	9801      	ldr	r0, [sp, #4]
 800cf1c:	462a      	mov	r2, r5
 800cf1e:	f7fe fb3f 	bl	800b5a0 <__lshift>
 800cf22:	1b7f      	subs	r7, r7, r5
 800cf24:	4604      	mov	r4, r0
 800cf26:	f100 0a14 	add.w	sl, r0, #20
 800cf2a:	f04f 0900 	mov.w	r9, #0
 800cf2e:	e7b8      	b.n	800cea2 <__gethex+0x1b6>
 800cf30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf34:	42bd      	cmp	r5, r7
 800cf36:	dd6f      	ble.n	800d018 <__gethex+0x32c>
 800cf38:	1bed      	subs	r5, r5, r7
 800cf3a:	42ae      	cmp	r6, r5
 800cf3c:	dc34      	bgt.n	800cfa8 <__gethex+0x2bc>
 800cf3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d022      	beq.n	800cf8c <__gethex+0x2a0>
 800cf46:	2b03      	cmp	r3, #3
 800cf48:	d024      	beq.n	800cf94 <__gethex+0x2a8>
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d115      	bne.n	800cf7a <__gethex+0x28e>
 800cf4e:	42ae      	cmp	r6, r5
 800cf50:	d113      	bne.n	800cf7a <__gethex+0x28e>
 800cf52:	2e01      	cmp	r6, #1
 800cf54:	d10b      	bne.n	800cf6e <__gethex+0x282>
 800cf56:	9a02      	ldr	r2, [sp, #8]
 800cf58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	2301      	movs	r3, #1
 800cf60:	6123      	str	r3, [r4, #16]
 800cf62:	f8ca 3000 	str.w	r3, [sl]
 800cf66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf68:	2562      	movs	r5, #98	@ 0x62
 800cf6a:	601c      	str	r4, [r3, #0]
 800cf6c:	e73a      	b.n	800cde4 <__gethex+0xf8>
 800cf6e:	1e71      	subs	r1, r6, #1
 800cf70:	4620      	mov	r0, r4
 800cf72:	f7fe fd4e 	bl	800ba12 <__any_on>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d1ed      	bne.n	800cf56 <__gethex+0x26a>
 800cf7a:	9801      	ldr	r0, [sp, #4]
 800cf7c:	4621      	mov	r1, r4
 800cf7e:	f7fe f8f7 	bl	800b170 <_Bfree>
 800cf82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf84:	2300      	movs	r3, #0
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	2550      	movs	r5, #80	@ 0x50
 800cf8a:	e72b      	b.n	800cde4 <__gethex+0xf8>
 800cf8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1f3      	bne.n	800cf7a <__gethex+0x28e>
 800cf92:	e7e0      	b.n	800cf56 <__gethex+0x26a>
 800cf94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1dd      	bne.n	800cf56 <__gethex+0x26a>
 800cf9a:	e7ee      	b.n	800cf7a <__gethex+0x28e>
 800cf9c:	0800e518 	.word	0x0800e518
 800cfa0:	0800e3ad 	.word	0x0800e3ad
 800cfa4:	0800e6c6 	.word	0x0800e6c6
 800cfa8:	1e6f      	subs	r7, r5, #1
 800cfaa:	f1b9 0f00 	cmp.w	r9, #0
 800cfae:	d130      	bne.n	800d012 <__gethex+0x326>
 800cfb0:	b127      	cbz	r7, 800cfbc <__gethex+0x2d0>
 800cfb2:	4639      	mov	r1, r7
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f7fe fd2c 	bl	800ba12 <__any_on>
 800cfba:	4681      	mov	r9, r0
 800cfbc:	117a      	asrs	r2, r7, #5
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cfc4:	f007 071f 	and.w	r7, r7, #31
 800cfc8:	40bb      	lsls	r3, r7
 800cfca:	4213      	tst	r3, r2
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4620      	mov	r0, r4
 800cfd0:	bf18      	it	ne
 800cfd2:	f049 0902 	orrne.w	r9, r9, #2
 800cfd6:	f7ff fe21 	bl	800cc1c <rshift>
 800cfda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cfde:	1b76      	subs	r6, r6, r5
 800cfe0:	2502      	movs	r5, #2
 800cfe2:	f1b9 0f00 	cmp.w	r9, #0
 800cfe6:	d047      	beq.n	800d078 <__gethex+0x38c>
 800cfe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d015      	beq.n	800d01c <__gethex+0x330>
 800cff0:	2b03      	cmp	r3, #3
 800cff2:	d017      	beq.n	800d024 <__gethex+0x338>
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d109      	bne.n	800d00c <__gethex+0x320>
 800cff8:	f019 0f02 	tst.w	r9, #2
 800cffc:	d006      	beq.n	800d00c <__gethex+0x320>
 800cffe:	f8da 3000 	ldr.w	r3, [sl]
 800d002:	ea49 0903 	orr.w	r9, r9, r3
 800d006:	f019 0f01 	tst.w	r9, #1
 800d00a:	d10e      	bne.n	800d02a <__gethex+0x33e>
 800d00c:	f045 0510 	orr.w	r5, r5, #16
 800d010:	e032      	b.n	800d078 <__gethex+0x38c>
 800d012:	f04f 0901 	mov.w	r9, #1
 800d016:	e7d1      	b.n	800cfbc <__gethex+0x2d0>
 800d018:	2501      	movs	r5, #1
 800d01a:	e7e2      	b.n	800cfe2 <__gethex+0x2f6>
 800d01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d01e:	f1c3 0301 	rsb	r3, r3, #1
 800d022:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0f0      	beq.n	800d00c <__gethex+0x320>
 800d02a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d02e:	f104 0314 	add.w	r3, r4, #20
 800d032:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d036:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d03a:	f04f 0c00 	mov.w	ip, #0
 800d03e:	4618      	mov	r0, r3
 800d040:	f853 2b04 	ldr.w	r2, [r3], #4
 800d044:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d048:	d01b      	beq.n	800d082 <__gethex+0x396>
 800d04a:	3201      	adds	r2, #1
 800d04c:	6002      	str	r2, [r0, #0]
 800d04e:	2d02      	cmp	r5, #2
 800d050:	f104 0314 	add.w	r3, r4, #20
 800d054:	d13c      	bne.n	800d0d0 <__gethex+0x3e4>
 800d056:	f8d8 2000 	ldr.w	r2, [r8]
 800d05a:	3a01      	subs	r2, #1
 800d05c:	42b2      	cmp	r2, r6
 800d05e:	d109      	bne.n	800d074 <__gethex+0x388>
 800d060:	1171      	asrs	r1, r6, #5
 800d062:	2201      	movs	r2, #1
 800d064:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d068:	f006 061f 	and.w	r6, r6, #31
 800d06c:	fa02 f606 	lsl.w	r6, r2, r6
 800d070:	421e      	tst	r6, r3
 800d072:	d13a      	bne.n	800d0ea <__gethex+0x3fe>
 800d074:	f045 0520 	orr.w	r5, r5, #32
 800d078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d07a:	601c      	str	r4, [r3, #0]
 800d07c:	9b02      	ldr	r3, [sp, #8]
 800d07e:	601f      	str	r7, [r3, #0]
 800d080:	e6b0      	b.n	800cde4 <__gethex+0xf8>
 800d082:	4299      	cmp	r1, r3
 800d084:	f843 cc04 	str.w	ip, [r3, #-4]
 800d088:	d8d9      	bhi.n	800d03e <__gethex+0x352>
 800d08a:	68a3      	ldr	r3, [r4, #8]
 800d08c:	459b      	cmp	fp, r3
 800d08e:	db17      	blt.n	800d0c0 <__gethex+0x3d4>
 800d090:	6861      	ldr	r1, [r4, #4]
 800d092:	9801      	ldr	r0, [sp, #4]
 800d094:	3101      	adds	r1, #1
 800d096:	f7fe f82b 	bl	800b0f0 <_Balloc>
 800d09a:	4681      	mov	r9, r0
 800d09c:	b918      	cbnz	r0, 800d0a6 <__gethex+0x3ba>
 800d09e:	4b1a      	ldr	r3, [pc, #104]	@ (800d108 <__gethex+0x41c>)
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	2184      	movs	r1, #132	@ 0x84
 800d0a4:	e6c5      	b.n	800ce32 <__gethex+0x146>
 800d0a6:	6922      	ldr	r2, [r4, #16]
 800d0a8:	3202      	adds	r2, #2
 800d0aa:	f104 010c 	add.w	r1, r4, #12
 800d0ae:	0092      	lsls	r2, r2, #2
 800d0b0:	300c      	adds	r0, #12
 800d0b2:	f7fd f8ba 	bl	800a22a <memcpy>
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	9801      	ldr	r0, [sp, #4]
 800d0ba:	f7fe f859 	bl	800b170 <_Bfree>
 800d0be:	464c      	mov	r4, r9
 800d0c0:	6923      	ldr	r3, [r4, #16]
 800d0c2:	1c5a      	adds	r2, r3, #1
 800d0c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0c8:	6122      	str	r2, [r4, #16]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	615a      	str	r2, [r3, #20]
 800d0ce:	e7be      	b.n	800d04e <__gethex+0x362>
 800d0d0:	6922      	ldr	r2, [r4, #16]
 800d0d2:	455a      	cmp	r2, fp
 800d0d4:	dd0b      	ble.n	800d0ee <__gethex+0x402>
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f7ff fd9f 	bl	800cc1c <rshift>
 800d0de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0e2:	3701      	adds	r7, #1
 800d0e4:	42bb      	cmp	r3, r7
 800d0e6:	f6ff aee0 	blt.w	800ceaa <__gethex+0x1be>
 800d0ea:	2501      	movs	r5, #1
 800d0ec:	e7c2      	b.n	800d074 <__gethex+0x388>
 800d0ee:	f016 061f 	ands.w	r6, r6, #31
 800d0f2:	d0fa      	beq.n	800d0ea <__gethex+0x3fe>
 800d0f4:	4453      	add	r3, sl
 800d0f6:	f1c6 0620 	rsb	r6, r6, #32
 800d0fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d0fe:	f7fe f8e9 	bl	800b2d4 <__hi0bits>
 800d102:	42b0      	cmp	r0, r6
 800d104:	dbe7      	blt.n	800d0d6 <__gethex+0x3ea>
 800d106:	e7f0      	b.n	800d0ea <__gethex+0x3fe>
 800d108:	0800e3ad 	.word	0x0800e3ad

0800d10c <L_shift>:
 800d10c:	f1c2 0208 	rsb	r2, r2, #8
 800d110:	0092      	lsls	r2, r2, #2
 800d112:	b570      	push	{r4, r5, r6, lr}
 800d114:	f1c2 0620 	rsb	r6, r2, #32
 800d118:	6843      	ldr	r3, [r0, #4]
 800d11a:	6804      	ldr	r4, [r0, #0]
 800d11c:	fa03 f506 	lsl.w	r5, r3, r6
 800d120:	432c      	orrs	r4, r5
 800d122:	40d3      	lsrs	r3, r2
 800d124:	6004      	str	r4, [r0, #0]
 800d126:	f840 3f04 	str.w	r3, [r0, #4]!
 800d12a:	4288      	cmp	r0, r1
 800d12c:	d3f4      	bcc.n	800d118 <L_shift+0xc>
 800d12e:	bd70      	pop	{r4, r5, r6, pc}

0800d130 <__match>:
 800d130:	b530      	push	{r4, r5, lr}
 800d132:	6803      	ldr	r3, [r0, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d13a:	b914      	cbnz	r4, 800d142 <__match+0x12>
 800d13c:	6003      	str	r3, [r0, #0]
 800d13e:	2001      	movs	r0, #1
 800d140:	bd30      	pop	{r4, r5, pc}
 800d142:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d146:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d14a:	2d19      	cmp	r5, #25
 800d14c:	bf98      	it	ls
 800d14e:	3220      	addls	r2, #32
 800d150:	42a2      	cmp	r2, r4
 800d152:	d0f0      	beq.n	800d136 <__match+0x6>
 800d154:	2000      	movs	r0, #0
 800d156:	e7f3      	b.n	800d140 <__match+0x10>

0800d158 <__hexnan>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	680b      	ldr	r3, [r1, #0]
 800d15e:	6801      	ldr	r1, [r0, #0]
 800d160:	115e      	asrs	r6, r3, #5
 800d162:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d166:	f013 031f 	ands.w	r3, r3, #31
 800d16a:	b087      	sub	sp, #28
 800d16c:	bf18      	it	ne
 800d16e:	3604      	addne	r6, #4
 800d170:	2500      	movs	r5, #0
 800d172:	1f37      	subs	r7, r6, #4
 800d174:	4682      	mov	sl, r0
 800d176:	4690      	mov	r8, r2
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d17e:	46b9      	mov	r9, r7
 800d180:	463c      	mov	r4, r7
 800d182:	9502      	str	r5, [sp, #8]
 800d184:	46ab      	mov	fp, r5
 800d186:	784a      	ldrb	r2, [r1, #1]
 800d188:	1c4b      	adds	r3, r1, #1
 800d18a:	9303      	str	r3, [sp, #12]
 800d18c:	b342      	cbz	r2, 800d1e0 <__hexnan+0x88>
 800d18e:	4610      	mov	r0, r2
 800d190:	9105      	str	r1, [sp, #20]
 800d192:	9204      	str	r2, [sp, #16]
 800d194:	f7ff fd94 	bl	800ccc0 <__hexdig_fun>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d151      	bne.n	800d240 <__hexnan+0xe8>
 800d19c:	9a04      	ldr	r2, [sp, #16]
 800d19e:	9905      	ldr	r1, [sp, #20]
 800d1a0:	2a20      	cmp	r2, #32
 800d1a2:	d818      	bhi.n	800d1d6 <__hexnan+0x7e>
 800d1a4:	9b02      	ldr	r3, [sp, #8]
 800d1a6:	459b      	cmp	fp, r3
 800d1a8:	dd13      	ble.n	800d1d2 <__hexnan+0x7a>
 800d1aa:	454c      	cmp	r4, r9
 800d1ac:	d206      	bcs.n	800d1bc <__hexnan+0x64>
 800d1ae:	2d07      	cmp	r5, #7
 800d1b0:	dc04      	bgt.n	800d1bc <__hexnan+0x64>
 800d1b2:	462a      	mov	r2, r5
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f7ff ffa8 	bl	800d10c <L_shift>
 800d1bc:	4544      	cmp	r4, r8
 800d1be:	d952      	bls.n	800d266 <__hexnan+0x10e>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f1a4 0904 	sub.w	r9, r4, #4
 800d1c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1ca:	f8cd b008 	str.w	fp, [sp, #8]
 800d1ce:	464c      	mov	r4, r9
 800d1d0:	461d      	mov	r5, r3
 800d1d2:	9903      	ldr	r1, [sp, #12]
 800d1d4:	e7d7      	b.n	800d186 <__hexnan+0x2e>
 800d1d6:	2a29      	cmp	r2, #41	@ 0x29
 800d1d8:	d157      	bne.n	800d28a <__hexnan+0x132>
 800d1da:	3102      	adds	r1, #2
 800d1dc:	f8ca 1000 	str.w	r1, [sl]
 800d1e0:	f1bb 0f00 	cmp.w	fp, #0
 800d1e4:	d051      	beq.n	800d28a <__hexnan+0x132>
 800d1e6:	454c      	cmp	r4, r9
 800d1e8:	d206      	bcs.n	800d1f8 <__hexnan+0xa0>
 800d1ea:	2d07      	cmp	r5, #7
 800d1ec:	dc04      	bgt.n	800d1f8 <__hexnan+0xa0>
 800d1ee:	462a      	mov	r2, r5
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f7ff ff8a 	bl	800d10c <L_shift>
 800d1f8:	4544      	cmp	r4, r8
 800d1fa:	d936      	bls.n	800d26a <__hexnan+0x112>
 800d1fc:	f1a8 0204 	sub.w	r2, r8, #4
 800d200:	4623      	mov	r3, r4
 800d202:	f853 1b04 	ldr.w	r1, [r3], #4
 800d206:	f842 1f04 	str.w	r1, [r2, #4]!
 800d20a:	429f      	cmp	r7, r3
 800d20c:	d2f9      	bcs.n	800d202 <__hexnan+0xaa>
 800d20e:	1b3b      	subs	r3, r7, r4
 800d210:	f023 0303 	bic.w	r3, r3, #3
 800d214:	3304      	adds	r3, #4
 800d216:	3401      	adds	r4, #1
 800d218:	3e03      	subs	r6, #3
 800d21a:	42b4      	cmp	r4, r6
 800d21c:	bf88      	it	hi
 800d21e:	2304      	movhi	r3, #4
 800d220:	4443      	add	r3, r8
 800d222:	2200      	movs	r2, #0
 800d224:	f843 2b04 	str.w	r2, [r3], #4
 800d228:	429f      	cmp	r7, r3
 800d22a:	d2fb      	bcs.n	800d224 <__hexnan+0xcc>
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	b91b      	cbnz	r3, 800d238 <__hexnan+0xe0>
 800d230:	4547      	cmp	r7, r8
 800d232:	d128      	bne.n	800d286 <__hexnan+0x12e>
 800d234:	2301      	movs	r3, #1
 800d236:	603b      	str	r3, [r7, #0]
 800d238:	2005      	movs	r0, #5
 800d23a:	b007      	add	sp, #28
 800d23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d240:	3501      	adds	r5, #1
 800d242:	2d08      	cmp	r5, #8
 800d244:	f10b 0b01 	add.w	fp, fp, #1
 800d248:	dd06      	ble.n	800d258 <__hexnan+0x100>
 800d24a:	4544      	cmp	r4, r8
 800d24c:	d9c1      	bls.n	800d1d2 <__hexnan+0x7a>
 800d24e:	2300      	movs	r3, #0
 800d250:	f844 3c04 	str.w	r3, [r4, #-4]
 800d254:	2501      	movs	r5, #1
 800d256:	3c04      	subs	r4, #4
 800d258:	6822      	ldr	r2, [r4, #0]
 800d25a:	f000 000f 	and.w	r0, r0, #15
 800d25e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d262:	6020      	str	r0, [r4, #0]
 800d264:	e7b5      	b.n	800d1d2 <__hexnan+0x7a>
 800d266:	2508      	movs	r5, #8
 800d268:	e7b3      	b.n	800d1d2 <__hexnan+0x7a>
 800d26a:	9b01      	ldr	r3, [sp, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0dd      	beq.n	800d22c <__hexnan+0xd4>
 800d270:	f1c3 0320 	rsb	r3, r3, #32
 800d274:	f04f 32ff 	mov.w	r2, #4294967295
 800d278:	40da      	lsrs	r2, r3
 800d27a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d27e:	4013      	ands	r3, r2
 800d280:	f846 3c04 	str.w	r3, [r6, #-4]
 800d284:	e7d2      	b.n	800d22c <__hexnan+0xd4>
 800d286:	3f04      	subs	r7, #4
 800d288:	e7d0      	b.n	800d22c <__hexnan+0xd4>
 800d28a:	2004      	movs	r0, #4
 800d28c:	e7d5      	b.n	800d23a <__hexnan+0xe2>

0800d28e <__ascii_mbtowc>:
 800d28e:	b082      	sub	sp, #8
 800d290:	b901      	cbnz	r1, 800d294 <__ascii_mbtowc+0x6>
 800d292:	a901      	add	r1, sp, #4
 800d294:	b142      	cbz	r2, 800d2a8 <__ascii_mbtowc+0x1a>
 800d296:	b14b      	cbz	r3, 800d2ac <__ascii_mbtowc+0x1e>
 800d298:	7813      	ldrb	r3, [r2, #0]
 800d29a:	600b      	str	r3, [r1, #0]
 800d29c:	7812      	ldrb	r2, [r2, #0]
 800d29e:	1e10      	subs	r0, r2, #0
 800d2a0:	bf18      	it	ne
 800d2a2:	2001      	movne	r0, #1
 800d2a4:	b002      	add	sp, #8
 800d2a6:	4770      	bx	lr
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	e7fb      	b.n	800d2a4 <__ascii_mbtowc+0x16>
 800d2ac:	f06f 0001 	mvn.w	r0, #1
 800d2b0:	e7f8      	b.n	800d2a4 <__ascii_mbtowc+0x16>

0800d2b2 <_realloc_r>:
 800d2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	4615      	mov	r5, r2
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	b921      	cbnz	r1, 800d2c8 <_realloc_r+0x16>
 800d2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	f7fd be88 	b.w	800afd8 <_malloc_r>
 800d2c8:	b92a      	cbnz	r2, 800d2d6 <_realloc_r+0x24>
 800d2ca:	f7fd fe11 	bl	800aef0 <_free_r>
 800d2ce:	2400      	movs	r4, #0
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d6:	f000 f840 	bl	800d35a <_malloc_usable_size_r>
 800d2da:	4285      	cmp	r5, r0
 800d2dc:	4606      	mov	r6, r0
 800d2de:	d802      	bhi.n	800d2e6 <_realloc_r+0x34>
 800d2e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d2e4:	d8f4      	bhi.n	800d2d0 <_realloc_r+0x1e>
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4640      	mov	r0, r8
 800d2ea:	f7fd fe75 	bl	800afd8 <_malloc_r>
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0ec      	beq.n	800d2ce <_realloc_r+0x1c>
 800d2f4:	42b5      	cmp	r5, r6
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	bf28      	it	cs
 800d2fc:	4632      	movcs	r2, r6
 800d2fe:	f7fc ff94 	bl	800a22a <memcpy>
 800d302:	4621      	mov	r1, r4
 800d304:	4640      	mov	r0, r8
 800d306:	f7fd fdf3 	bl	800aef0 <_free_r>
 800d30a:	463c      	mov	r4, r7
 800d30c:	e7e0      	b.n	800d2d0 <_realloc_r+0x1e>

0800d30e <__ascii_wctomb>:
 800d30e:	4603      	mov	r3, r0
 800d310:	4608      	mov	r0, r1
 800d312:	b141      	cbz	r1, 800d326 <__ascii_wctomb+0x18>
 800d314:	2aff      	cmp	r2, #255	@ 0xff
 800d316:	d904      	bls.n	800d322 <__ascii_wctomb+0x14>
 800d318:	228a      	movs	r2, #138	@ 0x8a
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	4770      	bx	lr
 800d322:	700a      	strb	r2, [r1, #0]
 800d324:	2001      	movs	r0, #1
 800d326:	4770      	bx	lr

0800d328 <fiprintf>:
 800d328:	b40e      	push	{r1, r2, r3}
 800d32a:	b503      	push	{r0, r1, lr}
 800d32c:	4601      	mov	r1, r0
 800d32e:	ab03      	add	r3, sp, #12
 800d330:	4805      	ldr	r0, [pc, #20]	@ (800d348 <fiprintf+0x20>)
 800d332:	f853 2b04 	ldr.w	r2, [r3], #4
 800d336:	6800      	ldr	r0, [r0, #0]
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	f000 f83f 	bl	800d3bc <_vfiprintf_r>
 800d33e:	b002      	add	sp, #8
 800d340:	f85d eb04 	ldr.w	lr, [sp], #4
 800d344:	b003      	add	sp, #12
 800d346:	4770      	bx	lr
 800d348:	200000a0 	.word	0x200000a0

0800d34c <abort>:
 800d34c:	b508      	push	{r3, lr}
 800d34e:	2006      	movs	r0, #6
 800d350:	f000 fa08 	bl	800d764 <raise>
 800d354:	2001      	movs	r0, #1
 800d356:	f7f6 fb4b 	bl	80039f0 <_exit>

0800d35a <_malloc_usable_size_r>:
 800d35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d35e:	1f18      	subs	r0, r3, #4
 800d360:	2b00      	cmp	r3, #0
 800d362:	bfbc      	itt	lt
 800d364:	580b      	ldrlt	r3, [r1, r0]
 800d366:	18c0      	addlt	r0, r0, r3
 800d368:	4770      	bx	lr

0800d36a <__sfputc_r>:
 800d36a:	6893      	ldr	r3, [r2, #8]
 800d36c:	3b01      	subs	r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	b410      	push	{r4}
 800d372:	6093      	str	r3, [r2, #8]
 800d374:	da08      	bge.n	800d388 <__sfputc_r+0x1e>
 800d376:	6994      	ldr	r4, [r2, #24]
 800d378:	42a3      	cmp	r3, r4
 800d37a:	db01      	blt.n	800d380 <__sfputc_r+0x16>
 800d37c:	290a      	cmp	r1, #10
 800d37e:	d103      	bne.n	800d388 <__sfputc_r+0x1e>
 800d380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d384:	f000 b932 	b.w	800d5ec <__swbuf_r>
 800d388:	6813      	ldr	r3, [r2, #0]
 800d38a:	1c58      	adds	r0, r3, #1
 800d38c:	6010      	str	r0, [r2, #0]
 800d38e:	7019      	strb	r1, [r3, #0]
 800d390:	4608      	mov	r0, r1
 800d392:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <__sfputs_r>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	4606      	mov	r6, r0
 800d39c:	460f      	mov	r7, r1
 800d39e:	4614      	mov	r4, r2
 800d3a0:	18d5      	adds	r5, r2, r3
 800d3a2:	42ac      	cmp	r4, r5
 800d3a4:	d101      	bne.n	800d3aa <__sfputs_r+0x12>
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	e007      	b.n	800d3ba <__sfputs_r+0x22>
 800d3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ae:	463a      	mov	r2, r7
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	f7ff ffda 	bl	800d36a <__sfputc_r>
 800d3b6:	1c43      	adds	r3, r0, #1
 800d3b8:	d1f3      	bne.n	800d3a2 <__sfputs_r+0xa>
 800d3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3bc <_vfiprintf_r>:
 800d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c0:	460d      	mov	r5, r1
 800d3c2:	b09d      	sub	sp, #116	@ 0x74
 800d3c4:	4614      	mov	r4, r2
 800d3c6:	4698      	mov	r8, r3
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	b118      	cbz	r0, 800d3d4 <_vfiprintf_r+0x18>
 800d3cc:	6a03      	ldr	r3, [r0, #32]
 800d3ce:	b90b      	cbnz	r3, 800d3d4 <_vfiprintf_r+0x18>
 800d3d0:	f7fc fdf8 	bl	8009fc4 <__sinit>
 800d3d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3d6:	07d9      	lsls	r1, r3, #31
 800d3d8:	d405      	bmi.n	800d3e6 <_vfiprintf_r+0x2a>
 800d3da:	89ab      	ldrh	r3, [r5, #12]
 800d3dc:	059a      	lsls	r2, r3, #22
 800d3de:	d402      	bmi.n	800d3e6 <_vfiprintf_r+0x2a>
 800d3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3e2:	f7fc ff20 	bl	800a226 <__retarget_lock_acquire_recursive>
 800d3e6:	89ab      	ldrh	r3, [r5, #12]
 800d3e8:	071b      	lsls	r3, r3, #28
 800d3ea:	d501      	bpl.n	800d3f0 <_vfiprintf_r+0x34>
 800d3ec:	692b      	ldr	r3, [r5, #16]
 800d3ee:	b99b      	cbnz	r3, 800d418 <_vfiprintf_r+0x5c>
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f000 f938 	bl	800d668 <__swsetup_r>
 800d3f8:	b170      	cbz	r0, 800d418 <_vfiprintf_r+0x5c>
 800d3fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3fc:	07dc      	lsls	r4, r3, #31
 800d3fe:	d504      	bpl.n	800d40a <_vfiprintf_r+0x4e>
 800d400:	f04f 30ff 	mov.w	r0, #4294967295
 800d404:	b01d      	add	sp, #116	@ 0x74
 800d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40a:	89ab      	ldrh	r3, [r5, #12]
 800d40c:	0598      	lsls	r0, r3, #22
 800d40e:	d4f7      	bmi.n	800d400 <_vfiprintf_r+0x44>
 800d410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d412:	f7fc ff09 	bl	800a228 <__retarget_lock_release_recursive>
 800d416:	e7f3      	b.n	800d400 <_vfiprintf_r+0x44>
 800d418:	2300      	movs	r3, #0
 800d41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d41c:	2320      	movs	r3, #32
 800d41e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d422:	f8cd 800c 	str.w	r8, [sp, #12]
 800d426:	2330      	movs	r3, #48	@ 0x30
 800d428:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d5d8 <_vfiprintf_r+0x21c>
 800d42c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d430:	f04f 0901 	mov.w	r9, #1
 800d434:	4623      	mov	r3, r4
 800d436:	469a      	mov	sl, r3
 800d438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d43c:	b10a      	cbz	r2, 800d442 <_vfiprintf_r+0x86>
 800d43e:	2a25      	cmp	r2, #37	@ 0x25
 800d440:	d1f9      	bne.n	800d436 <_vfiprintf_r+0x7a>
 800d442:	ebba 0b04 	subs.w	fp, sl, r4
 800d446:	d00b      	beq.n	800d460 <_vfiprintf_r+0xa4>
 800d448:	465b      	mov	r3, fp
 800d44a:	4622      	mov	r2, r4
 800d44c:	4629      	mov	r1, r5
 800d44e:	4630      	mov	r0, r6
 800d450:	f7ff ffa2 	bl	800d398 <__sfputs_r>
 800d454:	3001      	adds	r0, #1
 800d456:	f000 80a7 	beq.w	800d5a8 <_vfiprintf_r+0x1ec>
 800d45a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d45c:	445a      	add	r2, fp
 800d45e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d460:	f89a 3000 	ldrb.w	r3, [sl]
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 809f 	beq.w	800d5a8 <_vfiprintf_r+0x1ec>
 800d46a:	2300      	movs	r3, #0
 800d46c:	f04f 32ff 	mov.w	r2, #4294967295
 800d470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d474:	f10a 0a01 	add.w	sl, sl, #1
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	9307      	str	r3, [sp, #28]
 800d47c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d480:	931a      	str	r3, [sp, #104]	@ 0x68
 800d482:	4654      	mov	r4, sl
 800d484:	2205      	movs	r2, #5
 800d486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d48a:	4853      	ldr	r0, [pc, #332]	@ (800d5d8 <_vfiprintf_r+0x21c>)
 800d48c:	f7f2 fea8 	bl	80001e0 <memchr>
 800d490:	9a04      	ldr	r2, [sp, #16]
 800d492:	b9d8      	cbnz	r0, 800d4cc <_vfiprintf_r+0x110>
 800d494:	06d1      	lsls	r1, r2, #27
 800d496:	bf44      	itt	mi
 800d498:	2320      	movmi	r3, #32
 800d49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d49e:	0713      	lsls	r3, r2, #28
 800d4a0:	bf44      	itt	mi
 800d4a2:	232b      	movmi	r3, #43	@ 0x2b
 800d4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ae:	d015      	beq.n	800d4dc <_vfiprintf_r+0x120>
 800d4b0:	9a07      	ldr	r2, [sp, #28]
 800d4b2:	4654      	mov	r4, sl
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	f04f 0c0a 	mov.w	ip, #10
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4c0:	3b30      	subs	r3, #48	@ 0x30
 800d4c2:	2b09      	cmp	r3, #9
 800d4c4:	d94b      	bls.n	800d55e <_vfiprintf_r+0x1a2>
 800d4c6:	b1b0      	cbz	r0, 800d4f6 <_vfiprintf_r+0x13a>
 800d4c8:	9207      	str	r2, [sp, #28]
 800d4ca:	e014      	b.n	800d4f6 <_vfiprintf_r+0x13a>
 800d4cc:	eba0 0308 	sub.w	r3, r0, r8
 800d4d0:	fa09 f303 	lsl.w	r3, r9, r3
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	9304      	str	r3, [sp, #16]
 800d4d8:	46a2      	mov	sl, r4
 800d4da:	e7d2      	b.n	800d482 <_vfiprintf_r+0xc6>
 800d4dc:	9b03      	ldr	r3, [sp, #12]
 800d4de:	1d19      	adds	r1, r3, #4
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	9103      	str	r1, [sp, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	bfbb      	ittet	lt
 800d4e8:	425b      	neglt	r3, r3
 800d4ea:	f042 0202 	orrlt.w	r2, r2, #2
 800d4ee:	9307      	strge	r3, [sp, #28]
 800d4f0:	9307      	strlt	r3, [sp, #28]
 800d4f2:	bfb8      	it	lt
 800d4f4:	9204      	strlt	r2, [sp, #16]
 800d4f6:	7823      	ldrb	r3, [r4, #0]
 800d4f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4fa:	d10a      	bne.n	800d512 <_vfiprintf_r+0x156>
 800d4fc:	7863      	ldrb	r3, [r4, #1]
 800d4fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d500:	d132      	bne.n	800d568 <_vfiprintf_r+0x1ac>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	1d1a      	adds	r2, r3, #4
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	9203      	str	r2, [sp, #12]
 800d50a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d50e:	3402      	adds	r4, #2
 800d510:	9305      	str	r3, [sp, #20]
 800d512:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d5e8 <_vfiprintf_r+0x22c>
 800d516:	7821      	ldrb	r1, [r4, #0]
 800d518:	2203      	movs	r2, #3
 800d51a:	4650      	mov	r0, sl
 800d51c:	f7f2 fe60 	bl	80001e0 <memchr>
 800d520:	b138      	cbz	r0, 800d532 <_vfiprintf_r+0x176>
 800d522:	9b04      	ldr	r3, [sp, #16]
 800d524:	eba0 000a 	sub.w	r0, r0, sl
 800d528:	2240      	movs	r2, #64	@ 0x40
 800d52a:	4082      	lsls	r2, r0
 800d52c:	4313      	orrs	r3, r2
 800d52e:	3401      	adds	r4, #1
 800d530:	9304      	str	r3, [sp, #16]
 800d532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d536:	4829      	ldr	r0, [pc, #164]	@ (800d5dc <_vfiprintf_r+0x220>)
 800d538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d53c:	2206      	movs	r2, #6
 800d53e:	f7f2 fe4f 	bl	80001e0 <memchr>
 800d542:	2800      	cmp	r0, #0
 800d544:	d03f      	beq.n	800d5c6 <_vfiprintf_r+0x20a>
 800d546:	4b26      	ldr	r3, [pc, #152]	@ (800d5e0 <_vfiprintf_r+0x224>)
 800d548:	bb1b      	cbnz	r3, 800d592 <_vfiprintf_r+0x1d6>
 800d54a:	9b03      	ldr	r3, [sp, #12]
 800d54c:	3307      	adds	r3, #7
 800d54e:	f023 0307 	bic.w	r3, r3, #7
 800d552:	3308      	adds	r3, #8
 800d554:	9303      	str	r3, [sp, #12]
 800d556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d558:	443b      	add	r3, r7
 800d55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d55c:	e76a      	b.n	800d434 <_vfiprintf_r+0x78>
 800d55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d562:	460c      	mov	r4, r1
 800d564:	2001      	movs	r0, #1
 800d566:	e7a8      	b.n	800d4ba <_vfiprintf_r+0xfe>
 800d568:	2300      	movs	r3, #0
 800d56a:	3401      	adds	r4, #1
 800d56c:	9305      	str	r3, [sp, #20]
 800d56e:	4619      	mov	r1, r3
 800d570:	f04f 0c0a 	mov.w	ip, #10
 800d574:	4620      	mov	r0, r4
 800d576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d57a:	3a30      	subs	r2, #48	@ 0x30
 800d57c:	2a09      	cmp	r2, #9
 800d57e:	d903      	bls.n	800d588 <_vfiprintf_r+0x1cc>
 800d580:	2b00      	cmp	r3, #0
 800d582:	d0c6      	beq.n	800d512 <_vfiprintf_r+0x156>
 800d584:	9105      	str	r1, [sp, #20]
 800d586:	e7c4      	b.n	800d512 <_vfiprintf_r+0x156>
 800d588:	fb0c 2101 	mla	r1, ip, r1, r2
 800d58c:	4604      	mov	r4, r0
 800d58e:	2301      	movs	r3, #1
 800d590:	e7f0      	b.n	800d574 <_vfiprintf_r+0x1b8>
 800d592:	ab03      	add	r3, sp, #12
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	462a      	mov	r2, r5
 800d598:	4b12      	ldr	r3, [pc, #72]	@ (800d5e4 <_vfiprintf_r+0x228>)
 800d59a:	a904      	add	r1, sp, #16
 800d59c:	4630      	mov	r0, r6
 800d59e:	f7fb feb9 	bl	8009314 <_printf_float>
 800d5a2:	4607      	mov	r7, r0
 800d5a4:	1c78      	adds	r0, r7, #1
 800d5a6:	d1d6      	bne.n	800d556 <_vfiprintf_r+0x19a>
 800d5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5aa:	07d9      	lsls	r1, r3, #31
 800d5ac:	d405      	bmi.n	800d5ba <_vfiprintf_r+0x1fe>
 800d5ae:	89ab      	ldrh	r3, [r5, #12]
 800d5b0:	059a      	lsls	r2, r3, #22
 800d5b2:	d402      	bmi.n	800d5ba <_vfiprintf_r+0x1fe>
 800d5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5b6:	f7fc fe37 	bl	800a228 <__retarget_lock_release_recursive>
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	065b      	lsls	r3, r3, #25
 800d5be:	f53f af1f 	bmi.w	800d400 <_vfiprintf_r+0x44>
 800d5c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5c4:	e71e      	b.n	800d404 <_vfiprintf_r+0x48>
 800d5c6:	ab03      	add	r3, sp, #12
 800d5c8:	9300      	str	r3, [sp, #0]
 800d5ca:	462a      	mov	r2, r5
 800d5cc:	4b05      	ldr	r3, [pc, #20]	@ (800d5e4 <_vfiprintf_r+0x228>)
 800d5ce:	a904      	add	r1, sp, #16
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f7fc f937 	bl	8009844 <_printf_i>
 800d5d6:	e7e4      	b.n	800d5a2 <_vfiprintf_r+0x1e6>
 800d5d8:	0800e671 	.word	0x0800e671
 800d5dc:	0800e67b 	.word	0x0800e67b
 800d5e0:	08009315 	.word	0x08009315
 800d5e4:	0800d399 	.word	0x0800d399
 800d5e8:	0800e677 	.word	0x0800e677

0800d5ec <__swbuf_r>:
 800d5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ee:	460e      	mov	r6, r1
 800d5f0:	4614      	mov	r4, r2
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	b118      	cbz	r0, 800d5fe <__swbuf_r+0x12>
 800d5f6:	6a03      	ldr	r3, [r0, #32]
 800d5f8:	b90b      	cbnz	r3, 800d5fe <__swbuf_r+0x12>
 800d5fa:	f7fc fce3 	bl	8009fc4 <__sinit>
 800d5fe:	69a3      	ldr	r3, [r4, #24]
 800d600:	60a3      	str	r3, [r4, #8]
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	071a      	lsls	r2, r3, #28
 800d606:	d501      	bpl.n	800d60c <__swbuf_r+0x20>
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	b943      	cbnz	r3, 800d61e <__swbuf_r+0x32>
 800d60c:	4621      	mov	r1, r4
 800d60e:	4628      	mov	r0, r5
 800d610:	f000 f82a 	bl	800d668 <__swsetup_r>
 800d614:	b118      	cbz	r0, 800d61e <__swbuf_r+0x32>
 800d616:	f04f 37ff 	mov.w	r7, #4294967295
 800d61a:	4638      	mov	r0, r7
 800d61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d61e:	6823      	ldr	r3, [r4, #0]
 800d620:	6922      	ldr	r2, [r4, #16]
 800d622:	1a98      	subs	r0, r3, r2
 800d624:	6963      	ldr	r3, [r4, #20]
 800d626:	b2f6      	uxtb	r6, r6
 800d628:	4283      	cmp	r3, r0
 800d62a:	4637      	mov	r7, r6
 800d62c:	dc05      	bgt.n	800d63a <__swbuf_r+0x4e>
 800d62e:	4621      	mov	r1, r4
 800d630:	4628      	mov	r0, r5
 800d632:	f7ff fa6f 	bl	800cb14 <_fflush_r>
 800d636:	2800      	cmp	r0, #0
 800d638:	d1ed      	bne.n	800d616 <__swbuf_r+0x2a>
 800d63a:	68a3      	ldr	r3, [r4, #8]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	60a3      	str	r3, [r4, #8]
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	1c5a      	adds	r2, r3, #1
 800d644:	6022      	str	r2, [r4, #0]
 800d646:	701e      	strb	r6, [r3, #0]
 800d648:	6962      	ldr	r2, [r4, #20]
 800d64a:	1c43      	adds	r3, r0, #1
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d004      	beq.n	800d65a <__swbuf_r+0x6e>
 800d650:	89a3      	ldrh	r3, [r4, #12]
 800d652:	07db      	lsls	r3, r3, #31
 800d654:	d5e1      	bpl.n	800d61a <__swbuf_r+0x2e>
 800d656:	2e0a      	cmp	r6, #10
 800d658:	d1df      	bne.n	800d61a <__swbuf_r+0x2e>
 800d65a:	4621      	mov	r1, r4
 800d65c:	4628      	mov	r0, r5
 800d65e:	f7ff fa59 	bl	800cb14 <_fflush_r>
 800d662:	2800      	cmp	r0, #0
 800d664:	d0d9      	beq.n	800d61a <__swbuf_r+0x2e>
 800d666:	e7d6      	b.n	800d616 <__swbuf_r+0x2a>

0800d668 <__swsetup_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4b29      	ldr	r3, [pc, #164]	@ (800d710 <__swsetup_r+0xa8>)
 800d66c:	4605      	mov	r5, r0
 800d66e:	6818      	ldr	r0, [r3, #0]
 800d670:	460c      	mov	r4, r1
 800d672:	b118      	cbz	r0, 800d67c <__swsetup_r+0x14>
 800d674:	6a03      	ldr	r3, [r0, #32]
 800d676:	b90b      	cbnz	r3, 800d67c <__swsetup_r+0x14>
 800d678:	f7fc fca4 	bl	8009fc4 <__sinit>
 800d67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d680:	0719      	lsls	r1, r3, #28
 800d682:	d422      	bmi.n	800d6ca <__swsetup_r+0x62>
 800d684:	06da      	lsls	r2, r3, #27
 800d686:	d407      	bmi.n	800d698 <__swsetup_r+0x30>
 800d688:	2209      	movs	r2, #9
 800d68a:	602a      	str	r2, [r5, #0]
 800d68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d690:	81a3      	strh	r3, [r4, #12]
 800d692:	f04f 30ff 	mov.w	r0, #4294967295
 800d696:	e033      	b.n	800d700 <__swsetup_r+0x98>
 800d698:	0758      	lsls	r0, r3, #29
 800d69a:	d512      	bpl.n	800d6c2 <__swsetup_r+0x5a>
 800d69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d69e:	b141      	cbz	r1, 800d6b2 <__swsetup_r+0x4a>
 800d6a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6a4:	4299      	cmp	r1, r3
 800d6a6:	d002      	beq.n	800d6ae <__swsetup_r+0x46>
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f7fd fc21 	bl	800aef0 <_free_r>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	6063      	str	r3, [r4, #4]
 800d6be:	6923      	ldr	r3, [r4, #16]
 800d6c0:	6023      	str	r3, [r4, #0]
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	f043 0308 	orr.w	r3, r3, #8
 800d6c8:	81a3      	strh	r3, [r4, #12]
 800d6ca:	6923      	ldr	r3, [r4, #16]
 800d6cc:	b94b      	cbnz	r3, 800d6e2 <__swsetup_r+0x7a>
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6d8:	d003      	beq.n	800d6e2 <__swsetup_r+0x7a>
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4628      	mov	r0, r5
 800d6de:	f000 f883 	bl	800d7e8 <__smakebuf_r>
 800d6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e6:	f013 0201 	ands.w	r2, r3, #1
 800d6ea:	d00a      	beq.n	800d702 <__swsetup_r+0x9a>
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	60a2      	str	r2, [r4, #8]
 800d6f0:	6962      	ldr	r2, [r4, #20]
 800d6f2:	4252      	negs	r2, r2
 800d6f4:	61a2      	str	r2, [r4, #24]
 800d6f6:	6922      	ldr	r2, [r4, #16]
 800d6f8:	b942      	cbnz	r2, 800d70c <__swsetup_r+0xa4>
 800d6fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d6fe:	d1c5      	bne.n	800d68c <__swsetup_r+0x24>
 800d700:	bd38      	pop	{r3, r4, r5, pc}
 800d702:	0799      	lsls	r1, r3, #30
 800d704:	bf58      	it	pl
 800d706:	6962      	ldrpl	r2, [r4, #20]
 800d708:	60a2      	str	r2, [r4, #8]
 800d70a:	e7f4      	b.n	800d6f6 <__swsetup_r+0x8e>
 800d70c:	2000      	movs	r0, #0
 800d70e:	e7f7      	b.n	800d700 <__swsetup_r+0x98>
 800d710:	200000a0 	.word	0x200000a0

0800d714 <_raise_r>:
 800d714:	291f      	cmp	r1, #31
 800d716:	b538      	push	{r3, r4, r5, lr}
 800d718:	4605      	mov	r5, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	d904      	bls.n	800d728 <_raise_r+0x14>
 800d71e:	2316      	movs	r3, #22
 800d720:	6003      	str	r3, [r0, #0]
 800d722:	f04f 30ff 	mov.w	r0, #4294967295
 800d726:	bd38      	pop	{r3, r4, r5, pc}
 800d728:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d72a:	b112      	cbz	r2, 800d732 <_raise_r+0x1e>
 800d72c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d730:	b94b      	cbnz	r3, 800d746 <_raise_r+0x32>
 800d732:	4628      	mov	r0, r5
 800d734:	f000 f830 	bl	800d798 <_getpid_r>
 800d738:	4622      	mov	r2, r4
 800d73a:	4601      	mov	r1, r0
 800d73c:	4628      	mov	r0, r5
 800d73e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d742:	f000 b817 	b.w	800d774 <_kill_r>
 800d746:	2b01      	cmp	r3, #1
 800d748:	d00a      	beq.n	800d760 <_raise_r+0x4c>
 800d74a:	1c59      	adds	r1, r3, #1
 800d74c:	d103      	bne.n	800d756 <_raise_r+0x42>
 800d74e:	2316      	movs	r3, #22
 800d750:	6003      	str	r3, [r0, #0]
 800d752:	2001      	movs	r0, #1
 800d754:	e7e7      	b.n	800d726 <_raise_r+0x12>
 800d756:	2100      	movs	r1, #0
 800d758:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d75c:	4620      	mov	r0, r4
 800d75e:	4798      	blx	r3
 800d760:	2000      	movs	r0, #0
 800d762:	e7e0      	b.n	800d726 <_raise_r+0x12>

0800d764 <raise>:
 800d764:	4b02      	ldr	r3, [pc, #8]	@ (800d770 <raise+0xc>)
 800d766:	4601      	mov	r1, r0
 800d768:	6818      	ldr	r0, [r3, #0]
 800d76a:	f7ff bfd3 	b.w	800d714 <_raise_r>
 800d76e:	bf00      	nop
 800d770:	200000a0 	.word	0x200000a0

0800d774 <_kill_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4d07      	ldr	r5, [pc, #28]	@ (800d794 <_kill_r+0x20>)
 800d778:	2300      	movs	r3, #0
 800d77a:	4604      	mov	r4, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	4611      	mov	r1, r2
 800d780:	602b      	str	r3, [r5, #0]
 800d782:	f7f6 f925 	bl	80039d0 <_kill>
 800d786:	1c43      	adds	r3, r0, #1
 800d788:	d102      	bne.n	800d790 <_kill_r+0x1c>
 800d78a:	682b      	ldr	r3, [r5, #0]
 800d78c:	b103      	cbz	r3, 800d790 <_kill_r+0x1c>
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	bd38      	pop	{r3, r4, r5, pc}
 800d792:	bf00      	nop
 800d794:	20002d54 	.word	0x20002d54

0800d798 <_getpid_r>:
 800d798:	f7f6 b912 	b.w	80039c0 <_getpid>

0800d79c <__swhatbuf_r>:
 800d79c:	b570      	push	{r4, r5, r6, lr}
 800d79e:	460c      	mov	r4, r1
 800d7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7a4:	2900      	cmp	r1, #0
 800d7a6:	b096      	sub	sp, #88	@ 0x58
 800d7a8:	4615      	mov	r5, r2
 800d7aa:	461e      	mov	r6, r3
 800d7ac:	da0d      	bge.n	800d7ca <__swhatbuf_r+0x2e>
 800d7ae:	89a3      	ldrh	r3, [r4, #12]
 800d7b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7b4:	f04f 0100 	mov.w	r1, #0
 800d7b8:	bf14      	ite	ne
 800d7ba:	2340      	movne	r3, #64	@ 0x40
 800d7bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	6031      	str	r1, [r6, #0]
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	b016      	add	sp, #88	@ 0x58
 800d7c8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ca:	466a      	mov	r2, sp
 800d7cc:	f000 f848 	bl	800d860 <_fstat_r>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	dbec      	blt.n	800d7ae <__swhatbuf_r+0x12>
 800d7d4:	9901      	ldr	r1, [sp, #4]
 800d7d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d7da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7de:	4259      	negs	r1, r3
 800d7e0:	4159      	adcs	r1, r3
 800d7e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7e6:	e7eb      	b.n	800d7c0 <__swhatbuf_r+0x24>

0800d7e8 <__smakebuf_r>:
 800d7e8:	898b      	ldrh	r3, [r1, #12]
 800d7ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7ec:	079d      	lsls	r5, r3, #30
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	d507      	bpl.n	800d804 <__smakebuf_r+0x1c>
 800d7f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	6123      	str	r3, [r4, #16]
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	6163      	str	r3, [r4, #20]
 800d800:	b003      	add	sp, #12
 800d802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d804:	ab01      	add	r3, sp, #4
 800d806:	466a      	mov	r2, sp
 800d808:	f7ff ffc8 	bl	800d79c <__swhatbuf_r>
 800d80c:	9f00      	ldr	r7, [sp, #0]
 800d80e:	4605      	mov	r5, r0
 800d810:	4639      	mov	r1, r7
 800d812:	4630      	mov	r0, r6
 800d814:	f7fd fbe0 	bl	800afd8 <_malloc_r>
 800d818:	b948      	cbnz	r0, 800d82e <__smakebuf_r+0x46>
 800d81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d81e:	059a      	lsls	r2, r3, #22
 800d820:	d4ee      	bmi.n	800d800 <__smakebuf_r+0x18>
 800d822:	f023 0303 	bic.w	r3, r3, #3
 800d826:	f043 0302 	orr.w	r3, r3, #2
 800d82a:	81a3      	strh	r3, [r4, #12]
 800d82c:	e7e2      	b.n	800d7f4 <__smakebuf_r+0xc>
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	6020      	str	r0, [r4, #0]
 800d832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d836:	81a3      	strh	r3, [r4, #12]
 800d838:	9b01      	ldr	r3, [sp, #4]
 800d83a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d83e:	b15b      	cbz	r3, 800d858 <__smakebuf_r+0x70>
 800d840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d844:	4630      	mov	r0, r6
 800d846:	f000 f81d 	bl	800d884 <_isatty_r>
 800d84a:	b128      	cbz	r0, 800d858 <__smakebuf_r+0x70>
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	f023 0303 	bic.w	r3, r3, #3
 800d852:	f043 0301 	orr.w	r3, r3, #1
 800d856:	81a3      	strh	r3, [r4, #12]
 800d858:	89a3      	ldrh	r3, [r4, #12]
 800d85a:	431d      	orrs	r5, r3
 800d85c:	81a5      	strh	r5, [r4, #12]
 800d85e:	e7cf      	b.n	800d800 <__smakebuf_r+0x18>

0800d860 <_fstat_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4d07      	ldr	r5, [pc, #28]	@ (800d880 <_fstat_r+0x20>)
 800d864:	2300      	movs	r3, #0
 800d866:	4604      	mov	r4, r0
 800d868:	4608      	mov	r0, r1
 800d86a:	4611      	mov	r1, r2
 800d86c:	602b      	str	r3, [r5, #0]
 800d86e:	f7f6 f90f 	bl	8003a90 <_fstat>
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	d102      	bne.n	800d87c <_fstat_r+0x1c>
 800d876:	682b      	ldr	r3, [r5, #0]
 800d878:	b103      	cbz	r3, 800d87c <_fstat_r+0x1c>
 800d87a:	6023      	str	r3, [r4, #0]
 800d87c:	bd38      	pop	{r3, r4, r5, pc}
 800d87e:	bf00      	nop
 800d880:	20002d54 	.word	0x20002d54

0800d884 <_isatty_r>:
 800d884:	b538      	push	{r3, r4, r5, lr}
 800d886:	4d06      	ldr	r5, [pc, #24]	@ (800d8a0 <_isatty_r+0x1c>)
 800d888:	2300      	movs	r3, #0
 800d88a:	4604      	mov	r4, r0
 800d88c:	4608      	mov	r0, r1
 800d88e:	602b      	str	r3, [r5, #0]
 800d890:	f7f6 f90e 	bl	8003ab0 <_isatty>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_isatty_r+0x1a>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_isatty_r+0x1a>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	20002d54 	.word	0x20002d54

0800d8a4 <fmod>:
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a6:	ed2d 8b02 	vpush	{d8}
 800d8aa:	ec57 6b10 	vmov	r6, r7, d0
 800d8ae:	ec55 4b11 	vmov	r4, r5, d1
 800d8b2:	f000 f825 	bl	800d900 <__ieee754_fmod>
 800d8b6:	4622      	mov	r2, r4
 800d8b8:	462b      	mov	r3, r5
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	4639      	mov	r1, r7
 800d8be:	eeb0 8a40 	vmov.f32	s16, s0
 800d8c2:	eef0 8a60 	vmov.f32	s17, s1
 800d8c6:	f7f3 f939 	bl	8000b3c <__aeabi_dcmpun>
 800d8ca:	b990      	cbnz	r0, 800d8f2 <fmod+0x4e>
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f7f3 f900 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8d8:	b158      	cbz	r0, 800d8f2 <fmod+0x4e>
 800d8da:	f7fc fc79 	bl	800a1d0 <__errno>
 800d8de:	2321      	movs	r3, #33	@ 0x21
 800d8e0:	6003      	str	r3, [r0, #0]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7f2 ffb7 	bl	800085c <__aeabi_ddiv>
 800d8ee:	ec41 0b18 	vmov	d8, r0, r1
 800d8f2:	eeb0 0a48 	vmov.f32	s0, s16
 800d8f6:	eef0 0a68 	vmov.f32	s1, s17
 800d8fa:	ecbd 8b02 	vpop	{d8}
 800d8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d900 <__ieee754_fmod>:
 800d900:	ec53 2b11 	vmov	r2, r3, d1
 800d904:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800d908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d90c:	ea52 040c 	orrs.w	r4, r2, ip
 800d910:	ec51 0b10 	vmov	r0, r1, d0
 800d914:	461e      	mov	r6, r3
 800d916:	4617      	mov	r7, r2
 800d918:	4696      	mov	lr, r2
 800d91a:	d00c      	beq.n	800d936 <__ieee754_fmod+0x36>
 800d91c:	4c77      	ldr	r4, [pc, #476]	@ (800dafc <__ieee754_fmod+0x1fc>)
 800d91e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800d922:	45a0      	cmp	r8, r4
 800d924:	4689      	mov	r9, r1
 800d926:	d806      	bhi.n	800d936 <__ieee754_fmod+0x36>
 800d928:	4254      	negs	r4, r2
 800d92a:	4d75      	ldr	r5, [pc, #468]	@ (800db00 <__ieee754_fmod+0x200>)
 800d92c:	4314      	orrs	r4, r2
 800d92e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800d932:	42ac      	cmp	r4, r5
 800d934:	d909      	bls.n	800d94a <__ieee754_fmod+0x4a>
 800d936:	f7f2 fe67 	bl	8000608 <__aeabi_dmul>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	f7f2 ff8d 	bl	800085c <__aeabi_ddiv>
 800d942:	ec41 0b10 	vmov	d0, r0, r1
 800d946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94a:	45e0      	cmp	r8, ip
 800d94c:	4682      	mov	sl, r0
 800d94e:	4604      	mov	r4, r0
 800d950:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800d954:	dc09      	bgt.n	800d96a <__ieee754_fmod+0x6a>
 800d956:	dbf4      	blt.n	800d942 <__ieee754_fmod+0x42>
 800d958:	4282      	cmp	r2, r0
 800d95a:	d8f2      	bhi.n	800d942 <__ieee754_fmod+0x42>
 800d95c:	d105      	bne.n	800d96a <__ieee754_fmod+0x6a>
 800d95e:	4b69      	ldr	r3, [pc, #420]	@ (800db04 <__ieee754_fmod+0x204>)
 800d960:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800d964:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d968:	e7eb      	b.n	800d942 <__ieee754_fmod+0x42>
 800d96a:	4a65      	ldr	r2, [pc, #404]	@ (800db00 <__ieee754_fmod+0x200>)
 800d96c:	ea19 0f02 	tst.w	r9, r2
 800d970:	d148      	bne.n	800da04 <__ieee754_fmod+0x104>
 800d972:	f1b8 0f00 	cmp.w	r8, #0
 800d976:	d13d      	bne.n	800d9f4 <__ieee754_fmod+0xf4>
 800d978:	4963      	ldr	r1, [pc, #396]	@ (800db08 <__ieee754_fmod+0x208>)
 800d97a:	4653      	mov	r3, sl
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dc36      	bgt.n	800d9ee <__ieee754_fmod+0xee>
 800d980:	4216      	tst	r6, r2
 800d982:	d14f      	bne.n	800da24 <__ieee754_fmod+0x124>
 800d984:	f1bc 0f00 	cmp.w	ip, #0
 800d988:	d144      	bne.n	800da14 <__ieee754_fmod+0x114>
 800d98a:	4a5f      	ldr	r2, [pc, #380]	@ (800db08 <__ieee754_fmod+0x208>)
 800d98c:	463b      	mov	r3, r7
 800d98e:	2b00      	cmp	r3, #0
 800d990:	dc3d      	bgt.n	800da0e <__ieee754_fmod+0x10e>
 800d992:	485e      	ldr	r0, [pc, #376]	@ (800db0c <__ieee754_fmod+0x20c>)
 800d994:	4281      	cmp	r1, r0
 800d996:	db4a      	blt.n	800da2e <__ieee754_fmod+0x12e>
 800d998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d99c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9a0:	485a      	ldr	r0, [pc, #360]	@ (800db0c <__ieee754_fmod+0x20c>)
 800d9a2:	4282      	cmp	r2, r0
 800d9a4:	db57      	blt.n	800da56 <__ieee754_fmod+0x156>
 800d9a6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d9aa:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800d9ae:	1a89      	subs	r1, r1, r2
 800d9b0:	1b98      	subs	r0, r3, r6
 800d9b2:	eba4 070e 	sub.w	r7, r4, lr
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	d162      	bne.n	800da80 <__ieee754_fmod+0x180>
 800d9ba:	4574      	cmp	r4, lr
 800d9bc:	bf38      	it	cc
 800d9be:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	bfa4      	itt	ge
 800d9c6:	463c      	movge	r4, r7
 800d9c8:	4603      	movge	r3, r0
 800d9ca:	ea53 0104 	orrs.w	r1, r3, r4
 800d9ce:	d0c6      	beq.n	800d95e <__ieee754_fmod+0x5e>
 800d9d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9d4:	db69      	blt.n	800daaa <__ieee754_fmod+0x1aa>
 800d9d6:	494d      	ldr	r1, [pc, #308]	@ (800db0c <__ieee754_fmod+0x20c>)
 800d9d8:	428a      	cmp	r2, r1
 800d9da:	db6c      	blt.n	800dab6 <__ieee754_fmod+0x1b6>
 800d9dc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d9e0:	432b      	orrs	r3, r5
 800d9e2:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800d9e6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	e7a9      	b.n	800d942 <__ieee754_fmod+0x42>
 800d9ee:	3901      	subs	r1, #1
 800d9f0:	005b      	lsls	r3, r3, #1
 800d9f2:	e7c3      	b.n	800d97c <__ieee754_fmod+0x7c>
 800d9f4:	4945      	ldr	r1, [pc, #276]	@ (800db0c <__ieee754_fmod+0x20c>)
 800d9f6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	ddc0      	ble.n	800d980 <__ieee754_fmod+0x80>
 800d9fe:	3901      	subs	r1, #1
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	e7fa      	b.n	800d9fa <__ieee754_fmod+0xfa>
 800da04:	ea4f 5128 	mov.w	r1, r8, asr #20
 800da08:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800da0c:	e7b8      	b.n	800d980 <__ieee754_fmod+0x80>
 800da0e:	3a01      	subs	r2, #1
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	e7bc      	b.n	800d98e <__ieee754_fmod+0x8e>
 800da14:	4a3d      	ldr	r2, [pc, #244]	@ (800db0c <__ieee754_fmod+0x20c>)
 800da16:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	ddb9      	ble.n	800d992 <__ieee754_fmod+0x92>
 800da1e:	3a01      	subs	r2, #1
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	e7fa      	b.n	800da1a <__ieee754_fmod+0x11a>
 800da24:	ea4f 522c 	mov.w	r2, ip, asr #20
 800da28:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800da2c:	e7b1      	b.n	800d992 <__ieee754_fmod+0x92>
 800da2e:	1a40      	subs	r0, r0, r1
 800da30:	281f      	cmp	r0, #31
 800da32:	dc0a      	bgt.n	800da4a <__ieee754_fmod+0x14a>
 800da34:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800da38:	fa08 f800 	lsl.w	r8, r8, r0
 800da3c:	fa2a f303 	lsr.w	r3, sl, r3
 800da40:	ea43 0308 	orr.w	r3, r3, r8
 800da44:	fa0a f400 	lsl.w	r4, sl, r0
 800da48:	e7aa      	b.n	800d9a0 <__ieee754_fmod+0xa0>
 800da4a:	4b31      	ldr	r3, [pc, #196]	@ (800db10 <__ieee754_fmod+0x210>)
 800da4c:	1a5b      	subs	r3, r3, r1
 800da4e:	fa0a f303 	lsl.w	r3, sl, r3
 800da52:	2400      	movs	r4, #0
 800da54:	e7a4      	b.n	800d9a0 <__ieee754_fmod+0xa0>
 800da56:	1a80      	subs	r0, r0, r2
 800da58:	281f      	cmp	r0, #31
 800da5a:	dc0a      	bgt.n	800da72 <__ieee754_fmod+0x172>
 800da5c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800da60:	fa0c fc00 	lsl.w	ip, ip, r0
 800da64:	fa27 f606 	lsr.w	r6, r7, r6
 800da68:	ea46 060c 	orr.w	r6, r6, ip
 800da6c:	fa07 fe00 	lsl.w	lr, r7, r0
 800da70:	e79d      	b.n	800d9ae <__ieee754_fmod+0xae>
 800da72:	4e27      	ldr	r6, [pc, #156]	@ (800db10 <__ieee754_fmod+0x210>)
 800da74:	1ab6      	subs	r6, r6, r2
 800da76:	fa07 f606 	lsl.w	r6, r7, r6
 800da7a:	f04f 0e00 	mov.w	lr, #0
 800da7e:	e796      	b.n	800d9ae <__ieee754_fmod+0xae>
 800da80:	4574      	cmp	r4, lr
 800da82:	bf38      	it	cc
 800da84:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800da88:	2800      	cmp	r0, #0
 800da8a:	da05      	bge.n	800da98 <__ieee754_fmod+0x198>
 800da8c:	0fe0      	lsrs	r0, r4, #31
 800da8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800da92:	0064      	lsls	r4, r4, #1
 800da94:	3901      	subs	r1, #1
 800da96:	e78b      	b.n	800d9b0 <__ieee754_fmod+0xb0>
 800da98:	ea50 0307 	orrs.w	r3, r0, r7
 800da9c:	f43f af5f 	beq.w	800d95e <__ieee754_fmod+0x5e>
 800daa0:	0ffb      	lsrs	r3, r7, #31
 800daa2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800daa6:	007c      	lsls	r4, r7, #1
 800daa8:	e7f4      	b.n	800da94 <__ieee754_fmod+0x194>
 800daaa:	0fe1      	lsrs	r1, r4, #31
 800daac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800dab0:	0064      	lsls	r4, r4, #1
 800dab2:	3a01      	subs	r2, #1
 800dab4:	e78c      	b.n	800d9d0 <__ieee754_fmod+0xd0>
 800dab6:	1a89      	subs	r1, r1, r2
 800dab8:	2914      	cmp	r1, #20
 800daba:	dc0a      	bgt.n	800dad2 <__ieee754_fmod+0x1d2>
 800dabc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800dac0:	fa03 f202 	lsl.w	r2, r3, r2
 800dac4:	40cc      	lsrs	r4, r1
 800dac6:	4322      	orrs	r2, r4
 800dac8:	410b      	asrs	r3, r1
 800daca:	ea43 0105 	orr.w	r1, r3, r5
 800dace:	4610      	mov	r0, r2
 800dad0:	e737      	b.n	800d942 <__ieee754_fmod+0x42>
 800dad2:	291f      	cmp	r1, #31
 800dad4:	dc07      	bgt.n	800dae6 <__ieee754_fmod+0x1e6>
 800dad6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800dada:	40cc      	lsrs	r4, r1
 800dadc:	fa03 f202 	lsl.w	r2, r3, r2
 800dae0:	4322      	orrs	r2, r4
 800dae2:	462b      	mov	r3, r5
 800dae4:	e7f1      	b.n	800daca <__ieee754_fmod+0x1ca>
 800dae6:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800daea:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800daee:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800daf2:	32e2      	adds	r2, #226	@ 0xe2
 800daf4:	fa43 f202 	asr.w	r2, r3, r2
 800daf8:	e7f3      	b.n	800dae2 <__ieee754_fmod+0x1e2>
 800dafa:	bf00      	nop
 800dafc:	7fefffff 	.word	0x7fefffff
 800db00:	7ff00000 	.word	0x7ff00000
 800db04:	0800e728 	.word	0x0800e728
 800db08:	fffffbed 	.word	0xfffffbed
 800db0c:	fffffc02 	.word	0xfffffc02
 800db10:	fffffbe2 	.word	0xfffffbe2

0800db14 <_init>:
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db16:	bf00      	nop
 800db18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1a:	bc08      	pop	{r3}
 800db1c:	469e      	mov	lr, r3
 800db1e:	4770      	bx	lr

0800db20 <_fini>:
 800db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db22:	bf00      	nop
 800db24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db26:	bc08      	pop	{r3}
 800db28:	469e      	mov	lr, r3
 800db2a:	4770      	bx	lr
